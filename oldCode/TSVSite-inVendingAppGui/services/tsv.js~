/**
 * RPC interface to NetTSV
 */

var avt = angular.module('avt', []);

avt.factory('TsvService', function() {

    var tsvApi = [

        "addStock",
        "addToCartByCoil",
        "addToCartByProductID",
        "addToCartBySelection",
        "adminValidateProductByCoil",
        "authorizeCreditCard",
        "changeShopperPassword",
        "clearMachineFaults",
        "clockAdmin",
        "closeAdmin",
        "createShopper",
        "debug",
        "disableAgeVerification",
        "disableLoginDevices",
        "disablePaymentDevice",
        "emptyCart",
        "enableAgeVerification",
        "enableLoginDevices",
        "enablePaymentDevice",
        "endUserLogging",
        "enumerateComponents",
        "fetchAllCustomSettings",
        "fetchAllMachineSettings",
        "fetchCoilProductIDMap",
        "fetchConfig",
        "fetchCreditBalance",
        "fetchCustomMachineSetting",
        "fetchFlashConfig",
        "fetchMachineCoilProductIDMap",
        "fetchMachineIds",
        "fetchProduct",
        "fetchProductByCategory",
        "fetchProductCategories",
        "fetchProductCategoriesByParentCategoryID",
        "fetchProductQuick",
        "fetchShoppingCart2",
        "fetchValidCoils",
        "fetchValidTrays",
        "fillCoil",
        "fillMachine",
        "getFaultCodes",
        "getShopperInfo",
        "heartbeatNow",
        "kickLoginWatchdog",
        "lastHeartbeatTime",
        "loginShopper",
        "logoutShopper",
        "payout",
        "printReceipt",
        "refresh",
        "refundRequest",
        "registerComponent",
        "removeFromCartByProductID",
        "removeStock",
        "resetCoupon",
        "resetCreditBalance",
        "resetVendProperties",
        "runAutoMap",
        "saveFlashSettings",
        "searchProduct",
        "setCardSecurityBillingZip",
        "setCardSecurityCvv2",
        "setCardSecurityInfo",
        "setCustomMachineSetting",
        "setDropShipInfo",
        "setEmailReceiptInfo",
        "setLights",
        "setPromoInfo",
        "setShippingAmount",
        "setVendProperty",
        "shutdown",
        "startUserLogging",
        "startVend",
        "triggerDataDownloader",
        "tsvVersionNumber",
        "updateItemPrice",
        "updateShopper",
        "validateAdminPassword",
        "validateAllCoils",
        "validateCoupon",
        "validateProductByCoil",
        "validateProductByProductId",
        "vendProduct",
        "vendSingleItem"

    ];

    var tsv = {};

    tsv.failing = false;

    function doRequest(args) {

        var requestJson = JSON.stringify(args);

        var tsvResult = [];

        var done = false;
        var tries = 4;

        while (!done && tries-- >= 0)
        {
            $.ajax({
                url: 'tsv/flashapi',
                data: requestJson,
                method: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                async: false,
                success: function (result) {
                    //console.log("AJAX response: " + result);
                    tsvResult = result;
                    done = true;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(textStatus + " - " + errorThrown);
                }
            });
        }

        return tsvResult;
    }

    // autogenerate handlers
    for (var i = 0; i < tsvApi.length; i++) {
        tsv[tsvApi[i]] = (function (name) {
            return function () {

                var args = Array.prototype.slice.call(arguments);
                args.unshift(name);

                return doRequest(args);
            };
        })(tsvApi[i]);
    }

    tsv.eventSubscriptions = {};

    tsv.isSubscribed = function(eventName, self, handler) {
        var chain = tsv.eventSubscriptions[eventName];
        if (chain === undefined) return false;
        var len = chain.length;
        for (var i = 0; i < len; i++) {
            if (chain[i][0] === self && chain[i][1] === handler) {
                return true;
            }
        }
        return false;
    };

    tsv.refreshIndexPage = function() {
        window.location.reload();
    };

    tsv.subscribe = function(eventName, self, handler) {
        if (tsv.isSubscribed(eventName, self, handler)) return;

        var chain = tsv.eventSubscriptions[eventName] || [];
        chain.push([self, handler]);
        tsv.eventSubscriptions[eventName] = chain;
    };

    tsv.unsubscribe =  function(eventName, self, handler) {
        var chain = tsv.eventSubscriptions[eventName];
        if (chain === undefined || chain.length == 0) {
            return;
        }

        for (i = 0; i < chain.length; i++) {
            if (chain[i][0] === self && chain[i][1] === handler) {
                break;
            }
        }

        if (i < chain.length) {
            chain.splice(i, 1);
        }
    };

    //Ping added on 0505/2015
    tsv.session = {};
    tsv.session.msg = "Please Swipe Card...";
    tsv.session.vendErrorMsg1 = "vendErrorMsg1";
    tsv.session.vendErrorMsg2 = "vendErrorMsg2";
    tsv.session.vendSettleTotal = 0;
    tsv.session.bVendingInProcess = false;
    tsv.session.inserted = 0;
    tsv.session.creditBalance = 0;
    tsv.session.thankyouTimer;
    tsv.session.vendErrorTimer;
    tsv.session.paymentTimer;
    tsv.session.adminTimer;
    tsv.session.currentView;
    tsv.session.bRunningAutoMap = false;
    tsv.session.machineID = 0;
    //tsv.session.generalIdleTimer;


    tsv.cache = {};
    tsv.cache.shoppingCart = {};
    tsv.cache.productList = {};
    tsv.cache.planogram = {};
    tsv.cache.machineSettings = {};
    tsv.cache.custommachinesettings = {};
    tsv.cache.machineList = {};
    //tsv.cache.fetchCreditBalance = {};

    // set up event poller every 300 msec
    setInterval(function () {

        var eventList;
        var dirty = false;

        $.ajax({
            url: 'tsv/flashapi/multievent',
            data: '',
            method: 'POST',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            async: false,
            success: function (event) {
                eventList = event;
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                console.log("event poll error: " + textStatus + " - " + errorThrown);
		tsv.failing = true;
            }
        });

        var dispatch = function (e) {
            var eventName = e.shift();
            var chain = tsv.eventSubscriptions[eventName];
            var any = false;

            // invoke all event subscribers
            if (!(chain === undefined)) {
                for (i = 0; i < chain.length; i++) {
                    var pair = chain[i];

                    try {
                        any = true;
                        pair[1].apply(pair[0], e);
                    } catch (err) {
                        console.log("Failed invoking " + eventName + " handler");
                    }
                }
            }

            return any;
        };

        var refreshNgViews = function () {
            try {
                var $scope = angular.element(document).scope();
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
            } catch (err) {
                console.log("Failed to refresh ng view " + err);
            }
        };

        if (undefined != eventList) {
            if (eventList[0] == 'noEvent' && tsv.failing) {
		tsv.failing = false;
                var dispatched = dispatch(eventList);
                if (dispatched) {
                    refreshNgViews();
                }
            }else {
                for (var i = 0; i < eventList.length; i++) {
                    var tsvEvent = eventList[i];
                    console.log("TsvEvent: [" + tsvEvent.join(",") + "]");
                    var dispatched = dispatch(tsvEvent);
                    if (dispatched) {
                        refreshNgViews();
                    }
                }
            }
        }

    }, 300);

    return tsv;
});

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "assets/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(6);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _server = __webpack_require__(7);

	var _reactRouter = __webpack_require__(9);

	var _Routes = __webpack_require__(2);

	var _Routes2 = _interopRequireDefault(_Routes);

	var _AppLayout = __webpack_require__(3);

	var _AppLayout2 = _interopRequireDefault(_AppLayout);

	var _NoMatch = __webpack_require__(4);

	var _NoMatch2 = _interopRequireDefault(_NoMatch);

	var _utils = __webpack_require__(5);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('Router');

	//import OM from 'object-merge'

	if (_utils.isClient) {
		Big.log('[renderComponentWithRoot] HAYNOW rendering on the client ');
		_reactDom2.default.render(_react2.default.createElement(
			_reactRouter.Router,
			{ history: _reactRouter.browserHistory },
			_Routes2.default
		), document.getElementById('root'));
	}

	function renderComponentWithRoot(Component, componentProps, initialData) {
		Big.log('renderComponentWithRoot: HAYNOW rendering on the component ');

		var componentHtml = (0, _server.renderToStaticMarkup)(_react2.default.createElement(Component, componentProps));

		var app_render = (0, _server.renderToStaticMarkup)(_react2.default.createElement(_AppLayout2.default, { app_render: componentHtml }));

		return '<!DOCTYPE html>' + app_render;
	}

	function handle404(reply) {
		var wholeHtml = renderComponentWithRoot(_NoMatch2.default);
		reply(wholeHtml).code(404);
	}

	function handleError(reply, error) {
		reply(error.message).code(500);
	}

	function handleRedirect(reply, redirectLocation) {
		reply.redirect(302, redirectLocation.pathname + redirectLocation.search);
	}

	function handleRoute(reply, renderProps) {

		//const isDeveloping = process.env.NODE_ENV !== 'production';
		var routeProps = (0, _utils.getPropsFromRoute)(renderProps, ['requestState']);

		function renderPage(reply) {
			var wholeHtml = renderComponentWithRoot(_reactRouter.RouterContext, renderProps, reply);
			reply(wholeHtml).code(200);
		}

		if (routeProps.requestState) {
			routeProps.requestState().then(renderPage);
		} else {
			renderPage(reply);
		}
	}

	function ServerRouter(req, reply, next) {

		(0, _reactRouter.match)({ routes: _Routes2.default, location: req.url }, function (error, redirectLocation, renderProps) {

			// optional pre-processing or data loading or extra foo, then conditionally:
			finish();

			function finish(reactData) {

				if (reactData) {
					renderProps.initialData = reactData;
				}

				/*
	   Big.log('[SERVER Router.js]');
	   Big.log(req.url);
	   Big.log(Object.keys(renderProps));
	   Big.log( JSON.stringify(renderProps) );
	   */

				if (error) {
					Big.log(' >>>>> error');
					handleError(error);
				} else if (reply, redirectLocation) {
					Big.log(' >>>>> redirect');
					handleRedirect(reply, redirectLocation);
				} else if (renderProps) {
					Big.log(' >>>>> renderProps');
					handleRoute(reply, renderProps);
				} else {
					Big.log(' >>>>> 404');
					handle404(reply);
				}
			}
		});
	}

	// trying to work around babel shit: (using this method results in an object, not a function being exported. meh)
	// found this is babel 5.x (keystone) vs babel 6 (newest release)
	// http://stackoverflow.com/questions/33505992/babel-6-changes-how-it-exports-default?lq=1
	// http://stackoverflow.com/questions/33500598/es6-export-default-imports-into-default-object
	//export default ServerRouter;
	// old method was working, we are not in keystone for this app though so hopefully the (above) new way works?
	module.exports = ServerRouter;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*******
	
		that can be turned on/off via config, so we don't constantly fill the dev console (memory waste)
		.. why not CONSOLE for easy search replace? :-)
		
		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
		>> why is this important?
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		we can use the logging also as a sort of one-way event monitor for remote debugging,
			as well as scraping known log events for GUI events like transactions, timeouts, etc.
			>> kills two, or three, or four... birds with one stone.
	
		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     	.. nah, don't want to type capitals for it...
			Log.log
			Logger.log
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		SomethingFun.log
			Bucket.log
			Big.log
			Big.error
			Big.dir
			Big.warn
			Big.throw
			(any other necessary console.* method)
			
			call like:
			@arg1 = string|array|object|boolean|whatever (like what you usually put in the console methods)
			@arg2 = options
				{
					prefix: STRING,
					restTBD: true
				}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		@arg3 = callback
				callback(actions, options); // async processing of stuff also
			Big.METHOD( arg1, [arg2, [arg3]] )
				if (typeof arg2 === 'function' && !arg3) {
					arg3 = arg2
					arg2 = {} // default config if exists
				}
			
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		class BigLogger {
			
				constructor(prefix) {
					// factory:
					if (!this instanceof BigLogger) {
						return new BigLogger(prefix);
					}
				}
				
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     			...
	
			}
			
		.. also allows to handle the errors differently,
			like actually send off status messages or alerts to different places besides the dev console
			"help help I'm being hacked"
				(when someone is just randomly trying admin passwords because they find the secret button)
				of course, just "5 tries left" can put a stop to brute force,
				maybe if miss > 3 (or == 5) send warning to cloud
		.. load like:
			// general:
			import Big from '../utils/BigLogger'
	
			// prefixed (like DEBUG)
			import Logger from '../utils/BigLogger'
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		var Big = Logger('prefix-for-this-component');
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		// or old style:
			var Big = require('../utils/BigLogger')('prefix-for-this-component');
			
			// code hint:
				to run API:
				1. globalActions = api.filter({ type: global_functions });
				2. prefixActions = api.filter({ prefix: PREFIX });
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     			3. replace any globalActions with matching prefixActions
					>> if global has 2 of one kind, even one prefix match will override
				4. sort_order
					>> default:1, if sort_order: INT in def, use it
				5. step through and run each
				
				ALWAYS LOAD/FILTER ACTIONS EVERY TIME:
				0. phase 2: get config options from the PubSubAppConfigAssetManager
				   (phase 1, just hard-code)
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     			0a. it's cheap to filter, who cares
				1. allows inbound socket API based config update,
					so we can do stuff like "turn on logging"
						in the cloud and get a stream of what should be going to the dev console
				1a. there's a third action set, "admin" that will be injectable and not overridable
					
					** uh, this could allow us to remote test maybe????
	
		.. needs different "write" modes, like good does.
	
			api => [ ARRAY_OF_ANY_BELOW_MULTIPLES_OK_LIKE_GLOBAL_CONSOLE_AND_PREFIX_AXIOS ] // to allow multiple actions, like sending
				=> { console: true } // just write this to the console will ya!
				=> function to call (not always just an outbound API call I guess, can "talk" to other stuff going on
				=> { axios: { AXIOS_CONFIG, [then()], catch() }
				=> { SocketAPI: { TBD_CONFIG, see an Actions } }
				=> { prefix: THE_PREFIX, ANY_VALID_DIRECT_SETTING_ABOVE }
					.. any other global setting for this prefix,
						to cancel out actions if you DO NOT EVER want a component reporting for some reason
						((( 
							ok, except for any action that has admin: true
								because this allows "always on" for remote logging and such,
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     							inserted by an Admin Console command
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     						)))
					LIKE: console: false
						axios: false
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     					etc
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     		prefixes => list of prefixes to filter by
					 => v2, regex in here, so we can PREFIX=shopping* api: => stats api
					 								 PREFIX=checkout* api: => cart tracking / transaction building
			etc => tbd
	
		>>>> crank out v1, that at least controls logging to the console.
	
	


	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//import SocketAPI from './SocketAPI' // when ready.... not using yet

	//import objectAssign from 'react/lib/Object.assign'
	//import { EventEmitter } from 'events'
	//import muDB from '../../lib/muDB'

	// cannot import from utils/index, it results in undefined BigLogger from recursion import
	//import { isClient } from '../utils'

	var globalAPI = [{ type: 'console', config: true } /*,
	                                                   { type: 'axios', config: {
	                                                   url: '/api/big-log',
	                                                   method: 'post',
	                                                   then: [(response) => {
	                                                   console.log('[BigLog] posted log request to API');
	                                                   }],
	                                                   catch: (error) => {
	                                                   console.error('[BigLog] error, did not log request post to api!');
	                                                   console.error(error);
	                                                   }
	                                                   }}
	                                                   */
	];

	// future, will be pushing these admin-level api configs from remote, loading async via SOME_TBD_PROCESS
	var adminAPI = [];

	var BigLog = function () {
		function BigLog(prefix, options) {
			_classCallCheck(this, BigLog);

			if (!(this instanceof BigLog)) {
				return new this(prefix);
			}

			if (!options && prefix && (typeof prefix === 'undefined' ? 'undefined' : _typeof(prefix)) === 'object') {
				options = prefix;
				prefix = options.prefix || null;
			}

			this.prefix = prefix || null;
			this.options = {};
			this.setOptions(options);
		}

		_createClass(BigLog, [{
			key: 'setOptions',
			value: function setOptions(options) {
				var _this = this;

				if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
					// should really do a merge, right?
					//this.options = OM(options, this.options);
					//this.options = options;
					// for now, simple override:
					Object.keys(options).forEach(function (KEY) {
						_this.options[KEY] = options[KEY];
					});
					if (this.options.prefix) {
						this.prefix = this.options.prefix;
					}
				}
			}
		}, {
			key: 'buildApiStack',
			value: function buildApiStack() {
				var localAPI = {};
				globalAPI.forEach(function (API) {
					if (API.type) {
						if (!localAPI[API.type]) localAPI[API.type] = [];
						localAPI[API.type].push(API.config);
					}
				});

				if (this.options && this.options.api) {
					var firsts = {};
					this.options.api.forEach(function (API) {
						if (API.type) {
							if (!localAPI[API.type]) localAPI[API.type] = [];
							// clear it out
							if (API.config === false) {
								localAPI[API.type] = [];
							} else {
								// specific defs to instance override globals, clobber any that are in there on first encounter of override:
								if (!firsts[API.type]) {
									localAPI[API.type] = [];
								}
								firsts[API.type] = true;
								localAPI[API.type].push(API.config);
							}
						}
					});
				}

				adminAPI.forEach(function (API) {
					if (API.type) {
						if (!localAPI[API.type]) localAPI[API.type] = [];
						localAPI[API.type].push(API.config);
					}
				});

				//console.log('got localAPI:');
				//console.log(localAPI);
				return localAPI;
			}
		}, {
			key: 'runRequest',
			value: function runRequest(method, arg, options, callback) {
				var _this2 = this;

				var api = this.buildApiStack(options);

				if (!method) {
					if (callback) {
						callback('error: no recognized __method specified???');
					} else {
						throw new Error('error: no recognized __method specified???');
					}
				}

				Object.keys(api).forEach(function (TYPE) {
					var stack = api[TYPE];
					switch (TYPE) {
						case 'console':
							// no need to parse through, as long as the first node exists and config !== false, run it.
							if (stack[0] && stack[0] === true) {
								if (!!console[method]) {
									console[method](_this2.prefixArg(arg, options));
									if (callback) {
										callback(null, { arg: _this2.prefixArg(arg, options), options: options });
									}
								} else if (method === 'throw') {
									//throw new Error( this.prefix || this.options.prefix + ' -- ' + this.prefixArg(arg, options));
									throw new Error(_this2.prefixArg(arg, options));
								}
								//} else {
								//console.warn('console called, but no stack?');
								//console.log(api[TYPE]);
							}
							break;

						case 'axios':
						case 'ajax':
						case 'server':
							//console.warn('BigLog not ready for this yet: '+TYPE);
							stack.forEach(function (call) {
								if (call.url && call.method && call.then && call.then.length && call.catch && _axios2.default[call.method]) {

									switch (call.method) {
										case 'get':
											try {
												var callme = _axios2.default[call.method](call.url + '/' + method);
												call.then.map(function (C) {
													return callme.then(C);
												});
												callme.then(function () {
													if (callback) {
														callback(null, { arg: _this2.prefixArg(arg, options), options: options });
													}
												});
												callme.catch(call.catch);
											} catch (e) {
												// nada?
											}
											break;

										case 'post':
											try {
												var callme = _axios2.default[call.method](call.url + '/' + method, { log: arg, options: options });
												call.then.map(function (C) {
													return callme.then(C);
												});
												callme.then(function () {
													if (callback) {
														callback(null, { arg: _this2.prefixArg(arg, options), options: options });
													}
												});
												callme.catch(call.catch);
											} catch (e) {
												// nada?
											}
											break;
									}
								} else {
									console.warn(call);
									throw new Error('[BigLog] axios mis-config');
								}
							});
							break;

						case 'SocketAPI':
						case 'socket':
						case 'websocket':
							console.warn('BigLog not ready for this yet: ' + TYPE);
							break;

						default:
							console.warn('unknown BigLog TYPE: ' + TYPE);
							break;
					}
				});
			}
		}, {
			key: 'prefixArg',
			value: function prefixArg(arg, options) {
				if (arg && typeof arg === 'string') {
					var prefix = this.prefix || this.options.prefix;
					if (options && options.prefix) {
						prefix = options.prefix;
					}
					if (prefix) {
						prefix = '[' + prefix + ']: ';
					}
					return prefix + arg;
				}
				return arg;
			}
		}, {
			key: 'log',
			value: function log(arg, options, callback) {
				this.runRequest('log', arg, options, callback);
			}
		}, {
			key: 'dir',
			value: function dir(arg, options, callback) {
				this.runRequest('dir', arg, options, callback);
			}
		}, {
			key: 'warn',
			value: function warn(arg, options, callback) {
				this.runRequest('warn', arg, options, callback);
			}
		}, {
			key: 'error',
			value: function error(arg, options, callback) {
				this.runRequest('error', arg, options, callback);
			}
		}, {
			key: 'throw',
			value: function _throw(arg, options, callback) {
				this.runRequest('throw', arg, options, callback);
			}
		}]);

		return BigLog;
	}();

	/*
	// testing:
	if (isClient) {
		console.warn('exposing BigLog!');
		window.BigLog = BigLog;
	} else {
		console.warn('not client, no expose BigLog!');
	}
	//*/

	exports.default = BigLog;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(9);

	var _App = __webpack_require__(10);

	var _App2 = _interopRequireDefault(_App);

	var _View = __webpack_require__(11);

	var _View2 = _interopRequireDefault(_View);

	var _View3 = __webpack_require__(12);

	var _View4 = _interopRequireDefault(_View3);

	var _PageIdle = __webpack_require__(13);

	var _PageIdle2 = _interopRequireDefault(_PageIdle);

	var _Activate = __webpack_require__(14);

	var _Activate2 = _interopRequireDefault(_Activate);

	var _AdminAutoMap = __webpack_require__(15);

	var _AdminAutoMap2 = _interopRequireDefault(_AdminAutoMap);

	var _AdminBillAcceptor = __webpack_require__(16);

	var _AdminBillAcceptor2 = _interopRequireDefault(_AdminBillAcceptor);

	var _AdminCheckFaults = __webpack_require__(17);

	var _AdminCheckFaults2 = _interopRequireDefault(_AdminCheckFaults);

	var _AdminComponentControl = __webpack_require__(18);

	var _AdminComponentControl2 = _interopRequireDefault(_AdminComponentControl);

	var _AdminHome = __webpack_require__(19);

	var _AdminHome2 = _interopRequireDefault(_AdminHome);

	var _AdminInventory = __webpack_require__(20);

	var _AdminInventory2 = _interopRequireDefault(_AdminInventory);

	var _AdminJofemarExerciser = __webpack_require__(21);

	var _AdminJofemarExerciser2 = _interopRequireDefault(_AdminJofemarExerciser);

	var _AdminLogin = __webpack_require__(22);

	var _AdminLogin2 = _interopRequireDefault(_AdminLogin);

	var _AdminPrintReaderTester = __webpack_require__(23);

	var _AdminPrintReaderTester2 = _interopRequireDefault(_AdminPrintReaderTester);

	var _AdminSettings = __webpack_require__(24);

	var _AdminSettings2 = _interopRequireDefault(_AdminSettings);

	var _AdminStorefrontData = __webpack_require__(25);

	var _AdminStorefrontData2 = _interopRequireDefault(_AdminStorefrontData);

	var _AdminSystemInfo = __webpack_require__(26);

	var _AdminSystemInfo2 = _interopRequireDefault(_AdminSystemInfo);

	var _AdminVms = __webpack_require__(27);

	var _AdminVms2 = _interopRequireDefault(_AdminVms);

	var _CardVending = __webpack_require__(28);

	var _CardVending2 = _interopRequireDefault(_CardVending);

	var _CashVending = __webpack_require__(29);

	var _CashVending2 = _interopRequireDefault(_CashVending);

	var _ChooseCashCard = __webpack_require__(30);

	var _ChooseCashCard2 = _interopRequireDefault(_ChooseCashCard);

	var _CustomerCreditVending = __webpack_require__(436);

	var _CustomerCreditVending2 = _interopRequireDefault(_CustomerCreditVending);

	var _CustomerLogin = __webpack_require__(31);

	var _CustomerLogin2 = _interopRequireDefault(_CustomerLogin);

	var _CustomerSignup = __webpack_require__(32);

	var _CustomerSignup2 = _interopRequireDefault(_CustomerSignup);

	var _ProductDetail = __webpack_require__(33);

	var _ProductDetail2 = _interopRequireDefault(_ProductDetail);

	var _ShoppingCart = __webpack_require__(34);

	var _ShoppingCart2 = _interopRequireDefault(_ShoppingCart);

	var _Storefront = __webpack_require__(35);

	var _Storefront2 = _interopRequireDefault(_Storefront);

	var _StorefrontStatic = __webpack_require__(36);

	var _StorefrontStatic2 = _interopRequireDefault(_StorefrontStatic);

	var _ThankYouMsg = __webpack_require__(37);

	var _ThankYouMsg2 = _interopRequireDefault(_ThankYouMsg);

	var _TransactionRefund = __webpack_require__(38);

	var _TransactionRefund2 = _interopRequireDefault(_TransactionRefund);

	var _VendError = __webpack_require__(39);

	var _VendError2 = _interopRequireDefault(_VendError);

	var _CategorySearch = __webpack_require__(40);

	var _CategorySearch2 = _interopRequireDefault(_CategorySearch);

	var _ProductSearch = __webpack_require__(41);

	var _ProductSearch2 = _interopRequireDefault(_ProductSearch);

	var _NoMatch = __webpack_require__(4);

	var _NoMatch2 = _interopRequireDefault(_NoMatch);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// store modules


	// admin modules
	exports.default = _react2.default.createElement(
		_reactRouter.Route,
		{ path: '/', component: _App2.default },
		_react2.default.createElement(_reactRouter.Route, { path: 'View0', component: _View2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'View2', component: _View4.default }),
		_react2.default.createElement(
			_reactRouter.Route,
			{ path: 'Admin' },
			_react2.default.createElement(_reactRouter.IndexRoute, { component: _AdminLogin2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Activate', component: _Activate2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'AutoMap', component: _AdminAutoMap2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'BillAcceptor', component: _AdminBillAcceptor2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'CheckFaults', component: _AdminCheckFaults2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'ComponentControl', component: _AdminComponentControl2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Home', component: _AdminHome2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Inventory', component: _AdminInventory2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'JofemarExerciser', component: _AdminJofemarExerciser2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Login', component: _AdminLogin2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'PrintReaderTest', component: _AdminPrintReaderTester2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Settings', component: _AdminSettings2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'StorefrontData', component: _AdminStorefrontData2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'SystemInfo', component: _AdminSystemInfo2.default }),
			_react2.default.createElement(_reactRouter.Route, { path: 'Vms', component: _AdminVms2.default })
		),
		_react2.default.createElement(_reactRouter.Route, { path: 'CustomerSignup', component: _CustomerSignup2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CustomerSignup/:step', component: _CustomerSignup2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CustomerLogin', component: _CustomerLogin2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CustomerLogin/:step', component: _CustomerLogin2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'Storefront', component: _Storefront2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'ProductDetail/:productID', component: _ProductDetail2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'Transaction_Refund', component: _TransactionRefund2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CardVending', component: _CardVending2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CashVending', component: _CashVending2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'ChooseCashCard', component: _ChooseCashCard2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CustomerCreditVending', component: _CustomerCreditVending2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'ShoppingCart', component: _ShoppingCart2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'ThankYouMsg', component: _ThankYouMsg2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'VendError', component: _VendError2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'PageIdle', component: _PageIdle2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'CategorySearch', component: _CategorySearch2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'ProductSearch', component: _ProductSearch2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: '*', component: _NoMatch2.default })
	);

	// deprecated, but still here:

	// idle modules ?

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	//import { Link } from 'react-router'
	//import Helmet from 'react-helmet'
	//import './scss/App.scss'
	//import { isClient } from '../utils'

	var AppLayout = function (_Component) {
		_inherits(AppLayout, _Component);

		function AppLayout() {
			_classCallCheck(this, AppLayout);

			return _possibleConstructorReturn(this, Object.getPrototypeOf(AppLayout).apply(this, arguments));
		}

		_createClass(AppLayout, [{
			key: "render",
			value: function render() {
				return _react2.default.createElement(
					"html",
					null,
					_react2.default.createElement(
						"head",
						null,
						_react2.default.createElement("meta", { httpEquiv: "Content-Type", content: "text/html; charset=UTF-8" }),
						_react2.default.createElement("meta", { name: "viewport", content: "user-scalable=no, initial-scale=1.0, maximum-scale=1.0, width=device-width" }),
						_react2.default.createElement("meta", { httpEquiv: "X-UA-Compatible", content: "IE=edge" }),
						_react2.default.createElement(
							"title",
							null,
							"SDK Vending App GUI"
						),
						_react2.default.createElement("script", { src: "/socket.io/socket.io.js", type: "text/javascript" }),
						_react2.default.createElement("link", { rel: "shortcut icon", href: "/favicon.ico", type: "image/x-icon" }),
						_react2.default.createElement("link", { rel: "stylesheet", type: "text/css", href: "/css/elemental-site.css" }),
						_react2.default.createElement("link", { rel: "stylesheet", type: "text/css", href: "/css/styles.css" }),
						_react2.default.createElement("link", { rel: "stylesheet", type: "text/css", href: "https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.3.15/slick.css" })
					),
					_react2.default.createElement(
						"body",
						null,
						_react2.default.createElement("div", { id: "backgroundImage" }),
						_react2.default.createElement(
							"div",
							{ id: "body", className: "row column clearfix" },
							_react2.default.createElement("div", { id: "root", className: "clearfix", dangerouslySetInnerHTML: { __html: this.props.app_render } })
						),
						_react2.default.createElement("script", { src: "/assets/CLIENT.js" })
					)
				);
			}
		}]);

		return AppLayout;
	}(_react.Component);

	module.exports = AppLayout;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NoMatch = function (_Component) {
		_inherits(NoMatch, _Component);

		function NoMatch() {
			_classCallCheck(this, NoMatch);

			return _possibleConstructorReturn(this, Object.getPrototypeOf(NoMatch).apply(this, arguments));
		}

		_createClass(NoMatch, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'h1',
						null,
						'Sorry! Page or module was not found.'
					)
				);
			}
		}]);

		return NoMatch;
	}(_react.Component);

	exports.default = NoMatch;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isClient = undefined;
	exports.getPropsFromRoute = getPropsFromRoute;
	exports._encodeURIComponent = _encodeURIComponent;
	exports.cleanString = cleanString;
	exports.moneyformat = moneyformat;
	exports.uniq = uniq;
	exports.forceBoolean = forceBoolean;
	exports.timer = timer;
	exports.intersect = intersect;

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('UtilsIndex');

	function getPropsFromRoute(_ref, componentProps) {
	  var routes = _ref.routes;

	  var props = {};
	  var lastRoute = routes[routes.length - 1];

	  routes.reduceRight(function (prevRoute, currRoute) {

	    componentProps.forEach(function (componentProp) {
	      if (!props[componentProp] && currRoute.component[componentProp]) {
	        props[componentProp] = currRoute.component[componentProp];
	      }
	    });
	  }, lastRoute);

	  return props;
	}

	function _encodeURIComponent(str) {
	  str = encodeURIComponent(str);
	  str = str.replace('(', '%28');
	  str = str.replace(')', '%29');
	  str = str.replace('|', '%7C');
	  return str;
	}

	var isClient = exports.isClient = typeof document !== 'undefined';

	/**
	 * Returns a "clean" string for use in web-url-friendly tokens
	 * <br />(essentially just a limited alphachar filter)
	 * @function cleanString
	 * @param {string} - (or ARRAY_OF_STRINGS)
	 * @returns {string} - "clean" string
	 */
	function cleanString(str, nodash) {

	  nodash = nodash || false;

	  if (str instanceof Array) {
	    str.forEach(function (T, idx) {
	      str[idx] = this.cleanString(T, nodash);
	    }.bind(this));

	    return str;
	  } else {

	    // Remove spaces
	    var clean = str.trim().replace(/\s/g, '_');

	    if (nodash) {
	      // Restrict to alphanumeric, underscore
	      clean = clean.replace(/[^A-Za-z0-9_]/g, '');
	    } else {
	      // Restrict to alphanumeric, underscore, dash
	      clean = clean.replace(/[^A-Za-z0-9_\-]/g, '');
	    }

	    return clean;
	  }
	}

	/**
	 * moneyformat(amount, n, x, s, c)
	 * 
	 * @param number  amount to format
	 * @param integer n: length of decimal
	 * @param mixed   s: sections delimiter
	 * @param mixed   c: decimal delimiter
	 * @param integer x: length of whole part
	 *
	 * borrowed from: http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript
	 */
	function moneyformat(amount, n, s, c, x) {
	  var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
	      num = amount.toFixed(Math.max(0, ~ ~n));

	  return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
	};

	/**
	 * Generate unique guid ID
	 * @function uniq
	 * @returns {string} uniq gui-ish ID
	 */
	function uniq() {
	  var uniq = Math.random() + '',
	      ts = new Date().getTime();
	  uniq = uniq.split('.');
	  uniq = uniq[uniq.length - 1];
	  uniq = uniq.substr(0, 5);
	  return uniq;
	}

	/**
	 * takes inbound string or whatever and returns a boolean. true/TRUE is true, everything else is false
	 * @function forceBoolean
	 * @returns {boolean}
	 */
	function forceBoolean(bool) {
	  if (typeof bool === 'string') {
	    switch (bool) {
	      case 'true':
	      case 'TRUE':
	      case 1:
	      case '1':
	        bool = true;
	        break;
	      default:
	        bool = false;
	        break;
	    }
	  }
	  return bool;
	}

	/**
	 * wrapper for setTimeout to have a way to see how much time is left
	 * call: var myTimer = new Timer(cb, 1000);
	 * @function callback - callback function to run at end of timer
	 * @number delay - ms of delay
	 * @returns {boolean}
	 */
	function timer(callback, delay) {
	  var id,
	      started,
	      remaining = delay,
	      running,
	      selfReference,
	      done = false;

	  if (typeof callback !== 'function') {
	    Big.throw('timer needs a callback!');
	  }

	  //Big.log('someone made a new timer.... delay='+delay+', remaining='+remaining);

	  // wrap the callback and attempt to destroy self (memory leak worry):
	  function _callback() {
	    // only callback once
	    if (!done) {
	      running = false;
	      done = true;
	      clearTimeout(id);
	      id = null;
	      if (selfReference) {
	        selfReference = null;
	      }
	      //Big.error("\n\ncalling back from new timer func... remaining: "+remaining+"\n\n");
	      callback();
	    }
	  }

	  this.start = function () {
	    if (remaining > 0) {
	      //Big.log('start timer.... delay='+delay+', remaining='+remaining + ', ('+!!(remaining)+'), '+(typeof remaining));
	      running = true;
	      started = new Date();
	      //id = setTimeout(callback, remaining);
	      id = setTimeout(_callback, remaining);
	    } else {
	      _callback();
	    }
	  };

	  // function to try and allow passing in of created reference for destruction (see _callback() above)
	  this.self = function (self) {
	    if (self) {
	      selfReference = self;
	    }
	  };

	  this.pause = function () {
	    running = false;
	    clearTimeout(id);
	    remaining -= new Date() - started;
	  };

	  this.getDelay = function () {
	    return delay;
	  };

	  this.getTimeLeft = function () {
	    //Big.warn("\n\ncalling back from new timer func > getTimeLeft...\n\n");
	    if (running) {
	      this.pause();
	      this.start();
	    }
	    return remaining;
	  };

	  this.getStateRunning = function () {
	    return running;
	  };

	  // semantic aliases:
	  this.stop = this.pause;
	  this.play = this.start;

	  this.start();
	}

	/*
	function intersect(a, b) {
	    var t;
	    if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter
		return a
			.filter(function(e) { return (b.indexOf(e) !== -1) }) // same as before
			.filter(function (e, i, c) { // extra step to remove duplicates
				return c.indexOf(e) === i;
			});
	}
	*/
	/**
	 * computes intersect of two arrays
	 * @array a - array to intersect
	 * @array b - array to intersect
	 * @returns {array} - intersect of a and b
	 */
	function intersect(a, b) {
	  var t;if (b.length > a.length) t = b, b = a, a = t;return a.filter(function (e) {
	    return b.indexOf(e) !== -1;
	  }).filter(function (e, i, c) {
	    return c.indexOf(e) === i;
	  });
	}

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(43);


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(42);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(45);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* components */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Router2 = __webpack_require__(46);

	var _Router3 = _interopRequireDefault(_Router2);

	exports.Router = _Router3['default'];

	var _Link2 = __webpack_require__(47);

	var _Link3 = _interopRequireDefault(_Link2);

	exports.Link = _Link3['default'];

	var _IndexLink2 = __webpack_require__(48);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	exports.IndexLink = _IndexLink3['default'];

	/* components (configuration) */

	var _IndexRedirect2 = __webpack_require__(49);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	exports.IndexRedirect = _IndexRedirect3['default'];

	var _IndexRoute2 = __webpack_require__(50);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	exports.IndexRoute = _IndexRoute3['default'];

	var _Redirect2 = __webpack_require__(51);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	exports.Redirect = _Redirect3['default'];

	var _Route2 = __webpack_require__(52);

	var _Route3 = _interopRequireDefault(_Route2);

	exports.Route = _Route3['default'];

	/* mixins */

	var _History2 = __webpack_require__(53);

	var _History3 = _interopRequireDefault(_History2);

	exports.History = _History3['default'];

	var _Lifecycle2 = __webpack_require__(54);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	exports.Lifecycle = _Lifecycle3['default'];

	var _RouteContext2 = __webpack_require__(55);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	exports.RouteContext = _RouteContext3['default'];

	/* utils */

	var _useRoutes2 = __webpack_require__(56);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	exports.useRoutes = _useRoutes3['default'];

	var _RouteUtils = __webpack_require__(57);

	exports.createRoutes = _RouteUtils.createRoutes;

	var _RouterContext2 = __webpack_require__(58);

	var _RouterContext3 = _interopRequireDefault(_RouterContext2);

	exports.RouterContext = _RouterContext3['default'];

	var _RoutingContext2 = __webpack_require__(59);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	exports.RoutingContext = _RoutingContext3['default'];

	var _PropTypes2 = __webpack_require__(60);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	exports.PropTypes = _PropTypes3['default'];

	var _match2 = __webpack_require__(61);

	var _match3 = _interopRequireDefault(_match2);

	exports.match = _match3['default'];

	var _useRouterHistory2 = __webpack_require__(62);

	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);

	exports.useRouterHistory = _useRouterHistory3['default'];

	var _PatternUtils = __webpack_require__(63);

	exports.formatPattern = _PatternUtils.formatPattern;

	/* histories */

	var _browserHistory2 = __webpack_require__(64);

	var _browserHistory3 = _interopRequireDefault(_browserHistory2);

	exports.browserHistory = _browserHistory3['default'];

	var _hashHistory2 = __webpack_require__(65);

	var _hashHistory3 = _interopRequireDefault(_hashHistory2);

	exports.hashHistory = _hashHistory3['default'];

	var _createMemoryHistory2 = __webpack_require__(66);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	exports.createMemoryHistory = _createMemoryHistory3['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(9);

	var _utils = __webpack_require__(5);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _ComEmulator = __webpack_require__(70);

	var _ComEmulator2 = _interopRequireDefault(_ComEmulator);

	var _MachineIdTag = __webpack_require__(71);

	var _MachineIdTag2 = _interopRequireDefault(_MachineIdTag);

	var _CustomerStatusDisplay = __webpack_require__(72);

	var _CustomerStatusDisplay2 = _interopRequireDefault(_CustomerStatusDisplay);

	var _AdminLoginButton = __webpack_require__(73);

	var _AdminLoginButton2 = _interopRequireDefault(_AdminLoginButton);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import './scss/App.scss'

	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('App');

	var App = function (_Component) {
		_inherits(App, _Component);

		function App(props, context) {
			_classCallCheck(this, App);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(App).call(this, props, context));

			_this.appTesting = true;

			Big.log('App Top');

			(0, _TsvUtils.init)();
			(0, _TsvUtils.registerKF)();

			_StorefrontActions2.default.loadStorefrontData();

			_TsvActions2.default.apiCall('fetchAllMachineSettings', function (err, data) {
				if (err) Big.throw(err);

				if (!data) {
					Big.error('fetchAllMachineSettings: no data returned');
					return;
				}

				if (!data.currencyFilter) {
					data.currencyFilter = 'currency';
				}

				_TsvSettingsStore2.default.setCache('machineSettings', data);

				if (data.MachineCount && data.MachineCount > 1) {
					_TsvSettingsStore2.default.setConfig('bDualMachine', true);
				}
			});

			_TsvActions2.default.apiCall('fetchAllCustomSettings', function (err, data) {
				if (err) Big.throw(err);

				if (!data) {
					Big.error('fetchAllCustomSettings: no data returned');
					return;
				}

				var multipleLangs = data.languageSupported && data.languageSupported.split(";").length > 1,
				    LANG = data.languageDefaulted || 'En';

				// this skips the 0-9 keypad coil view:
				data.txtSearchScene = 'category_search';

				_TsvSettingsStore2.default.setCache('custommachinesettings', data);
				_TsvSettingsStore2.default.setConfig({
					supportLanguages: data.languageSupported || 'En',
					bDualLanguage: multipleLangs,
					bShowLanguageFlag: multipleLangs,
					bDisplayCgryNavigation2: data.bDisplayCgryNavigation || false,
					selectedLanguage: LANG
				});
				Translate.selectLanguage(LANG);
			});

			_TsvActions2.default.apiCall('fetchMachineIds', function (err, data) {
				if (err) Big.throw(err);

				if (!data) {
					Big.error('fetchMachineIds: no data returned');
					return;
				}

				_TsvSettingsStore2.default.setCache('machineList', data);
			});

			//TsvSettingsStore.setConfig('cgryNavTitle', Translate.translate('CategorySearch', 'NavTitle'));

			(0, _TsvUtils.updateCredit)();

			_this._onTsvChange = _this._onTsvChange.bind(_this);

			return _this;
		}

		_createClass(App, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				_TsvStore2.default.addChangeListener(this._onTsvChange);
				if (!_TsvStore2.default.getMachineInfo()) {
					_TsvActions2.default.getMachineInfo();
				}
				//TsvService.subscribe("notifyTSVReady", function, "app");
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvChange);
			}
		}, {
			key: '_onTsvChange',
			value: function _onTsvChange(event) {
				if (event && event.method === 'notifyTSVReady') {
					Big.log("Got event notifyTSVReady, what is our current location? " + _TsvSettingsStore2.default.getCache('currentLocation'));
					if (_TsvSettingsStore2.default.getCache('currentLocation') === '/View0') {
						Big.log("Redirect to default idle page or reload");

						if (!_TsvSettingsStore2.default.getCache('custommachinesettings')) {
							//TsvService.reloadPage();
							window.location.reload();
						} else {
							(0, _TsvUtils.registerKF)();
							(0, _TsvUtils.gotoDefaultIdlePage)();
						}
					}
				}
			}
		}, {
			key: 'logoClicked',
			value: function logoClicked(e) {
				e.preventDefault();
				(0, _TsvUtils.gotoDefaultIdlePage)();
			}
		}, {
			key: 'render',
			value: function render() {
				var adminInPath = /^\/Admin/.test(this.props.location.pathname);
				return _react2.default.createElement(
					'div',
					null,
					!adminInPath ? _react2.default.createElement(_AdminLoginButton2.default, { testing: this.appTesting }) : null,
					_react2.default.createElement(_CustomerStatusDisplay2.default, { adminInPath: adminInPath, location: this.props.location }),
					_react2.default.createElement(_ComEmulator2.default, null),
					_react2.default.createElement(_MachineIdTag2.default, null),
					_react2.default.createElement(
						_E.Row,
						{ gutter: -20 },
						_react2.default.createElement(
							_E.Col,
							{ className: 'route-content' },
							this.props.children && _react2.default.cloneElement(this.props.children, { appTesting: this.appTesting }) || _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(_E.Button, { component: _react2.default.createElement(
										_reactRouter.Link,
										{ to: '/Storefront' },
										'Storefront'
									) })
							)
						)
					)
				);
			}
		}]);

		return App;
	}(_react.Component);

	exports.default = App;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('View0');

	var View0 = function (_Component) {
		_inherits(View0, _Component);

		function View0(props, context) {
			_classCallCheck(this, View0);

			//TsvSettingsStore.setSession('currentView', 'View0');
			//TsvSettingsStore.setCache('currentLocation', '/View0');

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(View0).call(this, props, context));
			// MUST call super() before any this.*


			(0, _TsvUtils.startGeneralIdleTimer)();
			Big.error('<<<<        FIXME: need to attach events to click and mouseover globally to start/resetGeneralIdleTimer()        >>>>');
			return _this;
		}

		_createClass(View0, [{
			key: 'admin',
			value: function admin() {
				// skipped admin because we skipped it else where
			}
		}, {
			key: 'componentDidMount',


			// Add change listeners to stores
			value: function componentDidMount() {
				_TsvStore2.default.addChangeListener(this._onTsvChange);
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvChange);
			}
		}, {
			key: '_onTsvChange',
			value: function _onTsvChange(event) {
				if (event && event.method) {
					switch (event.method) {
						case 'noEvent':
							(0, _TsvUtils.gotoDefaultIdlePage)();
							break;

						case 'linkDown':
							_reactRouter.browserHistory.push('/View0');
							break;
					}
				}
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_E.Row,
					{ className: 'View0' },
					_react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h2',
							null,
							Translate.translate('View0', 'Resetting'),
							_react2.default.createElement('br', null),
							Translate.translate('View0', 'PleaseWait')
						)
					)
				);
			}
		}]);

		return View0;
	}(_react.Component);

	exports.default = View0;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvUtils = __webpack_require__(67);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('View2');

	var View2 = function (_Component) {
	    _inherits(View2, _Component);

	    function View2(props, context) {
	        _classCallCheck(this, View2);

	        //TsvSettingsStore.setSession('currentView', 'View2');
	        //TsvSettingsStore.setCache('currentLocation', '/View2');

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(View2).call(this, props, context));
	        // MUST call super() before any this.*


	        _TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CREDIT_CARD");
	        _TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");
	        _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, cart) {
	            if (err) Big.throw(err);
	            _TsvSettingsStore2.default.setCache('shoppingCart', cart);
	        });

	        (0, _TsvUtils.updateCredit)();
	        var item = _TsvSettingsStore2.default.getConfig('pvr');

	        // moved up here, closer to the actual declaration
	        //if (!TsvSettingsStore.getConfig('pvr')) {
	        if (!item) {
	            var _ret;

	            return _ret = (0, _TsvUtils.gotoDefaultIdlePage)(), _possibleConstructorReturn(_this, _ret);
	            //return;
	        }

	        _this.state = {
	            item: item,
	            path: _TsvSettingsStore2.default.getCache('currentLocation'),
	            bShowCouponBtn: false,
	            imagePath: item.imagePath,
	            imagePath2: item.imagePath, // yes, same var being set in two locations. meh
	            summary: _TsvSettingsStore2.default.getCache('shoppingCart.summary'),
	            nutritionFactsUrl: "",
	            bShowNutritionFactsBtn: false,
	            bShowCalories: false,
	            calories: "0 Cal",
	            bShowDesc: false,
	            productName: item.productName, //default
	            productDescription: item.description,
	            bDisplayNavCgry: true

	        };

	        if (_this.item.description == "") {
	            _this.state.bShowDesc = false;
	        }

	        if (_TsvSettingsStore2.default.getCache('custommachinesettings.bDisplayPrdGalleryOnDetailPage')) {
	            _this.state.bDisplayPrdGalleryOnDetailPage = true;
	        }

	        if (_TsvSettingsStore2.default.getCache('custommachinesettings.bHasShoppingCart')) {
	            _this.state.checkoutOrAddToCartUrl = Translate.localizedImage('addToCart.png');
	        } else {
	            _this.state.checkoutOrAddToCartUrl = Translate.localizedImage('checkout.png');
	            if (_TsvSettingsStore2.default.getCache('custommachinesettings.bHasCouponCodes')) {
	                _this.state.bShowCouponBtn = true;
	            }
	        }

	        if (_this.state.item.Attributes && _this.state.item.Attributes.AltLangImageGroup != null) {
	            for (var i = 0; i < _this.state.item.Attributes.AltLangImageGroup.length; i++) {
	                if (_this.state.item.Attributes.AltLangImageGroup[i].toLowerCase().indexOf(_TsvSettingsStore2.default.getCache('selectLanguage').toLowerCase()) > -1) {
	                    _this.state.imagePath = "../Images/Products/ " + _this.state.item.productID + " " + _this.state.item.Attributes.AltLangImageGroup[i];
	                    _this.state.imagePath2 = _this.state.imagePath;
	                    break;
	                }
	            }
	        }

	        return _this;
	    }

	    _createClass(View2, [{
	        key: 'back',
	        value: function back() {
	            if (_TsvSettingsStore2.default.getCache('custommachinesettings.bHasShoppingCart')) {
	                (0, _TsvUtils.emptyCart)();
	                _TsvSettingsStore2.default.setConfig('itemsInCart', 0);
	            }
	            (0, _TsvUtils.gotoDefaultIdlePage)();
	        }
	    }, {
	        key: 'cardTransactionHandler',
	        value: function cardTransactionHandler(level) {

	            // call to close any open fancybox's in the interface, we don't have fancyboxes so ok to comment out.
	            /*what? $.fancybox.close();*/

	            if (_TsvSettingsStore2.default.getCache('currentLocation') != _TsvSettingsStore2.default.getCache('currentLocation')) {
	                Big.log("Path doesn't match. Not for View2, ignoring");
	                return;
	            }

	            (0, _TsvUtils.cardTransaction)(event.data[0]);

	            if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
	                switch (level) {
	                    case "CARD_INVALID_READ":
	                    case "CARD_DECLINED":
	                    case "CARD_CONNECTION_FAILURE":
	                    case "CARD_UNKNOWN_ERROR":
	                        //Do nothing, don't go to card_vending page
	                        break;
	                    default:
	                        /*
	                        // no longer using "currentLocation" global...
	                                    if(TsvSettingsStore.getCache('currentLocation') != "/CardVending"){
	                                        browserHistory.push("/CardVending");
	                                    }
	                                    */
	                        break;
	                }
	            } else {
	                Big.log("Ignoring credit card event, from View2, vend is in progress?");
	            }
	        }

	        // Add change listeners to stores

	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            _TsvStore2.default.addChangeListener(this._onTsvChange);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            _TsvStore2.default.removeChangeListener(this._onTsvChange);
	        }
	    }, {
	        key: '_onTsvChange',
	        value: function _onTsvChange(event) {
	            if (event && event.method === 'cardTransactionResponse') {
	                var level = event.data[0];
	                (0, _TsvUtils.cardTransaction)(level);
	                if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
	                    switch (level) {
	                        case "CARD_INVALID_READ":
	                        case "CARD_DECLINED":
	                        case "CARD_CONNECTION_FAILURE":
	                        case "CARD_UNKNOWN_ERROR":
	                            //Do nothing, don't go to card_vending page
	                            break;

	                        default:
	                            /*
	                            // no longer using "currentLocation" global...
	                            if(TsvSettingsStore.getCache('currentLocation') != "/CardVending"){
	                             browserHistory.push("/CardVending");
	                            }
	                            */
	                            break;
	                    }
	                } else {
	                    Big.log("Ignoring credit card event, from View2, vend is in progress?");
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _E.Row,
	                { className: 'prdDetail' },
	                _react2.default.createElement(
	                    'h3',
	                    null,
	                    'Dev warning: this may be a broken component, old code had disconnections in it'
	                ),
	                _react2.default.createElement(
	                    _E.Col,
	                    null,
	                    _react2.default.createElement('img', { className: 'regularBtn', id: 'backImg', src: Translate.localizedImage('back.png'), onClick: this.back }),
	                    this.state.bShowCheckout ? this.renderShowCheckout() : null,
	                    this.state.bShowCouponBtn ? this.renderCouponButton() : null,
	                    _react2.default.createElement(
	                        _E.Row,
	                        { id: 'View2Title' },
	                        _react2.default.createElement(
	                            'h1',
	                            null,
	                            Translate.translate('View2', 'instructionMessage')
	                        ),
	                        ' '
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        { id: 'prdWrapper' },
	                        _react2.default.createElement(
	                            _E.Row,
	                            { className: 'detail' },
	                            _react2.default.createElement(
	                                _E.Col,
	                                { lg: '50%', className: 'detail' },
	                                _react2.default.createElement('img', { id: 'prdDetailImage', src: this.state.imagePath })
	                            ),
	                            _react2.default.createElement(
	                                _E.Col,
	                                { lg: '50%', className: 'detail' },
	                                _react2.default.createElement(
	                                    _E.Row,
	                                    { className: 'detail' },
	                                    _react2.default.createElement(
	                                        'p',
	                                        null,
	                                        (0, _TsvUtils.currencyFilter)(this.state.item.price)
	                                    )
	                                )
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'p',
	                        { id: 'prdName' },
	                        this.productName
	                    ),
	                    this.bDisplayPrdGalleryOnDetailPage ? this.renderPrdGalleryOnDetailPage() : null
	                )
	            );
	        }
	    }, {
	        key: 'renderPrdGalleryOnDetailPage',
	        value: function renderPrdGalleryOnDetailPage() {
	            var _this2 = this;

	            return _react2.default.createElement(
	                _E.Row,
	                { className: 'navGallery' },
	                _react2.default.createElement(
	                    'p',
	                    { id: 'navCgryTitle' },
	                    { navCgryTitle: navCgryTitle }
	                ),
	                _react2.default.createElement(
	                    _E.Row,
	                    { className: 'flex-container' },
	                    this.state.products.map(function (product, $index) {
	                        return _react2.default.createElement(
	                            _E.Col,
	                            { key: $index, className: 'flex-item' + (_this2.isActive($index) ? ' active' : '') },
	                            _react2.default.createElement(
	                                'figure',
	                                { id: "prdImg" + $index, onClick: _this2.setPrdSelected.bind(_this2, product) },
	                                _react2.default.createElement(
	                                    'figcaption',
	                                    null,
	                                    product.productName
	                                ),
	                                _react2.default.createElement('img', { src: product.imagePath, alt: product.description, title: product.description }),
	                                _react2.default.createElement(
	                                    'p',
	                                    { className: 'prdPrice' },
	                                    ' ',
	                                    (0, _TsvUtils.currencyFilter)(product.price)
	                                )
	                            )
	                        );
	                    })
	                )
	            );
	        }
	    }, {
	        key: 'renderCouponButton',
	        value: function renderCouponButton() {
	            return _react2.default.createElement('img', { className: 'regularBtn', id: 'couponImg', src: Translate.localizedImage('coupon.png'), onClick: this.coupon, alt: 'Coupon' });
	        }
	    }, {
	        key: 'renderShowCheckout',
	        value: function renderShowCheckout() {
	            return _react2.default.createElement('img', { className: 'regularBtn', id: 'checkoutImg', src: this.checkoutOrAddToCartUrl, onClick: this.checkout });
	        }
	    }]);

	    return View2;
	}(_react.Component);

	exports.default = View2;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var PageIdle = function (_Component) {
	  _inherits(PageIdle, _Component);

	  function PageIdle(props, context) {
	    _classCallCheck(this, PageIdle);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PageIdle).call(this, props, context));
	    // MUST call super() before any this.*


	    _TsvSettingsStore2.default.setConfig({
	      bDisplayCgryNavigation: false,
	      bShowCredit: _TsvSettingsStore2.default.getCache('credit') && true
	    });

	    // this might be as simple as TsvSettingsStore.setConfig('bAbleToLogin', false)
	    _TsvActions2.default.apiCall('disableLoginDevices');

	    var binders = ['idleClicked'];
	    binders.forEach(function (B) {
	      if (_this[B]) {
	        _this[B] = _this[B].bind(_this);
	      }
	    });
	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(PageIdle, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {}

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'PageIdle', onClick: this.active },
	        _react2.default.createElement(
	          'h1',
	          { style: { textAlign: 'center' } },
	          'Touch',
	          _react2.default.createElement('br', null),
	          'anywhere',
	          _react2.default.createElement('br', null),
	          'to',
	          _react2.default.createElement('br', null),
	          'shop....'
	        )
	      );
	    }
	  }, {
	    key: 'active',
	    value: function active(e) {
	      e.preventDefault();
	      (0, _TsvUtils.idleClicked)();
	    }
	  }]);

	  return PageIdle;
	}(_react.Component);

	exports.default = PageIdle;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Activate = function (_Component) {
	  _inherits(Activate, _Component);

	  function Activate(props, context) {
	    _classCallCheck(this, Activate);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Activate).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      activationKey: '',
	      //serialNumber: TsvSettingsStore.getCache('machineSettings.MachineSerialNumber'),
	      machineSettings: _TsvSettingsStore2.default.getCache('machineSettings')
	    };

	    return _this;
	  }

	  /*
	      "Activate": {
	          "CallToActivate1": "Call AVT, Inc",
	          "CallToActivate2": "1-877-424-3663",
	          "CallToActivate3": "For Your Activation Code",
	          "WrongActivationCode": "Wrong Code!",
	          "ActivationKey": "Activation Key"
	      },
	  */

	  _createClass(Activate, [{
	    key: 'save',
	    value: function save(e) {
	      var _this2 = this;

	      e.preventDefault();
	      _TsvActions2.default.apiCall('activate', this.state.activationKey, function (err, data) {
	        if (data.resultCode === 'SUCCESS') {
	          _reactRouter.browserHistory.push('/Admin/Login');
	        } else {
	          _this2.setState({
	            apiResponse: data.result || 'Wrong activation key, please contact your SDK rep for more information'
	          });
	        }
	      });
	    }
	  }, {
	    key: 'textChange',
	    value: function textChange(e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      this.setState({
	        activationKey: e.target.value
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      /*
	      // not sure what the inbound response would be, also we're capturing it explicitly above anyway...
	      // this is here "just in case"
	      if (event && event.method === 'FooSomeMessage') {
	      }
	      */
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'Activate', style: { maxWidth: '50%', margin: '0 auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%' },
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300, marginTop: '1em', textAlign: 'center' } },
	            'Activate',
	            _react2.default.createElement('br', null),
	            'this machine'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%', style: { textAlign: 'center' } },
	          _react2.default.createElement(
	            _E.Form,
	            null,
	            _react2.default.createElement(
	              'h2',
	              { style: { fontWeight: 300, textAlign: 'center' } },
	              'Enter Activation Key:'
	            ),
	            _react2.default.createElement(_E.FormInput, { value: this.state.activationKey || this.state.machineSettings.ActivationKey, _vkenabled: 'true', name: 'activationKey', onChange: this.textChange.bind(this) })
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%', style: { textAlign: 'center' } },
	          _react2.default.createElement(
	            'p',
	            null,
	            _react2.default.createElement(
	              _E.Button,
	              { size: 'lg', type: 'primary', onClick: this.save.bind(this) },
	              'Activate this machine'
	            )
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            ' '
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            'Machine serial number:',
	            _react2.default.createElement('br', null),
	            _react2.default.createElement(
	              'strong',
	              null,
	              this.state.machineSettings.MachineSerialNumber || 'none found'
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%', style: { textAlign: 'center' } },
	          _react2.default.createElement(
	            'p',
	            null,
	            this.state.apiResponse
	          )
	        )
	      );
	    }
	  }]);

	  return Activate;
	}(_react.Component);

	exports.default = Activate;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminAutoMap');

	var AdminAutoMap = function (_Component) {
	  _inherits(AdminAutoMap, _Component);

	  function AdminAutoMap(props, context) {
	    _classCallCheck(this, AdminAutoMap);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminAutoMap).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      bShowMachine2: false,
	      status: "Idle",
	      coilMap: []
	    };

	    if (_TsvSettingsStore2.default.getCache('machineList').length > 1) {
	      _this.state.bShowMachine2 = true;
	    }
	    _this._onTsvChange = _this._onTsvChange.bind(_this);
	    return _this;
	  }

	  _createClass(AdminAutoMap, [{
	    key: 'backToAdminHome',
	    value: function backToAdminHome() {
	      _reactRouter.browserHistory.push("/Admin/Home");
	    }
	  }, {
	    key: 'mapMachine',
	    value: function mapMachine(machineID) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (!_TsvSettingsStore2.default.getSession('bRunningAutoMap')) {
	        _TsvSettingsStore2.default.setSession('bRunningAutoMap', true);
	        _TsvActions2.default.apiCall('runAutoMap', machineID, -1);
	        this.setState({
	          status: 'Starting AutoMap',
	          coilMap: [],
	          slots: [],
	          lastSlot: null
	        });
	      }
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	      _TsvSettingsStore2.default.setSession('bRunningAutoMap', false);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	      _TsvSettingsStore2.default.setSession('bRunningAutoMap', false);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (event && event.method === 'notifyMapStatusChange') {

	        var status = event.data[0];
	        var info = event.data[1];

	        var state = {
	          status: status
	        };

	        switch (status) {
	          case "Map":
	            if (info && info.coilNumber) {
	              var coilMap = this.state.coilMap || [];
	              var slots = this.state.slots || [];
	              Big.warn('ok wtf is coilMap? ' + (typeof coilMap === 'undefined' ? 'undefined' : _typeof(coilMap)));
	              Big.log(coilMap);
	              if (coilMap.indexOf(info.coilNumber) === -1) {
	                coilMap.push(info.coilNumber);
	                state.coilMap = coilMap;
	                slots.push(info);
	                state.slots = slots;
	                state.lastSlot = info;
	              }
	            }
	            break;

	          case "End":
	            _TsvSettingsStore2.default.setSession('bRunningAutoMap', false);
	            Big.warn('ok, should be pushing this coil map back out to the API!');
	            Big.log(this.state.coilMap);
	            break;

	          default:
	            break;
	        }
	        this.setState(state);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'automap', style: { maxWidth: '50%', margin: '1em auto' } },
	        _react2.default.createElement(
	          'h1',
	          { style: { fontWeight: 300 } },
	          'Auto Map'
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              { md: '33%', lg: '33%' },
	              _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	                  _reactRouter.Link,
	                  { to: '/Admin/Home' },
	                  Translate.translate('AdminHome', 'Home')
	                ) })
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { md: '33%', lg: '33%' },
	              _react2.default.createElement(
	                _E.Button,
	                { size: 'lg', id: 'machine0', onClick: this.mapMachine.bind(this, 0) },
	                Translate.translate('AutoMap', 'Map1')
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { md: '33%', lg: '33%' },
	              this.state.bShowMachine2 ? this.renderShowMachine2() : null
	            )
	          ),
	          _react2.default.createElement(
	            'h2',
	            null,
	            'Map status: ',
	            this.state.status
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            { id: 'wrapper' },
	            this.renderMap()
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderMap',
	    value: function renderMap() {

	      if (this.state.status == 'End') {
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            this.renderMapRows()
	          ),
	          _react2.default.createElement(
	            'p',
	            { style: { marginTop: '3em', clear: 'both' } },
	            'Slots:'
	          ),
	          _react2.default.createElement(
	            'pre',
	            null,
	            JSON.stringify(this.state.slots, null, 4)
	          )
	        );
	      } else if (this.state.status) {
	        var rnd = parseInt(Math.random() * 10),
	            dots = '';
	        for (var i = 1; i < rnd; i += 1) {
	          dots += '.';
	        }
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'h3',
	            null,
	            'Mapping in progress',
	            dots
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            'Last status: ',
	            this.state.status
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            this.renderMapRows()
	          )
	        );
	      } else {
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'h3',
	            null,
	            'Mapping Process Idle'
	          )
	        );
	      }
	    }
	  }, {
	    key: 'renderMapRows',
	    value: function renderMapRows() {
	      var mapRows = this.parseGrid(this.state.coilMap);
	      if (!mapRows || !mapRows.length) {
	        return _react2.default.createElement(
	          'p',
	          null,
	          _react2.default.createElement(
	            'em',
	            null,
	            'No map rows found'
	          )
	        );
	      }
	      var rows = mapRows.map(function (row, $index) {
	        var width = 100 / row.length;
	        var col = row.map(function (slot, $index) {
	          return _react2.default.createElement(
	            _E.Col,
	            { key: $index, md: width + "%", lg: width + "%" },
	            _react2.default.createElement(
	              'div',
	              { style: { width: '100%', borderRadius: '4px', border: '2px solid black', margin: '1em', padding: '0.5em', textAlign: 'center' } },
	              slot
	            )
	          );
	        });
	        return col;
	      });
	      return rows;
	    }

	    // borrowed from ClientPortal/PlanogramBuilder:
	  }, {
	    key: 'parseGrid',
	    value: function parseGrid(coilMap) {
	      var slots = coilMap;
	      var rows = [];
	      slots.map(function (NODE) {
	        var thisRow = parseInt(NODE / 10),
	            thisCol = NODE % 10 // not sure if we need this
	        ;
	        if (!rows[thisRow]) {
	          rows[thisRow] = [];
	        }
	        rows[thisRow].push(NODE);
	      });
	      return rows;
	      /*
	      var state = this.state;
	      state.slots = slots;
	      state.rows = rows;
	      state.pSlotConfig = data;
	      state.planogram.planogramSlotConfiguration = data._id;
	      this.setState(state);
	      */
	    }
	  }, {
	    key: 'renderShowMachine2',
	    value: function renderShowMachine2() {
	      return _react2.default.createElement(
	        _E.Col,
	        { basis: '1/2' },
	        _react2.default.createElement(
	          _E.Button,
	          { size: 'lg', id: 'machine1', onClick: this.mapMachine.bind(this, 1) },
	          Translate.translate('AutoMap', 'Map2')
	        )
	      );
	    }
	  }]);

	  return AdminAutoMap;
	}(_react.Component);

	exports.default = AdminAutoMap;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var AdminBillAcceptor = function (_Component) {
	  _inherits(AdminBillAcceptor, _Component);

	  function AdminBillAcceptor(props, context) {
	    _classCallCheck(this, AdminBillAcceptor);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminBillAcceptor).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      acceptorState: 'off',
	      amtInserted: '0.00',
	      totalInsertedCents: '0.00',
	      hasBillAcceptor: _this.billSetting(_TsvSettingsStore2.default.getCache('custommachinesettings.HasBillCoin'))
	    };

	    _this._onTsvChange = _this._onTsvChange.bind(_this);

	    return _this;
	  }

	  _createClass(AdminBillAcceptor, [{
	    key: 'billSetting',
	    value: function billSetting(setting) {
	      if (setting == 'true' || setting == true || setting == 1 || setting == "1") {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'billOn',
	    value: function billOn() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");
	      this.setState({
	        acceptorState: 'on'
	      });
	    }
	  }, {
	    key: 'billOff',
	    value: function billOff() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('disablePaymentDevice');
	      this.setState({
	        acceptorState: 'off'
	      });
	    }
	  }, {
	    key: 'billSettingOn',
	    value: function billSettingOn() {
	      var _this2 = this;

	      _TsvActions2.default.apiCall('setCustomMachineSetting', "HasBillCoin", "true", function (err, ok) {
	        if (err) Big.throw(err);
	        _this2.setState({
	          hasBillAcceptor: true
	        });
	      });
	    }
	  }, {
	    key: 'billSettingOff',
	    value: function billSettingOff() {
	      var _this3 = this;

	      _TsvActions2.default.apiCall('setCustomMachineSetting', "HasBillCoin", "false", function (err, ok) {
	        if (err) Big.throw(err);
	        _this3.setState({
	          hasBillAcceptor: false
	        });
	      });
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (event && event.method == 'creditBalanceChanged') {
	        //var status = this.state.vmsStatus;
	        //status.push(eventArgs.eventType + ' (' + eventArgs.exceptionMessage + ')');
	        this.setState({
	          tsvEvent: event,
	          amtInserted: event.data[0].toFixed(2), // this is the bill
	          totalInsertedCents: event.data[1]
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      //curl -X POST -d '["DOOR_OPENED"]' http://localhost:8085/tsv/flashapi
	      var onStyle = this.state.acceptorState == 'on' ? 'success' : 'danger';
	      var offStyle = this.state.acceptorState == 'off' ? 'success' : 'danger';

	      var onSettingStyle = this.state.hasBillAcceptor === true ? 'success' : 'danger';
	      var offSettingStyle = this.state.hasBillAcceptor === false ? 'success' : 'danger';

	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'AdminBillAcceptor', style: { width: '60%', margin: '1em auto', textAlign: 'center' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300 } },
	            'Test Bill Acceptor'
	          ),
	          _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'h2',
	                { style: { fontWeight: 300, textAlign: 'center' } },
	                'Set Bill Acceptor State:'
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: onStyle, size: 'lg', onClick: this.billOn.bind(this) },
	                  'On'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: offStyle, size: 'lg', onClick: this.billOff.bind(this) },
	                  'Off'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'h2',
	                { style: { fontWeight: 300, textAlign: 'center' } },
	                'Set Bill Acceptor Existence:'
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: onSettingStyle, size: 'lg', onClick: this.billSettingOn.bind(this) },
	                  'On'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: offSettingStyle, size: 'lg', onClick: this.billSettingOff.bind(this) },
	                  'Off'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                null,
	                _react2.default.createElement(
	                  'div',
	                  { style: { backgroundColor: '#fff', textAlign: 'center', border: '1px solid #dfdfdf', borderRadius: '4px', margin: '20px auto' } },
	                  _react2.default.createElement(
	                    'h2',
	                    null,
	                    'last event:',
	                    _react2.default.createElement('br', null),
	                    _react2.default.createElement('br', null),
	                    'Inserted: ',
	                    _react2.default.createElement(
	                      'strong',
	                      null,
	                      '$',
	                      this.state.amtInserted
	                    ),
	                    _react2.default.createElement('br', null),
	                    'Total Inserted (cents): ',
	                    _react2.default.createElement(
	                      'strong',
	                      null,
	                      this.state.totalInsertedCents
	                    )
	                  )
	                ),
	                _react2.default.createElement(
	                  'p',
	                  { style: { textAlign: 'center' } },
	                  _react2.default.createElement(
	                    _E.Button,
	                    { size: 'lg', onClick: _TsvUtils.emptyCart },
	                    'Send "empty cart" command to API'
	                  ),
	                  _react2.default.createElement('br', null),
	                  '(this in theory should clear any tracked "total inserted" amount)'
	                )
	              )
	            )
	          ),
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }]);

	  return AdminBillAcceptor;
	}(_react.Component);

	exports.default = AdminBillAcceptor;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var AdminCheckFaults = function (_Component) {
	  _inherits(AdminCheckFaults, _Component);

	  function AdminCheckFaults(props, context) {
	    _classCallCheck(this, AdminCheckFaults);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminCheckFaults).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      bRunningClearFaults: false,
	      machineID: 0
	    };

	    if (_TsvSettingsStore2.default.getCache('machineList').length > 1) {
	      _this.state.bShowDropDownForMachines = true;
	    };

	    _this._onTsvChange = _this._onTsvChange.bind(_this);
	    return _this;
	  }

	  _createClass(AdminCheckFaults, [{
	    key: 'back',
	    value: function back() {
	      _reactRouter.browserHistory.push("/Admin/Home");
	    }
	  }, {
	    key: 'getFaultCodes',
	    value: function getFaultCodes(machine_id) {
	      var _this2 = this;

	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('getFaultCodes', machine_id.toString(), function (err, data) {
	        _this2.setState({
	          faults: data
	        });
	      });
	    }
	  }, {
	    key: 'clearFaults',
	    value: function clearFaults() {
	      if (!this.state.bRunningClearFaults) {
	        this.setState({
	          bRunningClearFaults: true
	        });
	        _TsvSettingsStore2.default.setSession('bRunningClearFaults', true);
	        getFaultCodes(this.state.machineID);
	      }
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvSettingsStore2.default.setSession('bRunningClearFaults', false);
	      this.getFaultCodes(this.state.machineID);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.setSession('bRunningClearFaults', false);
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (event && event.method === 'notifyResetComplete') {
	        var machineID = event.data;

	        this.setState({
	          bRunningClearFaults: false
	        });

	        _TsvSettingsStore2.default.setSession('bRunningClearFaults', false);

	        getFaultCodes(machineID);
	      }
	    }
	  }, {
	    key: 'getMachineSelectOptions',
	    value: function getMachineSelectOptions() {
	      var options = [];
	      _TsvSettingsStore2.default.getCache('machineList').forEach(function (MACHINE) {
	        options.push({ label: 'Machine ' + MACHINE, value: MACHINE });
	      });
	      return options;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'check_faults', style: { maxWidth: '50%', margin: '1em auto' } },
	        _react2.default.createElement(
	          'h1',
	          { style: { fontWeight: 300 } },
	          'Check Faults'
	        ),
	        _TsvSettingsStore2.default.getCache('machineList').length > 1 ? _react2.default.createElement(_E.FormSelect, { name: 'selectMachine', value: this.state.machineID, options: this.getMachineSelectOptions() }) : null,
	        _react2.default.createElement(_E.Button, { type: 'primary', component: _react2.default.createElement(
	            _reactRouter.Link,
	            { to: '/Admin/Home' },
	            Translate.translate('AdminHome', 'Home')
	          ) }),
	        _react2.default.createElement(
	          _E.Row,
	          { id: 'wrapper' },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              _E.Row,
	              { className: 'faults' },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '1/3', className: 'faults' },
	                Translate.translate('AdminCheckFaults', 'FaultCode')
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '1/3', className: 'faults' },
	                Translate.translate('AdminCheckFaults', 'EventID')
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '1/3', className: 'faults' },
	                Translate.translate('AdminCheckFaults', 'Description')
	              )
	            ),
	            this.renderFaults()
	          )
	        ),
	        _react2.default.createElement(
	          _E.Button,
	          { type: 'warning', onClick: this.clearFaults.bind(this) },
	          Translate.translate('AdminCheckFaults', 'Clear')
	        )
	      );
	    }
	  }, {
	    key: 'renderFaults',
	    value: function renderFaults() {
	      if (this.state.faults && this.state.faults.length) {
	        return this.state.faults.map(function (fault, $index) {
	          return _react2.default.createElement(
	            _E.Row,
	            { key: $index },
	            _react2.default.createElement(
	              _E.Col,
	              { basis: '1/3', className: 'faults' },
	              fault.faultCode
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { basis: '1/3', className: 'faults' },
	              fault.vmsEventID
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { basis: '1/3', className: 'faults' },
	              fault.faultDescription
	            )
	          );
	        });
	      }
	      return _react2.default.createElement(
	        'p',
	        null,
	        'No faults... maybe they are loading'
	      );
	    }
	  }]);

	  return AdminCheckFaults;
	}(_react.Component);

	exports.default = AdminCheckFaults;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminComponentControl');

	var AdminComponentControl = function (_Component) {
	  _inherits(AdminComponentControl, _Component);

	  function AdminComponentControl(props, context) {
	    _classCallCheck(this, AdminComponentControl);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminComponentControl).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      versionInfos: null
	    };

	    return _this;
	  }

	  _createClass(AdminComponentControl, [{
	    key: 'restartGUI',
	    value: function restartGUI() {
	      if (typeof window !== 'undefined') {
	        window.location.reload();
	      } else {
	        Big.error('cannot reset GUI, I have no window???');
	      }
	    }
	  }, {
	    key: 'back',
	    value: function back() {
	      _reactRouter.browserHistory.push("/Admin/Home");
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('enumerateComponents', function (err, data) {
	        if (err) Big.throw(err);
	        Big.log('enumerateComponents called back.... data:');
	        Big.log(data);
	        _this2.setState({
	          versionInfos: data
	        });
	      });
	    }
	  }, {
	    key: 'lastHeartbeatTime',
	    value: function lastHeartbeatTime(e) {
	      var _this3 = this;

	      if (e) {
	        e.preventDefault();
	      }
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('lastHeartbeatTime', function (err, lastBeat) {
	        Big.log('lastHeartbeatTime ok, what does this look like?');
	        Big.log(lastBeat);
	        if (lastBeat && (typeof lastBeat === 'undefined' ? 'undefined' : _typeof(lastBeat)) === 'object') {
	          lastBeat = lastBeat.heartbeatTime;
	        }
	        _this3.setState({
	          lastHeartbeatTime: lastBeat
	        });
	      });
	    }
	  }, {
	    key: 'heartBeatNow',
	    value: function heartBeatNow(e) {
	      var _this4 = this;

	      e.preventDefault();
	      _TsvActions2.default.apiCall('heartBeatNow', function (err, lastBeat) {
	        if (lastBeat && (typeof lastBeat === 'undefined' ? 'undefined' : _typeof(lastBeat)) === 'object') {
	          lastBeat = lastBeat.heartbeatTime;
	        }
	        _this4.lastHeartbeatTime(null);
	      });
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'vms', style: { maxWidth: '50%', margin: '1em auto' } },
	        _react2.default.createElement(
	          'h1',
	          { style: { fontWeight: 300 } },
	          'Component Control'
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'p',
	            null,
	            _react2.default.createElement(
	              _E.Button,
	              { onClick: this.heartBeatNow.bind(this) },
	              'Send Heartbeat'
	            ),
	            ' ',
	            _react2.default.createElement(
	              _E.Button,
	              { onClick: this.lastHeartbeatTime.bind(this) },
	              'Get Last Heartbeat'
	            )
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            ' '
	          ),
	          _react2.default.createElement(
	            'p',
	            { style: { fontSize: '1.3em' } },
	            'Last heartbeat: ',
	            this.state.lastHeartbeatTime || 'not retrieved yet'
	          ),
	          this.renderVersionInfos(),
	          _react2.default.createElement(_E.Button, { type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }, {
	    key: 'renderVersionInfos',
	    value: function renderVersionInfos() {
	      if (!this.state.versionInfos || !this.state.versionInfos.length) {
	        return _react2.default.createElement(
	          'h2',
	          null,
	          'Loading version info, one moment please...'
	        );
	      }
	      var stuff = this.state.versionInfos.map(function (foo, $index) {
	        return _react2.default.createElement(
	          'p',
	          { key: $index },
	          foo.name,
	          ': ',
	          foo.versionString,
	          ' (built on: ',
	          foo.buildDate,
	          ')'
	        );
	      });
	      return stuff;
	    }
	  }]);

	  return AdminComponentControl;
	}(_react.Component);

	exports.default = AdminComponentControl;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var AdminHome = function (_Component) {
	    _inherits(AdminHome, _Component);

	    function AdminHome(props, context) {
	        _classCallCheck(this, AdminHome);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminHome).call(this, props, context));
	        // MUST call super() before any this.*


	        _this.state = {
	            machineInfo: _TsvStore2.default.getMachineInfo()
	        };
	        _this._onTsvStoreChange = _this._onTsvStoreChange.bind(_this);

	        //TsvSettingsStore.setSession('currentView', 'AdminBillAcceptor');
	        _TsvActions2.default.apiCall('disableLoginDevices');
	        (0, _TsvUtils.emptyCart)();
	        return _this;
	    }

	    _createClass(AdminHome, [{
	        key: 'restart',
	        value: function restart() {
	            _TsvActions2.default.apiCall('restart');
	            _reactRouter.browserHistory.push("/View0");
	        }
	    }, {
	        key: 'shutdown',
	        value: function shutdown() {
	            _TsvActions2.default.apiCall('shutdown');
	        }

	        // Add change listeners to stores

	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	            _TsvStore2.default.addChangeListener(this._onTsvStoreChange);
	            if (!this.state.machineInfo) {
	                _TsvActions2.default.getMachineInfo();
	            }
	        }

	        // Remove change listers from stores

	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {}
	    }, {
	        key: '_onTsvStoreChange',
	        value: function _onTsvStoreChange(event) {
	            if (event.type === _appConstants2.default.MACHINE_INFO) {
	                this.setState({
	                    machineInfo: _TsvStore2.default.getMachineInfo()
	                });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                _E.Row,
	                { className: 'admin_home', style: { maxWidth: '85%', margin: '1em auto' } },
	                _react2.default.createElement(
	                    _E.Col,
	                    null,
	                    _react2.default.createElement(
	                        'h1',
	                        { style: { fontWeight: 300 } },
	                        'Admin Home'
	                    ),
	                    this.state.machineInfo ? _react2.default.createElement(
	                        'p',
	                        { style: { textAlign: 'center' } },
	                        'Team Viewer ID: ',
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            this.state.machineInfo.teamViewerID
	                        ),
	                        _react2.default.createElement('br', null),
	                        'Machine ID: ',
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            this.state.machineInfo._id
	                        ),
	                        _react2.default.createElement('br', null),
	                        'AVT ID: ',
	                        _react2.default.createElement(
	                            'strong',
	                            null,
	                            this.state.machineInfo.vendor_id
	                        )
	                    ) : _react2.default.createElement(
	                        'p',
	                        null,
	                        'Loading machine info, one moment please....'
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/AutoMap' },
	                                    Translate.translate('AdminHome', 'AutoMap')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/CheckFaults' },
	                                    Translate.translate('AdminHome', 'CheckFaults')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/ComponentControl' },
	                                    Translate.translate('AdminHome', 'ComponentControl')
	                                ) })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/Vms' },
	                                    Translate.translate('AdminHome', 'Vms')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/Inventory' },
	                                    Translate.translate('AdminHome', 'Inventory')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/JofemarExerciser' },
	                                    Translate.translate('AdminHome', 'JofemarExerciser')
	                                ) })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/PrintReaderTest' },
	                                    Translate.translate('AdminHome', 'PrintReaderTest')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/SystemInfo' },
	                                    Translate.translate('AdminHome', 'SystemInfo')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/Settings' },
	                                    Translate.translate('AdminHome', 'MachineSettings')
	                                ) })
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/StorefrontData' },
	                                    'Refresh Storefront Data'
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/BillAcceptor' },
	                                    Translate.translate('AdminHome', 'BillAcceptor')
	                                ) })
	                        ),
	                        _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } })
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } },
	                            _react2.default.createElement(
	                                _E.Button,
	                                { size: 'lg', onClick: this.restart },
	                                Translate.translate('AdminHome', 'Restart')
	                            )
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Admin/Activate' },
	                                    Translate.translate('AdminHome', 'Activate')
	                                ) })
	                        ),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } },
	                            _react2.default.createElement(
	                                _E.Button,
	                                { size: 'lg', onClick: this.shutdown },
	                                Translate.translate('AdminHome', 'ShutDown')
	                            )
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(
	                            'p',
	                            null,
	                            ' '
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _E.Row,
	                        null,
	                        _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'right' } }),
	                        _react2.default.createElement(
	                            _E.Col,
	                            { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                            _react2.default.createElement(_E.Button, { type: 'primary', size: 'lg', component: _react2.default.createElement(
	                                    _reactRouter.Link,
	                                    { to: '/Storefront' },
	                                    'Back to Storefront'
	                                ) })
	                        ),
	                        _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'left' } })
	                    )
	                )
	            );
	        }
	    }]);

	    return AdminHome;
	}(_react.Component);

	exports.default = AdminHome;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminInventory');

	var AdminInventory = function (_Component) {
		_inherits(AdminInventory, _Component);

		function AdminInventory(props, context) {
			_classCallCheck(this, AdminInventory);

			//TsvSettingsStore.setSession('currentView', 'AdminInventory');

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminInventory).call(this, props, context));
			// MUST call super() before any this.*


			_this.state = {
				instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
				machineID: 0,
				num: "",
				maxChars: _TsvSettingsStore2.default.getConfig('bDualMachine') ? 3 : 2,
				inventoryGuiState: 'selectSlot',
				showKeypad: false
			};

			if (_TsvSettingsStore2.default.getCache('machineList').length > 1) {
				_this.state.bShowDropDownForMachines = true;
			}
			return _this;
		}

		// Add change listeners to stores


		_createClass(AdminInventory, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var _this2 = this;

				_TsvActions2.default.apiCall('fetchMachineIds', function (err, ids) {
					_TsvSettingsStore2.default.setCache('machineList', ids);
					if (ids && ids.length > 1) {
						_this2.setState({
							bShowDropDownForMachines: true
						});
					}
				});

				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {}
		}, {
			key: 'fillMachine',
			value: function fillMachine() {
				if (this.state.machineID) {
					(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
					_TsvActions2.default.apiCall('fillMachine', this.state.machineID.toString());
				} else {
					alert('error, cannot fill the machine as there is no machineID');
				}
			}
		}, {
			key: 'fillCoil',
			value: function fillCoil() {
				var _this3 = this;

				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				if (this.state.coilNumber != "") {
					_TsvActions2.default.apiCall('adminValidateProductByCoil', this.state.coilNumber, function (err, data) {
						if (err) {
							Big.throw(err);
							return;
						}
						var state = { verifiedProductData: data };

						switch (state.verifiedProductData.result) {
							case "UNKNOWN":
								state.instructionMessage = Translate.translate('AdminInventory', 'UnknownProduct');
								setTimeout(function () {
									_this3.setState({
										instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
										inventoryGuiState: 'selectSlot',
										num: ""
									});
								}, 3000);
								break;

							case "INVALID_PRODUCT":
								state.instructionMessage = Translate.translate('AdminInventory', 'InvalidProduct');
								setTimeout(function () {
									_this3.setState({
										instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
										inventoryGuiState: 'selectSlot',
										num: ""
									});
								}, 3000);
								break;

							default:
								state.instructionMessage = 'Filling slot for ' + (_this3.state.verifiedProductData.name || _this3.state.verifiedProductData.productName) + ', one moment please...'; //Translate.translate('AdminInventory', 'EnterStockAmount');
								state.coilNumber = _this3.state.num;
								state.num = '';
								state.inventoryGuiState = 'processing';
								_TsvActions2.default.apiCall('fillCoil', state.coilNumber, function () {
									// artificial delay for GUI flow:
									setTimeout(function () {
										_this3.setState({
											instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
											inventoryGuiState: 'selectSlot',
											num: "",
											coilNumber: null
										});
									}, 3000);
								});
								break;
						}
						_this3.setState(state);
					});
				}
			}
		}, {
			key: 'selectSlot',
			value: function selectSlot() {
				var _this4 = this;

				var num = parseInt(this.state.num);
				if (num) {
					(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
					_TsvActions2.default.apiCall('adminValidateProductByCoil', this.state.num, function (err, data) {
						if (err) {
							Big.throw(err);
							return;
						}
						var state = void 0;
						if (data) {
							var data2 = _StorefrontStore2.default.decorateProducts(data);
							state = {
								verifiedProductData: data2,
								productImages: _StorefrontStore2.default.getImagesForProduct(data2)
							};
						} else {
							state = {
								verifiedProductData: data
							};
						}
						Big.log('verifiedProductData');
						Big.log(state);

						switch (data.result) {
							case "UNKNOWN":
								state.instructionMessage = Translate.translate('AdminInventory', 'UnknownProduct');
								setTimeout(function () {
									_this4.setState({
										instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
										inventoryGuiState: 'selectSlot',
										num: ""
									});
								}, 3000);
								break;

							case "INVALID_PRODUCT":
								state.instructionMessage = Translate.translate('AdminInventory', 'InvalidProduct');
								setTimeout(function () {
									_this4.setState({
										instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
										inventoryGuiState: 'selectSlot',
										num: ""
									});
								}, 3000);
								break;

							default:
								state.instructionMessage = Translate.translate('AdminInventory', 'EnterStockAmount');
								state.coilNumber = _this4.state.num;
								state.num = '';
								state.inventoryGuiState = 'stock';
								break;
						}
						_this4.setState(state);
					});
				}
			}
		}, {
			key: 'cancelSlot',
			value: function cancelSlot() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				this.setState({
					inventoryGuiState: 'selectSlot',
					num: "",
					verifiedProductData: null,
					coilNumber: null
				});
			}
		}, {
			key: 'addStock',
			value: function addStock() {
				var _this5 = this;

				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				if (this.state.coilNumber != "" && this.state.num != "") {
					this.setState({
						instructionMessage: 'Adding ' + this.state.num + ' ' + (this.state.verifiedProductData.name || this.state.verifiedProductData.productName) + ' from stock count, one moment please.',
						inventoryGuiState: 'processing'
					});
					_TsvActions2.default.apiCall('addStock', this.state.coilNumber, this.state.num, function (err, data) {
						_TsvActions2.default.apiCall('adminValidateProductByCoil', _this5.state.coilNumber, function (err, data) {

							// FIXME: blindly assuming that we get good product data after a successful coil select

							var data2 = _StorefrontStore2.default.decorateProducts(data);
							_this5.setState({
								verifiedProductData: data2,
								productImages: _StorefrontStore2.default.getImagesForProduct(data2),
								num: ""
							});

							setTimeout(function () {
								_this5.setState({
									instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
									inventoryGuiState: 'selectSlot',
									num: ""
								});
							}, 2000);
						});
					});
				} else {
					Big.warn('tried to addStock, but did not have both "coilNumber" and "num" in state');
				}
			}
		}, {
			key: 'removeStock',
			value: function removeStock() {
				var _this6 = this;

				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				if (this.state.coilNumber != "" && this.state.num != "") {
					this.setState({
						instructionMessage: 'Removing ' + this.state.num + ' ' + (this.state.verifiedProductData.name || this.state.verifiedProductData.productName) + ' from stock count, one moment please.',
						inventoryGuiState: 'processing'
					});
					_TsvActions2.default.apiCall('removeStock', this.state.coilNumber, this.state.num, function (err, data) {
						_TsvActions2.default.apiCall('adminValidateProductByCoil', _this6.state.coilNumber, function (err, data) {

							// FIXME: blindly assuming that we get good product data after a successful coil select

							var data2 = _StorefrontStore2.default.decorateProducts(data);
							_this6.setState({
								verifiedProductData: data2,
								productImages: _StorefrontStore2.default.getImagesForProduct(data2),
								// just reference it direct if you need... verifiedProductData.inventoryCount
								//stockCount: "Stock Count: " + data.inventoryCount,
								num: ""
							});

							setTimeout(function () {
								_this6.setState({
									instructionMessage: Translate.translate('AdminInventory', 'EnterCoil'),
									inventoryGuiState: 'selectSlot',
									num: ""
								});
							}, 2000);
						});
					});
				} else {
					Big.warn('tried to removeStock, but did not have both "coilNumber" and "num" in state');
				}
			}
		}, {
			key: 'clear',
			value: function clear() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				this.setState({
					num: ""
				});
			}
		}, {
			key: 'press',
			value: function press(digit) {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				var num = this.state.num;
				if (num.length < this.state.maxChars) {
					num += digit;
				}
				this.setState({
					num: parseInt(num).toString()
				});
			}
		}, {
			key: 'getMachineSelectOptions',
			value: function getMachineSelectOptions() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				var options = [];
				_TsvSettingsStore2.default.getCache('machineList').forEach(function (MACHINE) {
					options.push({ label: 'Machine ' + MACHINE, value: MACHINE });
				});
				return options;
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_E.Row,
					{ className: 'inventory', style: { maxWidth: '50%', margin: '1em auto' } },
					_react2.default.createElement(
						'h1',
						{ style: { fontWeight: 300 } },
						'Inventory'
					),
					_react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h2',
							{ id: 'instruction' },
							this.state.instructionMessage
						),
						this.renderSelectSlot(),
						this.renderManageStockForSlot()
					)
				);
			}
		}, {
			key: 'renderSelectSlot',
			value: function renderSelectSlot() {
				if (this.state.inventoryGuiState === 'selectSlot') {
					return _react2.default.createElement(
						'div',
						null,
						this.renderKeypad(),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', type: 'warning', onClick: this.clear.bind(this) },
									'Clear'
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								' '
							),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								_react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
										_reactRouter.Link,
										{ to: '/Admin/Home' },
										Translate.translate('AdminHome', 'Home')
									) })
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } }),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ style: { margin: '0 auto', display: 'block' }, size: 'lg', type: 'primary', onClick: this.selectSlot.bind(this) },
									'Select Slot ',
									this.state.num
								)
							),
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } })
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								null,
								_react2.default.createElement(
									'div',
									{ style: { textAlign: 'center', border: '1px solid #dfdfdf', backgroundColor: '#fff', borderRadius: '4px', margin: '20px auto' } },
									_react2.default.createElement(
										'h2',
										null,
										'Slot number: ',
										this.state.num
									)
								)
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } }),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
								_TsvSettingsStore2.default.getCache('machineList').length > 1 ? _react2.default.createElement(_E.FormSelect, { name: 'selectMachine', value: this.state.machineID, options: this.getMachineSelectOptions() }) : null
							),
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } })
						)
					);
				}
				return null;
			}
		}, {
			key: 'renderManageStockForSlot',
			value: function renderManageStockForSlot() {
				if (this.state.inventoryGuiState === 'stock') {
					return _react2.default.createElement(
						'div',
						null,
						this.renderKeypad(),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', type: 'warning', onClick: this.clear.bind(this) },
									'Clear'
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								' '
							),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', type: 'primary', onClick: this.cancelSlot.bind(this) },
									_react2.default.createElement(_E.Glyph, { icon: 'circle-slash' }),
									'Cancel'
								)
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								null,
								_react2.default.createElement(
									'div',
									{ style: { textAlign: 'center', border: '1px solid #dfdfdf', backgroundColor: '#fff', borderRadius: '4px', margin: '20px auto' } },
									_react2.default.createElement(
										'h2',
										null,
										'stock amount: ',
										this.state.num
									)
								)
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', style: { float: 'left' }, type: 'danger', onClick: this.removeStock.bind(this) },
									_react2.default.createElement(_E.Glyph, { icon: 'dash' }),
									'Remove ',
									this.state.num,
									' Items'
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', style: { float: 'right' }, type: 'success', onClick: this.addStock.bind(this) },
									_react2.default.createElement(_E.Glyph, { icon: 'plus' }),
									'Add ',
									this.state.num,
									' Items'
								)
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } }),
							_react2.default.createElement(
								_E.Col,
								{ sm: '1/2', md: '1/2', lg: '1/2' },
								_react2.default.createElement(
									_E.Button,
									{ size: 'lg', type: 'primary', onClick: this.fillCoil.bind(this), style: { margin: '0 auto', display: 'block' } },
									'Fill Slot To Par'
								)
							),
							_react2.default.createElement(_E.Col, { sm: '1/4', md: '1/4', lg: '1/4', style: { textAlign: 'center' } })
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								'p',
								null,
								' '
							)
						),
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ sm: '100%', md: '100%', lg: '100%' },
								_react2.default.createElement(
									'p',
									{ style: { textAlign: 'center' } },
									'Coil: ',
									_react2.default.createElement(
										'strong',
										null,
										this.state.coilNumber
									),
									' Current Stock Count: ',
									_react2.default.createElement(
										'strong',
										null,
										this.state.verifiedProductData.inventoryCount
									)
								),
								_react2.default.createElement(
									'h3',
									{ style: { textAlign: 'center' } },
									this.state.verifiedProductData.name || this.state.verifiedProductData.productName
								),
								this.renderProductImage()
							)
						)
					);
				}
				return null;
			}
		}, {
			key: 'renderProductImage',
			value: function renderProductImage() {
				/*
	   {this.state.verifiedProductData.imagePath ? 
	   (<p style={{textAlign:'center'}}><img src={this.state.verifiedProductData.imagePath} className="boxShadowed" style={{maxHeight:'10em'}} /></p>)
	   : (<p style={{textTransform:'uppercase',textAlign:'center'}}>no<br />product<br />image<br />found</p>)
	   }
	   */
				if (this.state.productImages && this.state.productImages.length) {
					return _react2.default.createElement(
						'p',
						{ style: { textAlign: 'center' } },
						_react2.default.createElement('img', { src: this.state.productImages[0].fileData, className: 'boxShadowed', style: { maxHeight: '10em' } })
					);
				}
				return _react2.default.createElement(
					'p',
					{ style: { textTransform: 'uppercase', textAlign: 'center' } },
					'no',
					_react2.default.createElement('br', null),
					'product',
					_react2.default.createElement('br', null),
					'image',
					_react2.default.createElement('br', null),
					'found'
				);
			}
		}, {
			key: 'renderKeypad',
			value: function renderKeypad() {
				return _react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							'p',
							null,
							' '
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 1) },
								'1'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 2) },
								'2'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 3) },
								'3'
							)
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							'p',
							null,
							' '
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 4) },
								'4'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 5) },
								'5'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 6) },
								'6'
							)
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							'p',
							null,
							' '
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 7) },
								'7'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 8) },
								'8'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 9) },
								'9'
							)
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							'p',
							null,
							' '
						)
					),
					_react2.default.createElement(
						_E.Row,
						null,
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							' '
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							_react2.default.createElement(
								_E.Button,
								{ size: 'lg', onClick: this.press.bind(this, 0) },
								'0'
							)
						),
						_react2.default.createElement(
							_E.Col,
							{ sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
							' '
						)
					)
				);
			}
		}]);

		return AdminInventory;
	}(_react.Component);

	exports.default = AdminInventory;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminJofemarExerciser');

	var AdminJofemarExerciser = function (_Component) {
	  _inherits(AdminJofemarExerciser, _Component);

	  function AdminJofemarExerciser(props, context) {
	    _classCallCheck(this, AdminJofemarExerciser);

	    //TsvSettingsStore.setSession('currentView', 'AdminJofemarExerciser');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminJofemarExerciser).call(this, props, context));
	    // MUST call super() before any this.*


	    _TsvActions2.default.apiCall('fetchMachineIds', function (err, ids) {
	      _TsvSettingsStore2.default.setCache('machineList', ids);
	    });

	    _this.state = {
	      num: "",
	      maxChars: _TsvSettingsStore2.default.getConfig('bDualMachine') ? 3 : 2,
	      errs: 0,
	      bShowDropDownForMachines: false,
	      machineNumber: 0,
	      vmsStatus: []
	    };

	    if (_TsvSettingsStore2.default.getCache('machineList').length > 1) {
	      _this.state.bShowDropDownForMachines = true;
	    }

	    _this._onTsvChange = _this._onTsvChange.bind(_this);

	    return _this;
	  }

	  _createClass(AdminJofemarExerciser, [{
	    key: 'vend',
	    value: function vend() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('vendProduct', this.state.machineNumber, parseInt(this.state.num) + this.state.machineNumber * 100);
	      this.setState({
	        num: "",
	        vmsStatus: []
	      });
	    }
	  }, {
	    key: 'lightOn',
	    value: function lightOn() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('setLights', this.state.machineNumber, true);
	    }
	  }, {
	    key: 'lightOff',
	    value: function lightOff() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvActions2.default.apiCall('setLights', this.state.machineNumber, false);
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      this.setState({
	        num: ""
	      });
	    }
	  }, {
	    key: 'press',
	    value: function press(digit) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      var num = this.state.num + digit.toString();
	      if (this.state.num.length < this.state.maxChars) {
	        this.setState({
	          num: num
	        });
	      }
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (event && event.method == 'notifyVmsEvent') {
	        Big.log('TSV event');
	        Big.log(event);
	        var status = this.state.vmsStatus;
	        status.push(eventArgs.eventType + ' (' + eventArgs.exceptionMessage + ')');
	        this.setState({
	          vmsStatus: status
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      //curl -X POST -d '["DOOR_OPENED"]' http://localhost:8085/tsv/flashapi
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'AdminJofemarExerciser', style: { width: '50%', margin: '1em auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300 } },
	            'Jofemar Exerciser'
	          ),
	          _react2.default.createElement(
	            'div',
	            null,
	            _TsvSettingsStore2.default.getCache('machineList').length > 1 ? _react2.default.createElement(_E.FormSelect, { name: 'selectMachine', value: this.state.machineID, options: this.getMachineSelectOptions() }) : null,
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.lightOn.bind(this) },
	                  Translate.translate('AdminJofemarExerciser', 'LightOn')
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/2', md: '1/2', lg: '1/2', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.lightOff.bind(this) },
	                  Translate.translate('AdminJofemarExerciser', 'LightOff')
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 1) },
	                  '1'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 2) },
	                  '2'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 3) },
	                  '3'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 4) },
	                  '4'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 5) },
	                  '5'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 6) },
	                  '6'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 7) },
	                  '7'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 8) },
	                  '8'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 9) },
	                  '9'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', type: 'warning', onClick: this.clear.bind(this) },
	                  'Clear'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 0) },
	                  '0'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', type: 'primary', onClick: this.vend.bind(this) },
	                  'Vend'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                null,
	                _react2.default.createElement(
	                  'div',
	                  { style: { textAlign: 'center', border: '1px solid #dfdfdf', borderRadius: '4px', margin: '20px auto' } },
	                  _react2.default.createElement(
	                    'h2',
	                    null,
	                    'selection: ',
	                    this.state.num
	                  )
	                )
	              )
	            )
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            this.state.vmsStatus.map(function (T) {
	              return _react2.default.createElement(
	                'span',
	                null,
	                T,
	                _react2.default.createElement('br', null)
	              );
	            })
	          ),
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }]);

	  return AdminJofemarExerciser;
	}(_react.Component);

	exports.default = AdminJofemarExerciser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminLogin');

	var AdminLogin = function (_Component) {
	  _inherits(AdminLogin, _Component);

	  function AdminLogin(props, context) {
	    _classCallCheck(this, AdminLogin);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminLogin).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      num: "",
	      maxChars: 6,
	      instructionMessage: Translate.translate('AdminLogin', 'LoginMsg')
	    };
	    return _this;
	  }

	  _createClass(AdminLogin, [{
	    key: 'enter',
	    value: function enter() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      var localPass = _TsvSettingsStore2.default.getCache('machineSettings.AdminPassword'),
	          result = 'VALID';

	      function handlePass(result) {
	        switch (result) {
	          case "VALID":
	            _reactRouter.browserHistory.push("/Admin/Home");
	            break;

	          default:
	            this.setState({
	              instructionMessage: Translate.translate('AdminLogin', 'InvalidPassword'),
	              num: ""
	            }); //"Invalid Password";
	            break;
	        }
	      }

	      handlePass = handlePass.bind(this);

	      if (localPass) {
	        Big.log('using localPass for login check: ' + localPass + ', ' + (typeof localPass === 'undefined' ? 'undefined' : _typeof(localPass)) + ', ' + _typeof(this.state.num));
	        result = !!(localPass == this.state.num);
	        if (result) {
	          result = 'VALID';
	        }
	        handlePass(result);
	      } else {
	        Big.log('using TsvApi for login check');
	        _TsvActions2.default.apiCall('validateAdminPassword', this.state.num, function (err, res) {
	          handlePass(res.result);
	        });
	      }
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      this.setState({
	        instructionMessage: Translate.translate('AdminLogin', 'LoginMsg'),
	        num: ""
	      });
	    }
	  }, {
	    key: 'press',
	    value: function press(digit) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (this.state.num.length < this.state.maxChars) {
	        this.setState({
	          num: this.state.num + digit
	        });
	      }
	    }
	  }, {
	    key: 'back',
	    value: function back() {
	      (0, _TsvUtils.gotoDefaultIdlePage)();
	    }
	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'AdminLogin' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'div',
	            { style: { width: '60%', margin: '0 auto' } },
	            _react2.default.createElement(
	              'h2',
	              { id: 'instruction' },
	              this.state.instructionMessage
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 1) },
	                  '1'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 2) },
	                  '2'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 3) },
	                  '3'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 4) },
	                  '4'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 5) },
	                  '5'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 6) },
	                  '6'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 7) },
	                  '7'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 8) },
	                  '8'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 9) },
	                  '9'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3' }),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', onClick: this.press.bind(this, 0) },
	                  '0'
	                )
	              ),
	              _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3' })
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                'p',
	                null,
	                ' ',
	                ' '
	              )
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', type: 'warning', onClick: this.clear.bind(this) },
	                  'Clear'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  'div',
	                  { style: { backgroundColor: '#fff', width: '100%', fontSize: '1.5em', padding: '0.45em', border: '1px solid #ddd', borderRadius: '4px', margin: '0 auto' } },
	                  ' ',
	                  this.state.num,
	                  ' '
	                ),
	                _react2.default.createElement(
	                  'p',
	                  null,
	                  ' ',
	                  ' '
	                ),
	                _react2.default.createElement(
	                  'p',
	                  null,
	                  ' ',
	                  ' '
	                ),
	                _react2.default.createElement(_E.Button, { type: 'primary', component: _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/Storefront' },
	                    Translate.translate('AdminLogin', 'BackToStore')
	                  ) })
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'lg', type: 'primary', onClick: this.enter.bind(this) },
	                  'Enter'
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return AdminLogin;
	}(_react.Component);

	exports.default = AdminLogin;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _AdminActions = __webpack_require__(78);

	var _AdminActions2 = _interopRequireDefault(_AdminActions);

	var _AdminStore = __webpack_require__(79);

	var _AdminStore2 = _interopRequireDefault(_AdminStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _utils = __webpack_require__(5);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('Admin_Print_Reader_Tester');

	var Admin_Print_Reader_Tester = function (_Component) {
	  _inherits(Admin_Print_Reader_Tester, _Component);

	  function Admin_Print_Reader_Tester(props, context) {
	    _classCallCheck(this, Admin_Print_Reader_Tester);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Admin_Print_Reader_Tester).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      user_id: 'u123',
	      client_id: 'c123',
	      location_id: 'l123',
	      machine_id: 'm123',
	      interfaceFocus: false,
	      apiResponse: [],
	      token: (0, _utils.uniq)()
	    };

	    _this._onStoreChange = _this._onStoreChange.bind(_this);

	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(Admin_Print_Reader_Tester, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _AdminStore2.default.addChangeListener(this._onStoreChange);
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _AdminStore2.default.removeChangeListener(this._onStoreChange);
	    }
	  }, {
	    key: '_onStoreChange',
	    value: function _onStoreChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      Big.log('PRINT READER event');
	      Big.log(event);
	      //if (event.type == appC.TEST_REGISTER_PRINT) {
	      this.setState({
	        apiResponse: _AdminStore2.default.getApiResponses()
	      });
	      //}
	    }
	  }, {
	    key: 'startMatchPrint',
	    value: function startMatchPrint() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _AdminActions2.default.clearApiResponses();
	      this.setState({
	        interfaceFocus: 'match',
	        apiResponse: [], // reset API messages
	        token: (0, _utils.uniq)() // new token
	      });
	    }
	  }, {
	    key: 'startRegisterPrint',
	    value: function startRegisterPrint() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _AdminActions2.default.clearApiResponses();
	      this.setState({
	        interfaceFocus: 'register',
	        apiResponse: [], // reset API messages
	        token: (0, _utils.uniq)() // new token
	      });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      this.setState({
	        interfaceFocus: false,
	        apiResponse: [], // reset API messages
	        token: (0, _utils.uniq)() // new token
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      //curl -X POST -d '["DOOR_OPENED"]' http://localhost:8085/tsv/flashapi
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'Admin_Print_Reader_Tester' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h2',
	            { id: 'instruction' },
	            'Test print reading and matching'
	          ),
	          this.renderGuiState()
	        )
	      );
	    }
	  }, {
	    key: 'renderGuiState',
	    value: function renderGuiState() {
	      if (this.state.interfaceFocus) {
	        switch (this.state.interfaceFocus) {
	          case 'register':
	            return this.registerInterface();
	            break;

	          case 'match':
	            return this.matchInterface();
	            break;
	        }
	      }

	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%' },
	          _react2.default.createElement(
	            'h4',
	            null,
	            'what are we doing?'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '33%', md: '33%', lg: '33%' },
	          _react2.default.createElement(
	            _E.Button,
	            { size: 'lg', type: 'primary', onClick: this.startRegisterPrint.bind(this) },
	            ' Register Print '
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '33%', md: '33%', lg: '33%' },
	          _react2.default.createElement(
	            _E.Button,
	            { size: 'lg', type: 'primary', onClick: this.startMatchPrint.bind(this) },
	            ' Match Print '
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '33%', md: '33%', lg: '33%' },
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }, {
	    key: 'updateState',
	    value: function updateState(what, e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      //Big.warn('updateState(what, e)');
	      //Big.log(what);
	      //Big.log(e.target.value);
	      var state = {};
	      state[what] = e.target.value;
	      //Big.log(state);
	      this.setState(state);
	    }

	    /*********
	    
	    		BIG OL DEV NOTE: we are setting onChange as well as onKeyUp because:
	    		- react screams loudly if there's no onChange or readOnly
	    		- chrome virtual keyboard extension does not fire onChange, thus we need onKeyup
	    
	    *********/

	  }, {
	    key: 'registerInterface',
	    value: function registerInterface() {
	      return _react2.default.createElement(
	        _E.Row,
	        { style: { maxWidth: '65%', margin: '0 auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%' },
	          _react2.default.createElement(
	            'h4',
	            null,
	            'Register a print'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '50%', md: '50%', lg: '50%' },
	          _react2.default.createElement(
	            _E.Form,
	            { type: 'horizontal' },
	            _react2.default.createElement(
	              _E.FormField,
	              { label: 'User ID', htmlFor: 'user_id' },
	              _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Set user ID', name: 'user_id', value: this.state.user_id, _vkenabled: 'true', onChange: this.updateState.bind(this, 'user_id'), onKeyUp: this.updateState.bind(this, 'user_id') })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: 'Client ID', htmlFor: 'client_id' },
	              _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Set client ID', name: 'client_id', value: this.state.client_id, _vkenabled: 'true', onChange: this.updateState.bind(this, 'client_id'), onKeyUp: this.updateState.bind(this, 'client_id') })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: 'Location ID', htmlFor: 'location_id' },
	              _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Set location ID', name: 'location_id', value: this.state.location_id, _vkenabled: 'true', onChange: this.updateState.bind(this, 'location_id'), onKeyUp: this.updateState.bind(this, 'location_id') })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: 'Machine ID', htmlFor: 'machine_id' },
	              _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Set machine ID', name: 'machine_id', value: this.state.machine_id, _vkenabled: 'true', onChange: this.updateState.bind(this, 'machine_id'), onKeyUp: this.updateState.bind(this, 'machine_id') })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { offsetAbsentLabel: true },
	              _react2.default.createElement(
	                _E.Button,
	                { size: 'lg', onClick: this.registerPrint.bind(this) },
	                'Register print'
	              ),
	              ' ',
	              _react2.default.createElement(
	                _E.Button,
	                { size: 'lg', onClick: this.reset.bind(this) },
	                'Reset'
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '50%', md: '50%', lg: '50%' },
	          _react2.default.createElement(
	            'p',
	            null,
	            'Api Responses (if any):'
	          ),
	          _react2.default.createElement(
	            'pre',
	            { style: { fontSize: '1em', padding: '1em' } },
	            this.state.apiResponse.join("\n")
	          ),
	          _react2.default.createElement(
	            'pre',
	            { style: { fontSize: '0.75em', padding: '1em', backgroundColor: '#dfdfdf' } },
	            'Virtual Keyboard Sanity check:',
	            "\n",
	            'User ID: ',
	            this.state.user_id,
	            "\n",
	            'Client ID: ',
	            this.state.client_id,
	            "\n",
	            'Location ID: ',
	            this.state.location_id,
	            "\n",
	            'Machine ID: ',
	            this.state.machine_id,
	            "\n"
	          )
	        )
	      );
	    }

	    /*********
	    
	    		BIG OL DEV NOTE: we are setting onChange as well as onKeyUp because:
	    		- react screams loudly if there's no onChange or readOnly
	    		- chrome virtual keyboard extension does not fire onChange, thus we need onKeyup
	    
	    *********/

	  }, {
	    key: 'matchInterface',
	    value: function matchInterface() {
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '100%', md: '100%', lg: '100%' },
	          _react2.default.createElement(
	            'h4',
	            null,
	            'Match a print'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '50%', md: '50%', lg: '50%' },
	          _react2.default.createElement(
	            _E.Form,
	            { type: 'horizontal' },
	            _react2.default.createElement(
	              _E.FormField,
	              { label: 'User ID', htmlFor: 'user_id' },
	              _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Set user ID', name: 'user_id', value: this.state.user_id, _vkenabled: 'true', onChange: this.updateState.bind(this, 'user_id'), onKeyUp: this.updateState.bind(this, 'user_id') })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { offsetAbsentLabel: true },
	              _react2.default.createElement(
	                _E.Button,
	                { size: 'lg', onClick: this.matchPrint.bind(this) },
	                'Start matching...'
	              ),
	              ' ',
	              _react2.default.createElement(
	                _E.Button,
	                { size: 'lg', onClick: this.reset.bind(this) },
	                'Reset'
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '50%', md: '50%', lg: '50%' },
	          _react2.default.createElement(
	            'p',
	            null,
	            'Api Responses (if any):'
	          ),
	          _react2.default.createElement(
	            'pre',
	            { style: { fontSize: '1em', padding: '1em' } },
	            this.state.apiResponse.join("\n")
	          ),
	          _react2.default.createElement(
	            'pre',
	            { style: { fontSize: '0.75em', padding: '1em', backgroundColor: '#dfdfdf' } },
	            'Virtual Keyboard Sanity check:',
	            "\n",
	            'User ID: ',
	            this.state.user_id,
	            "\n",
	            'Client ID: ',
	            this.state.client_id,
	            "\n",
	            'Location ID: ',
	            this.state.location_id,
	            "\n",
	            'Machine ID: ',
	            this.state.machine_id,
	            "\n"
	          )
	        )
	      );
	    }
	  }, {
	    key: 'registerPrint',
	    value: function registerPrint() {
	      //startGeneralIdleTimer(this.props.location.pathname);
	      _AdminActions2.default.registerPrint(this.state);
	    }
	  }, {
	    key: 'matchPrint',
	    value: function matchPrint() {
	      //startGeneralIdleTimer(this.props.location.pathname);
	      _AdminActions2.default.matchPrint(this.state);
	    }
	  }]);

	  return Admin_Print_Reader_Tester;
	}(_react.Component);

	exports.default = Admin_Print_Reader_Tester;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminSettings');

	var AdminSettings = function (_Component) {
	  _inherits(AdminSettings, _Component);

	  function AdminSettings(props, context) {
	    _classCallCheck(this, AdminSettings);

	    //TsvSettingsStore.setSession('currentView', 'AdminSettings');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminSettings).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = _this.getStateSettings();
	    _this._onTsvSettingsChange = _this._onTsvSettingsChange.bind(_this);
	    return _this;
	  }

	  _createClass(AdminSettings, [{
	    key: 'getStateSettings',
	    value: function getStateSettings() {
	      /*return*/var state = {
	        supportLanguages: _TsvSettingsStore2.default.getConfig('supportLanguages'),

	        defaultLanguage: _TsvSettingsStore2.default.getCache('machineSettings.defaultLanguage'),
	        CCProcessorMode: _TsvSettingsStore2.default.getCache('machineSettings.CCProcessorMode'),
	        MachineSerialNumber: _TsvSettingsStore2.default.getCache('machineSettings.MachineSerialNumber'),
	        CCMerchantKey: _TsvSettingsStore2.default.getCache('machineSettings.CCMerchantKey'),
	        CCMerchantID: _TsvSettingsStore2.default.getCache('machineSettings.CCMerchantID'),
	        DropSensorAttached: _TsvSettingsStore2.default.getCache('machineSettings.DropSensorAttached'),
	        CCReaderType: _TsvSettingsStore2.default.getCache('machineSettings.CCReaderType'),
	        VMCPlatform: _TsvSettingsStore2.default.getCache('machineSettings.VMCPlatform'),
	        MachineCount: _TsvSettingsStore2.default.getCache('machineSettings.MachineCount'),
	        VMCControlCOMPort: _TsvSettingsStore2.default.getCache('machineSettings.VMCControlCOMPort'),
	        SalesTaxRate: _TsvSettingsStore2.default.getCache('machineSettings.SalesTaxRate'),
	        ShoppingCartMaxItemCount: _TsvSettingsStore2.default.getCache('machineSettings.ShoppingCartMaxItemCount'),

	        bHasShoppingCart: _TsvSettingsStore2.default.getCache('custommachinesettings.bHasShoppingCart'),
	        singleProductDonation: _TsvSettingsStore2.default.getCache('custommachinesettings.singleProductDonation'),
	        minimumDonationAmount: _TsvSettingsStore2.default.getCache('custommachinesettings.minimumDonationAmount')
	      };
	      Big.log('getStateSettings()');
	      Big.log(state);
	      return state;
	    }
	  }, {
	    key: 'save',
	    value: function save(e) {
	      var _this2 = this;

	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);

	      if (e) {
	        e.preventDefault();
	      }

	      var machineSettingsProps = ['defaultLanguage', 'CCProcessorMode', 'MachineSerialNumber', 'CCMerchantKey', 'CCMerchantID', 'DropSensorAttached', 'CCReaderType', 'VMCPlatform', 'MachineCount', 'VMCControlCOMPort', 'SalesTaxRate', 'ShoppingCartMaxItemCount'];

	      var customMachineSettingsProps = ['bHasShoppingCart', 'singleProductDonation', 'minimumDonationAmount'];

	      machineSettingsProps.forEach(function (PROP) {
	        var val = _this2.state[PROP];
	        if (val !== _TsvSettingsStore2.default.getCache('machineSettings.' + PROP)) {
	          _TsvActions2.default.apiCall('setMachineSetting', PROP, val);
	        }
	      });

	      customMachineSettingsProps.forEach(function (PROP) {
	        var val = _this2.state[PROP];
	        if (val !== _TsvSettingsStore2.default.getCache('custommachinesettings.' + PROP)) {
	          _TsvActions2.default.apiCall('setCustomMachineSetting', PROP, val);
	        }
	      });

	      var languageSupported = _TsvSettingsStore2.default.getCache('custommachinesettings.languageSupported');
	      if (languageSupported !== this.state.supportLanguages) {
	        _TsvActions2.default.apiCall('setCustomMachineSetting', "languageSupported", this.state.supportLanguages);
	        _TsvSettingsStore2.default.setConfig('supportLanguages', this.state.supportLanguages);
	      }

	      var MS = _TsvSettingsStore2.default.getCache('machineSettings');
	      machineSettingsProps.forEach(function (PROP) {
	        MS[PROP] = _this2.state[PROP];
	      });

	      var CMS = _TsvSettingsStore2.default.getCache('custommachinesettings');
	      customMachineSettingsProps.forEach(function (PROP) {
	        CMS[PROP] = _this2.state[PROP];
	      });

	      _TsvSettingsStore2.default.setCache({
	        custommachinesettings: CMS,
	        machineSettings: MS
	      });
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _TsvSettingsStore2.default.addChangeListener(this._onTsvSettingsChange);
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.removeChangeListener(this._onTsvSettingsChange);
	    }
	  }, {
	    key: '_onTsvSettingsChange',
	    value: function _onTsvSettingsChange(event) {
	      Big.log('_onTsvSettingsChange(event)');
	      Big.log(event);
	      if (event.type === 'cache' && event.path === '__multiple__' || event.type === 'config' && event.path === 'supportLanguages') {
	        this.setState(this.getStateSettings());
	      }
	    }
	  }, {
	    key: 'textChange',
	    value: function textChange(e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      var state = {};
	      state[e.target.name] = e.target.value;
	      this.setState(state);
	    }
	  }, {
	    key: 'selectChange',
	    value: function selectChange(what, e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      var state = {};
	      state[what] = e;
	      this.setState(state);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'AdminSettings', style: { maxWidth: '50%', margin: '0 auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300 } },
	            'Machine Settings'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          { id: 'machineSettings' },
	          _react2.default.createElement(
	            _E.Form,
	            { type: 'horizontal' },
	            _react2.default.createElement(_E.FormSelect, { label: Translate.translate('AdminSettings', 'LabelCardProcessorMode'),
	              onChange: this.selectChange.bind(this, 'CCProcessorMode'),
	              name: 'CCProcessorMode', value: this.state.CCProcessorMode,
	              options: [{ label: 'Production', value: 'Production' }, { label: 'Certification', value: 'Certification' }] }),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelMerchantID') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.CCMerchantID, name: 'CCMerchantID', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelMerchantKey') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.CCMerchantKey, name: 'CCMerchantKey', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelMachineSerialNumber') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.MachineSerialNumber, name: 'MachineSerialNumber', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(_E.FormSelect, { label: Translate.translate('AdminSettings', 'LabelDefaultLanguage'),
	              onChange: this.selectChange.bind(this, 'defaultLanguage'),
	              name: 'defaultLanguage', value: this.state.defaultLanguage,
	              options: [{ label: 'English', value: 'En' }, { label: 'French', value: 'Fr' }] }),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelSupportLanguages') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.supportLanguages, name: 'supportLanguages', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelDropSensorAttached') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.DropSensorAttached, name: 'DropSensorAttached', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelCardReaderType') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.CCReaderType, name: 'CCReaderType', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelVMCPlatform') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.VMCPlatform, name: 'VMCPlatform', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelMachineCount') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.MachineCount, name: 'MachineCount', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelCOMPort') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.VMCControlCOMPort, name: 'VMCControlCOMPort', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelSalesTaxRate') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.SalesTaxRate, name: 'SalesTaxRate', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelShoppingCartMaxItemCount') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.ShoppingCartMaxItemCount, name: 'ShoppingCartMaxItemCount', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelHasShoppingCart') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.bHasShoppingCart, name: 'bHasShoppingCart', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelSingleProductDonation') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.singleProductDonation, name: 'singleProductDonation', onChange: this.textChange.bind(this) })
	            ),
	            _react2.default.createElement(
	              _E.FormField,
	              { label: Translate.translate('AdminSettings', 'LabelMinimumDonationAmount') },
	              _react2.default.createElement(_E.FormInput, { _vkenabled: 'true', value: this.state.minimumDonationAmount, name: 'minimumDonationAmount', onChange: this.textChange.bind(this) })
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            { sm: '50%', md: '50%', lg: '50%', style: { textAlign: 'center' } },
	            _react2.default.createElement(
	              _E.Button,
	              { size: 'lg', type: 'primary', onClick: this.save.bind(this) },
	              'Save Changes'
	            )
	          ),
	          _react2.default.createElement(
	            _E.Col,
	            { sm: '50%', md: '50%', lg: '50%', style: { textAlign: 'center' } },
	            _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	                _reactRouter.Link,
	                { to: '/Admin/Home' },
	                Translate.translate('AdminHome', 'Home')
	              ) })
	          )
	        )
	      );
	    }
	  }]);

	  return AdminSettings;
	}(_react.Component);

	exports.default = AdminSettings;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _AdminStore = __webpack_require__(79);

	var _AdminStore2 = _interopRequireDefault(_AdminStore);

	var _AdminActions = __webpack_require__(78);

	var _AdminActions2 = _interopRequireDefault(_AdminActions);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var AdminStorefrontData = function (_Component) {
	  _inherits(AdminStorefrontData, _Component);

	  function AdminStorefrontData(props, context) {
	    _classCallCheck(this, AdminStorefrontData);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AdminStorefrontData).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      refreshingData: false
	    };

	    _this._onAdminStoreChange = _this._onAdminStoreChange.bind(_this);

	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(AdminStorefrontData, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _AdminStore2.default.addChangeListener(this._onAdminStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _AdminStore2.default.removeChangeListener(this._onAdminStoreChange);
	    }
	  }, {
	    key: '_onAdminStoreChange',
	    value: function _onAdminStoreChange(event) {
	      if (event.type === _appConstants2.default.STOREFRONT_DATA_REFRESHED) {
	        this.setState({
	          refreshingData: false
	        });
	        // refresh the client once this is done:
	        _StorefrontActions2.default.loadStorefrontData();
	      }
	    }
	  }, {
	    key: 'startRefresh',
	    value: function startRefresh(e) {
	      if (e) e.preventDefault();
	      this.setState({
	        refreshingData: true
	      });
	      _AdminActions2.default.refreshStorefrontData();
	    }
	  }, {
	    key: 'renderRefreshButton',
	    value: function renderRefreshButton() {
	      if (!this.state.refreshingData) {
	        return _react2.default.createElement(
	          _E.Button,
	          { type: 'primary', size: 'lg', onClick: this.startRefresh.bind(this) },
	          'Refresh Store Data'
	        );
	      }
	      return _react2.default.createElement(
	        'p',
	        null,
	        _react2.default.createElement(
	          'em',
	          null,
	          'refresh in progress, wait a moment please'
	        )
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'AdminStorefrontData', style: { width: '60%', margin: '1em auto', textAlign: 'center' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300 } },
	            'Refresh Storefront Data'
	          ),
	          _react2.default.createElement(
	            'p',
	            { style: { fontSize: '1.3em' } },
	            'This function will pull in new Products, Categories, and Planogram',
	            _react2.default.createElement('br', null),
	            '(product setup grid) from the Client Portal for this machine.',
	            _react2.default.createElement('br', null),
	            _react2.default.createElement('br', null),
	            'Please note that doing this can have an affect on',
	            _react2.default.createElement('br', null),
	            'physical placement of products,',
	            _react2.default.createElement('br', null),
	            'so be mindful of what you are doing.'
	          ),
	          _react2.default.createElement(
	            'p',
	            { style: { margin: '40px auto' } },
	            ' '
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } }),
	            _react2.default.createElement(
	              _E.Col,
	              { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	              this.renderRefreshButton()
	            ),
	            _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } })
	          ),
	          _react2.default.createElement(
	            'p',
	            { style: { margin: '40px auto' } },
	            ' '
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } }),
	            _react2.default.createElement(
	              _E.Col,
	              { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } },
	              _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	                  _reactRouter.Link,
	                  { to: '/Admin/Home' },
	                  Translate.translate('AdminHome', 'Home')
	                ) })
	            ),
	            _react2.default.createElement(_E.Col, { sm: '1/3', md: '1/3', lg: '1/3', style: { textAlign: 'center' } })
	          )
	        )
	      );
	    }
	  }]);

	  return AdminStorefrontData;
	}(_react.Component);

	exports.default = AdminStorefrontData;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('AdminSystemInfo');

	var System_Info = function (_Component) {
	  _inherits(System_Info, _Component);

	  function System_Info(props, context) {
	    _classCallCheck(this, System_Info);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(System_Info).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      versionInfos: null
	    };
	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(System_Info, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      _TsvActions2.default.apiCall('enumerateComponents', function (err, data) {
	        Big.log('enumerateComponents');
	        Big.log(data);
	        _this2.setState({ versionInfos: data });
	      });
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.state.versionInfos) {
	        return _react2.default.createElement(
	          'h2',
	          null,
	          'Loading, one moment please...'
	        );
	      }
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'systemInfo', style: { maxWidth: '50%', margin: '0 auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { fontWeight: 300 } },
	            'System Info'
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              null,
	              this.state.versionInfos ? this.state.versionInfos.map(function (versionInfo, $index) {
	                return _react2.default.createElement(
	                  _E.Row,
	                  { key: $index },
	                  _react2.default.createElement(
	                    _E.Col,
	                    { basis: '1/2' },
	                    versionInfo.name
	                  ),
	                  _react2.default.createElement(
	                    _E.Col,
	                    { basis: '1/2' },
	                    versionInfo.versionString
	                  )
	                );
	              }) : null
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }]);

	  return System_Info;
	}(_react.Component);

	exports.default = System_Info;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var AdminVms = function (_Component) {
	  _inherits(AdminVms, _Component);

	  function AdminVms(props, context) {
	    _classCallCheck(this, AdminVms);

	    // MUST call super() before any this.*
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(AdminVms).call(this, props, context));
	    //TsvSettingsStore.setSession('currentView', 'AdminVms');
	  }

	  _createClass(AdminVms, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    /*
	      lastHeartbeatTime() {
	        TsvActions.apiCall('lastHeartbeatTime', (err, lastBeat) => {
	          this.setState({
	            lastHeartbeatTime: lastBeat
	          })
	        });
	      }
	    
	      heartBeatNow() {
	        TsvActions.apiCall('heartBeatNow', () => {
	          this.lastHeartbeatTime();
	        });
	      }
	    
	      // Add change listeners to stores
	      componentDidMount() {
	        TsvActions.apiCall('enumerateComponents', (err, data) => {
	           this.setState({ versionInfos: data })
	        })
	      }
	    
	      // Remove change listers from stores
	      componentWillUnmount() {
	      }
	    */

	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'component', style: { maxWidth: '50%', margin: '0 auto' } },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            _E.Button,
	            { size: 'lg', onClick: function onClick() {
	                window.location.reload();
	              } },
	            'Restart GUI'
	          ),
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Admin/Home' },
	              Translate.translate('AdminHome', 'Home')
	            ) })
	        )
	      );
	    }
	  }]);

	  return AdminVms;
	}(_react.Component);

	exports.default = AdminVms;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _VendCartItem = __webpack_require__(93);

	var _VendCartItem2 = _interopRequireDefault(_VendCartItem);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CardVending');

	var CardVending = function (_Component) {
		_inherits(CardVending, _Component);

		function CardVending(props, context) {
			_classCallCheck(this, CardVending);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CardVending).call(this, props, context));
			// MUST call super() before any this.*


			_TsvSettingsStore2.default.setConfig('bDisplayCgryNavigation', false);
			(0, _TsvUtils.updateCredit)();
			_TsvActions2.default.apiCall('enablePaymentDevice', 'PAYMENT_TYPE_CREDIT_CARD');

			_this.state = {
				cart: _TsvSettingsStore2.default.getCache('shoppingCart.detail'),
				// testing, this fails: (so setting differently below)
				//item: TsvSettingsStore.getCache('shoppingCart.detail')[0],
				summary: _TsvSettingsStore2.default.getCache('shoppingCart.summary'),
				showCancelBtn: true,
				cardTransactionResponse: Translate.translate('CardVending', 'InstructionMessage')
			};

			_this.state.item = _this.state.cart && _this.state.cart.length ? _this.state.cart[0] : false;

			/*
	      if (TsvSettingsStore.getSession('cardMsg')!= Translate.translate('ProcessingMessage')
	  		&& TsvSettingsStore.getSession('cardMsg')!= Translate.translate('VendingMessage')
	  		&& TsvSettingsStore.getSession('cardMsg')!= Translate.translate('InstructionMessage')
	  		) {
	  		TsvService.startCardErrorTimer();
	  	}
	  */

			if (_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
				_this.state.showSpinner = true;
				_this.state.cardTransactionResponse = Translate.translate('CardVending', "VendingMessage");
				_this.state.showCancelBtnCash = false;
			}

			//if (!this.state.summary || (this.state.summary && this.state.summary.TotalPrice < 0.01)) {
			if (_this.state.summary && _this.state.summary.TotalPrice < 0.01) {
				Big.warn("this.summary.TotalPrice: " + _this.summary.TotalPrice);
				Big.warn("this.summary.TotalPrice less than 0.01 should start vend");
				_this.startVend();
			}

			_this._onTsvChange = _this._onTsvChange.bind(_this);

			(0, _TsvUtils.resetPaymentTimer)();

			return _this;
		}

		/****
	 >> dev note: below notes are way way stale, since Tsv has been blown into Flux. <<
	    KENT NOTE: TsvService.startVend() is called in other numerous places,
	   and is usually ONLY wrapped in a function,
	   that is triggered on an event after a TsvService.subscribe() call
	    this is the only place where there is an optional no-event-driven startVend()
	   see below, this looks suspect:
	     if ($scope.summary.TotalPrice < 0.01) {
	    seems weird that the TotalPrice can sneak up on the app and suddenly be completed,
	    maybe bad logic surrounding the Credit Card processing etc?
	     assume it will be solved with better state management that we're doing.
	  ****/

		_createClass(CardVending, [{
			key: 'startVend',
			value: function startVend() {
				_TsvActions2.default.apiCall('disablePaymentDevice');
				_TsvActions2.default.apiCall('startVend');
				(0, _TsvUtils.killTimers)();
				(0, _TsvUtils.setVendingInProcessFlag)();
				_TsvSettingsStore2.default.setSession('cardMsg', Translate.translate("CardVending", "Vending", "Vending"));
				//TsvActions.apiCall("Card Approved should vend...");

				this.setState({
					cardTransactionRespose: Translate.translate("CardVending", "Vending", "Vending"),
					showSpinner: true,
					showCancelBtn: false
				});
			}
		}, {
			key: 'cancel',
			value: function cancel() {
				_TsvActions2.default.apiCall('disablePaymentDevice');
				(0, _TsvUtils.killTimers)('paymentTimer');
				(0, _TsvUtils.emptyCart)();
				(0, _TsvUtils.gotoDefaultIdlePage)();
			}

			// Add change listeners to stores

		}, {
			key: 'cardTransactionHandler',
			value: function cardTransactionHandler(level) {

				(0, _TsvUtils.killTimers)('cardErrorTimer');
				var msg,
				    showSpinner = false;

				if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {

					switch (level) {
						case "CARD_INSERTED":
							msg = Translate.translate("CardVending", "ProcessingMessage");
							showSpinner = true;
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						case "CARD_PROCESSING":
							msg = Translate.translate("CardVending", "ProcessingMessage");
							showSpinner = true;
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						case "CARD_APPROVED":
							msg = Translate.translate("CardVending", "CardAccepted");
							this.startVend();
							break;

						case "CARD_INVALID_READ":
							msg = Translate.translate("CardVending", "CardInvalidMessage");
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						case "CARD_DECLINED":
							msg = Translate.translate("CardVending", "CardDeclinedMessage");
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						case "CARD_CONNECTION_FAILURE":
							msg = Translate.translate("CardVending", "CardConnectionErrorMessage");
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						case "CARD_UNKNOWN_ERROR":
							msg = Translate.translate("CardVending", "CardUnknownErrorMessage");
							(0, _TsvUtils.resetPaymentTimer)();
							break;

						default:
							Big.log("CardVending Got event cardTransactionResponse()default: " + level);
							msg = Translate.translate("CardVending", "ErrorMessage");
							(0, _TsvUtils.resetPaymentTimer)();
							break;
					}

					this.setState({
						cardTransactionResponse: msg,
						showSpinner: showSpinner
					});
				}
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				_TsvStore2.default.addChangeListener(this._onTsvChange);
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvChange);
			}
		}, {
			key: '_onTsvChange',
			value: function _onTsvChange(event) {
				if (event && event.method) {
					switch (event.method) {
						case 'vendResponse':
							(0, _TsvUtils.vendResponse)(event.data); //processStatus);
							(0, _TsvUtils.killTimers)('paymentTimer');
							break;
						case 'cardTransactionResponse':
							this.cardTransactionHandler(event.data);
							break;
					}
				}
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					_E.Row,
					{ className: 'CardVending' },
					_react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h2',
							null,
							Translate.translate('CardVending', 'CardVending')
						),
						_react2.default.createElement(
							_E.Row,
							null,
							this.state.cart ? this.state.cart.map(function (prd, $index) {
								return _react2.default.createElement(_VendCartItem2.default, {
									key: $index,
									data: prd
								});
							}) : _react2.default.createElement(
								'p',
								null,
								'No cart products found! probably testing'
							)
						),
						this.state.summary && this.state.summary.TotalPrice >= 1 ? this.renderTotalPriceLabel() : null,
						_react2.default.createElement(
							'p',
							{ id: 'cardResponse' },
							this.state.cardTransactionResponse || 'no msg yet'
						),
						this.state.showSpinner ? this.renderSpinner() : null,
						_react2.default.createElement('img', { id: 'creditCards', src: '/gfx/creditcards.png', alt: 'creditcards' }),
						this.state.showCancelBtnCash ? this.renderCancelBtnCash() : null
					)
				);
			}
		}, {
			key: 'renderCancelBtnCash',
			value: function renderCancelBtnCash() {
				return _react2.default.createElement(
					_E.Button,
					{ type: 'warning', onClick: this.cancel.bind(this) },
					'Cancel'
				) /*<img src="../Images/cancel.png" onClick={this.cancel()} />*/
				;
			}
		}, {
			key: 'renderTotalPriceLabel',
			value: function renderTotalPriceLabel() {
				return _react2.default.createElement(
					'p',
					null,
					' ',
					Translate.translate('CardVending', 'TotalPriceLabel'),
					(0, _TsvUtils.currencyFilter)(this.summary.TotalPrice)
				);
			}
		}, {
			key: 'renderSpinner',
			value: function renderSpinner() {
				Big.warn('render spinner!!!!');
				return _react2.default.createElement(
					'div',
					{ style: { margin: '0 auto 2em' } },
					_react2.default.createElement(_E.Spinner, { size: 'lg', type: 'primary', style: { margin: '0 auto 2em' } })
				);
			}
		}]);

		return CardVending;
	}(_react.Component);

	exports.default = CardVending;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvUtils = __webpack_require__(67);

	var _VendCartItem = __webpack_require__(93);

	var _VendCartItem2 = _interopRequireDefault(_VendCartItem);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CashVending');

	var CashVending = function (_Component) {
		_inherits(CashVending, _Component);

		function CashVending(props, context) {
			_classCallCheck(this, CashVending);

			//TsvSettingsStore.setSession('currentView', 'CashVending');
			//TsvSettingsStore.setCache('currentLocation', '/CashVending');

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CashVending).call(this, props, context));
			// MUST call super() before any this.*


			_TsvSettingsStore2.default.setConfig('bDisplayCgryNavigation', false);
			(0, _TsvUtils.updateCredit)();
			_TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");

			_this.state = {
				insertedAmount: _TsvSettingsStore2.default.getSession('creditBalance'),
				summary: _TsvSettingsStore2.default.getCache('shoppingCart.summary'),
				hintMsg: Translate.translate('CashVending', 'HintMessageInsertCash'),
				// only in cash.js:
				//salesTaxAmount: TsvSettingsStore.getCache('shoppingCart.summary.salesTaxAmount'),
				showCancelBtnCash: true,
				cart: _TsvSettingsStore2.default.getCache('shoppingCart.detail')
			};

			// only in cash.js:
			//item: TsvSettingsStore.getCache('shoppingCart.detail')[0]
			(0, _TsvUtils.resetPaymentTimer)();

			// KENT note: this session var I believe is not used in Shopping Cart regime, and checkBalance only returns a boolean
			_TsvSettingsStore2.default.setSession('bVendedOldCredit', _this.checkBalance.bind(_this));

			if (_TsvSettingsStore2.default.getSession('bVendingInProcess')) {

				(0, _TsvUtils.killTimers)('paymentTimer');

				_this.state.showSpinner = true;
				_this.state.hintMsg = Translate.translate('CashVending', 'HintMessageVending');
				_this.state.showCancelBtnCash = false;
			} else {
				(0, _TsvUtils.startPaymentTimer)();
			}

			_this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
			_this._onTsvChange = _this._onTsvChange.bind(_this);
			_this.storefrontTimeout = null;

			return _this;
		}

		_createClass(CashVending, [{
			key: 'cancel',
			value: function cancel() {
				// only in cash.js:
				//TsvSettingsStore.setSession('insertedAmount', 0);
				_TsvActions2.default.apiCall('disablePaymentDevice');
				(0, _TsvUtils.killTimers)('paymentTimer');
				(0, _TsvUtils.emptyCart)();
				// only in cash.js:
				//browserHistory.push("/View1");
				(0, _TsvUtils.gotoDefaultIdlePage)();
			}
		}, {
			key: 'checkBalance',
			value: function checkBalance(calculatedBalance) {
				var _this2 = this;

				var total = _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice'),
				    cart_detail = _TsvSettingsStore2.default.getCache('shoppingCart.detail') || [],
				    balance = calculatedBalance || _TsvSettingsStore2.default.getSession('creditBalance');

				Big.log('checkBalance, 3 things:');
				Big.log([total, cart_detail, balance]);

				// cash.js logic:
				//if ((this.insertedAmount * 100) >= (total * 100) && TsvSettingsStore.getCache('shoppingCart.detail', []).length > 0){
				if (balance >= total && cart_detail.length > 0) {

					Big.log('customer has inserted enough money!');

					var creditDue = balance - total;
					if (creditDue) {
						// 1. clear the credit in Paylink
						// 2. push the credit to the customer
						// (logically those should reverse, we should make sure the credit is pushed before we clear....)
						// FIXME later
						_TsvActions2.default.apiCall('resetCreditBalance', function () {
							Big.log(' >>>>>>> customer should receive ' + creditDue + ' in credits to their account!');
						});
					} else {
						Big.log(' >>>>>>> no credit due.');
					}

					_TsvActions2.default.apiCall('disablePaymentDevice', function () {
						Big.log('... payment device disabled');
						if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
							Big.log('... vending was not in process, so vend away...!!!!!');
							// only in cash.js:
							_TsvSettingsStore2.default.setSession('bVendingInProcess', true);
							_TsvActions2.default.apiCall('startVend');
							Big.log('... start vend has been called');
							_this2.setState({
								hintMsg: Translate.translate('CashVending', 'HintMessageVending'),
								showCancelBtnCash: false,
								showSpinner: true,
								vendingItem: null
							});
						} else {
							Big.log('... vending WAS IN process, error maybe?');
						}
					});
					if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
						Big.warn('checkBalance() returning true');
						return true;
					}
					Big.warn('checkBalance() returning false [1]');
					return false;
				}
				Big.warn('checkBalance() returning false [2]');
				Big.log([cart_detail, balance]);
				return false;
			}

			// Add change listeners to stores

		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				_TsvStore2.default.addChangeListener(this._onTsvChange);
				_TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
				// let's check the balance at module load:
				this.checkBalance();
				_TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
					if (err) Big.throw(err);
					_TsvSettingsStore2.default.setCache('shoppingCart', data);
				});
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvChange);
				_TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
			}
		}, {
			key: '_onRootstoreChange',
			value: function _onRootstoreChange() {
				var data = _TsvSettingsStore2.default.getCache('shoppingCart');
				/*
	   	if (this.state.loadedCartOnce && (!data.detail || !data.detail.length)) {
	   	  	//gotoDefaultIdlePage();
	   		browserHistory.push('/Storefront');
	   
	   	} else {
	   	*/
				this.setState({
					cart: data.detail,
					summary: data.summary,
					loadedCartOnce: true
				});
				//}
			}
		}, {
			key: '_onTsvChange',
			//vendingItem: data.detail && data.detail.length ? data.detail[0] : null
			value: function _onTsvChange(event) {
				if (event && event.method) {
					if (!event.data.length) {
						Big.error('method "' + event.method + '", but no args or data???');
						Big.log(event);
						return;
					}
					switch (event.method) {
						case 'creditBalanceChanged':
							var ins = event.data[0];
							var balance = event.data[1];

							if (this.state.summary && this.state.summary.TotalPrice) {
								Big.warn('hmmmm maybe we need to fix the creditBalance calc? mine:[' + balance / 100.00 + '], other:[' + (this.state.summary.TotalPrice - balance / 100.00) + ']' + "\n\n ... but maybe it gets taken care of local method 'checkBalance'");
							}
							// only in cash.js:
							//TsvSettingsStore.setSession('creditBalance', this.state.summary.TotalPrice - balance/100.00);

							var state = {
								insertedAmount: balance / 100.00
							};

							if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
								state.hintMsg = Translate.translate('CashVending', 'HintMessageVending');
								state.showSpinner = true;
								state.showCancelBtnCash = false;
							}

							this.setState(state);

							(0, _TsvUtils.resetPaymentTimer)();
							_TsvSettingsStore2.default.setSession('creditBalance', state.insertedAmount);
							this.checkBalance(state.insertedAmount);
							break;

						case 'cardTransactionRespose':
							if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
								(0, _TsvUtils.cardTransaction)(event.data[0]);
								_reactRouter.browserHistory.push("/CardVending");
							}
							break;

						case 'vendResponse':
							(0, _TsvUtils.vendResponse)(event.data[0]);
							(0, _TsvUtils.killTimers)('paymentTimer');
							break;

						case 'notifyVendingItem':
							//Big.log('vendingItem');
							//Big.log(event.data[0]);
							this.setState({
								vendingItem: event.data[0]
							});
							break;

						case 'notifyVmsEvent':
							Big.warn('notifyVmsEvent received, probably should start pushing these to the server!');
							Big.log(event.data);
							break;
					}
				}
			}
		}, {
			key: 'render',
			value: function render() {
				if (this.storefrontTimeout) {
					clearTimeout(this.storefrontTimeout);
				}
				if (this.state.vendingComplete) {
					_reactRouter.browserHistory.push('/ThankYouMsg');
					return _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'h1',
							null,
							'Vending complete!'
						)
					);
				}
				if (!this.state.cart || !this.state.cart.length) {
					this.storefrontTimeout = setTimeout(function () {
						_reactRouter.browserHistory.push('/Storefront');
					}, 5000);
					return _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'h1',
							null,
							'Error: no cart items found to purchase, sorry!'
						),
						_react2.default.createElement(_E.Button, { component: _react2.default.createElement(
								_reactRouter.Link,
								{ to: '/Storefront' },
								'Storefront'
							) })
					);
				}
				return _react2.default.createElement(
					_E.Row,
					null,
					_react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h2',
							null,
							'Insert cash to complete your purchase'
						),
						_react2.default.createElement(
							_E.Col,
							null,
							this.state.cart.map(function (prd, $index) {
								return _react2.default.createElement(_VendCartItem2.default, {
									key: $index,
									data: prd
								});
							})
						)
					),
					this.hintMsg ? _react2.default.createElement(
						'p',
						{ id: 'hint' },
						this.hintMsg
					) : null,
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/6', sm: '1/6', md: '1/6', lg: '1/6' },
						' '
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
						_react2.default.createElement(
							'p',
							{ style: { fontSize: '2em', textAlign: 'center' } },
							Translate.translate('CashVending', 'TotalAmountLabel'),
							' Total: ',
							_react2.default.createElement(
								'strong',
								null,
								(0, _TsvUtils.currencyFilter)(this.state.summary.TotalPrice)
							)
						)
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
						_react2.default.createElement(
							'p',
							{ style: { fontSize: '2em', textAlign: 'center' } },
							Translate.translate('CashVending', 'InsertedAmountLabel'),
							' ',
							_react2.default.createElement(
								'strong',
								null,
								'$',
								this.state.insertedAmount ? (0, _TsvUtils.currencyFilter)(this.state.insertedAmount) : '0.00'
							)
						)
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/6', sm: '1/6', md: '1/6', lg: '1/6' },
						' '
					),
					this.state.showCancelBtnCash ? _react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								' '
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								_react2.default.createElement(
									_E.Button,
									{ type: 'primary', size: 'lg', onClick: function onClick() {
											_reactRouter.browserHistory.push('/Storefront');
										} },
									Translate.translate('ShoppingCart', 'Shop_More')
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								_react2.default.createElement(
									_E.Button,
									{ type: 'danger', size: 'lg', onClick: this.cancel.bind(this) },
									_react2.default.createElement(_E.Glyph, { icon: 'circle-slash' }),
									'Cancel Transaction'
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								' '
							)
						)
					) : null,
					this.renderVendingItem()
				);
			}
		}, {
			key: 'renderVendingItem',
			value: function renderVendingItem() {
				if (this.state.vendingItem) {
					return _react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h1',
							{ style: { textAlign: 'center' } },
							'Vending item:',
							_react2.default.createElement('br', null),
							_react2.default.createElement(
								'strong',
								null,
								this.state.vendingItem.productName
							)
						),
						_react2.default.createElement(
							'div',
							{ style: { textAlign: 'center' } },
							_react2.default.createElement(_E.Spinner, { size: 'lg', type: 'primary' }),
							this.state.vendingItem.imagePath ? _react2.default.createElement('img', { src: this.state.vendingItem.imagePath, style: { maxWidth: '35%', display: 'block', margin: '1em auto' } }) : null
						)
					);
				}
				return null;
			}
		}, {
			key: 'renderSpinner',
			value: function renderSpinner() {
				return _react2.default.createElement(_E.Spinner, { size: 'md', type: 'inverted' });
			}
		}]);

		return CashVending;
	}(_react.Component);

	exports.default = CashVending;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var ChooseCashCard = function (_Component) {
	  _inherits(ChooseCashCard, _Component);

	  function ChooseCashCard(props, context) {
	    _classCallCheck(this, ChooseCashCard);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ChooseCashCard).call(this, props, context));
	    // MUST call super() before any this.*


	    _TsvSettingsStore2.default.setConfig('bDisplayCgryNavigation', false);
	    (0, _TsvUtils.updateCredit)();

	    return _this;
	  }

	  _createClass(ChooseCashCard, [{
	    key: 'cancel',
	    value: function cancel() {
	      (0, _TsvUtils.emptyCart)();
	      _reactRouter.browserHistory.push('/Storefront');
	    }
	  }, {
	    key: 'customerCredit',
	    value: function customerCredit() {
	      //TsvActions.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");
	      _reactRouter.browserHistory.push("/CustomerCreditVending");
	    }
	  }, {
	    key: 'cash',
	    value: function cash() {
	      _TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");
	      _reactRouter.browserHistory.push("/CashVending");
	    }
	  }, {
	    key: 'card',
	    value: function card() {
	      _TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CREDIT_CARD");
	      _reactRouter.browserHistory.push("/CardVending");
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      if (event && event.method == 'cardTransactionResponse') {
	        if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
	          var level = event.data;
	          cardTransaction(level);
	          _reactRouter.browserHistory.push("/CardVending");
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'CashCard' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h2',
	            null,
	            Translate.translate('CashCard', 'InstructionMessage')
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              { sm: '1/3' },
	              _react2.default.createElement(
	                _E.Button,
	                { type: 'primary', size: 'lg', onClick: this.customerCredit },
	                'Pay with Customer Credit'
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { sm: '1/3' },
	              _react2.default.createElement('img', { className: 'paymentMethod', onClick: this.cash, src: Translate.localizedImage('cash.png'), alt: 'cash', style: { maxWidth: '90%' } })
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { sm: '1/3' },
	              _react2.default.createElement('img', { className: 'paymentMethod', onClick: this.card, src: Translate.localizedImage('card.png'), alt: 'card', style: { maxWidth: '90%' } })
	            )
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              null,
	              _react2.default.createElement(
	                'h1',
	                null,
	                ' '
	              )
	            )
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
	              ' '
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
	              _react2.default.createElement(
	                _E.Button,
	                { type: 'primary', size: 'lg', onClick: function onClick() {
	                    _reactRouter.browserHistory.push('/Storefront');
	                  } },
	                Translate.translate('ShoppingCart', 'Shop_More')
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
	              _react2.default.createElement(
	                _E.Button,
	                { type: 'danger', size: 'lg', onClick: this.cancel.bind(this) },
	                _react2.default.createElement(_E.Glyph, { icon: 'circle-slash' }),
	                Translate.translate('ShoppingCart', 'Cancel')
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
	              ' '
	            )
	          )
	        )
	      );
	      /*
	      return (
	        <div className="CashCard">
	        <h2>{Translate.translate('CashCard', 'InstructionMessage')}</h2>
	         <div className="cashAndCards">
	             <img className="paymentMethod" onClick={this.cash()} src={Translate.localizedImage('cash.png')} alt="cash">
	             <img className="paymentMethod" onClick={this.card()} src={Translate.localizedImage('card.png')} alt="card">
	         </div>
	         <img src={Translate.localizedImage('cancel.png')} onClick={this.cancel()} />
	         </div>
	      );
	      */
	    }
	  }]);

	  return ChooseCashCard;
	}(_react.Component);

	exports.default = ChooseCashCard;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _CustomerLoginActions = __webpack_require__(80);

	var _CustomerLoginActions2 = _interopRequireDefault(_CustomerLoginActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _Step = __webpack_require__(82);

	var _Step2 = _interopRequireDefault(_Step);

	var _Step3 = __webpack_require__(83);

	var _Step4 = _interopRequireDefault(_Step3);

	var _Matching = __webpack_require__(84);

	var _Matching2 = _interopRequireDefault(_Matching);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _utils = __webpack_require__(5);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CustomerLogin');

	var CustomerLogin = function (_Component) {
	  _inherits(CustomerLogin, _Component);

	  function CustomerLogin(props, context) {
	    _classCallCheck(this, CustomerLogin);

	    //TsvSettingsStore.setSession('currentView', 'CustomerLogin');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomerLogin).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      params: _this.props.params,
	      loginToken: null
	    };

	    _this._onCLStoreChange = _this._onCLStoreChange.bind(_this);
	    _this.tryAgain = _this.tryAgain.bind(_this);
	    return _this;
	  }

	  _createClass(CustomerLogin, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCLStoreChange);
	      _CustomerLoginActions2.default.clearSteps();
	      // reset the login token on mount, should take care of retries, timeouts, etc
	      this.setState({
	        loginToken: (0, _utils.uniq)()
	      });
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCLStoreChange);
	      // causing invariant error (dispatch problem)...
	      // moving to componentDidMount()
	      //CL_Actions.clearSteps();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      Big.log('componentWillReceiveProps(nextProps)');
	      Big.log(nextProps);
	      if (nextProps.params) {
	        this.setState({
	          params: nextProps.params
	        });
	      }
	    }
	  }, {
	    key: '_onCLStoreChange',
	    value: function _onCLStoreChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      switch (event.type) {
	        case _appConstants2.default.LICENSE_SCANNED_LOGIN:
	          if (event.status === 'ok') {
	            // go to next login step:
	            _reactRouter.browserHistory.push('/CustomerLogin/Step2');
	          }
	          break;

	        case _appConstants2.default.PRINT_SCANNED_LOGIN:
	          if (event.status === 'ok') {
	            // go to next login step:
	            _reactRouter.browserHistory.push('/CustomerLogin/Matching');
	          }
	          break;

	        case _appConstants2.default.CUSTOMER_MATCHED_LOGIN:
	          if (event.status === 'ok') {
	            // yay we are logged in!
	            var customer = _CustomerStore2.default.getCustomer();
	            if (customer) {
	              // FIXME: calling this action in sequence results in Invariant Violation: Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.
	              // moved to componentWillUnmount:
	              /*
	              setTimeout(() => {
	              	CL_Actions.clearSteps();
	              }, 100);
	              */
	              return _reactRouter.browserHistory.push('/Storefront');
	            }
	          }
	          _reactRouter.browserHistory.push('/CustomerLogin/FAIL');
	          break;
	      }
	    }
	  }, {
	    key: 'tryAgain',
	    value: function tryAgain() {
	      _CustomerLoginActions2.default.customerLogout();
	      _reactRouter.browserHistory.push('/CustomerLogin/Step1');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Customer Login'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Before you can pick products and check out, we need to know who you are. :-)'
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            this.renderStep()
	          )
	        ),
	        this.renderSignup()
	      );
	    }
	  }, {
	    key: 'renderSignup',
	    value: function renderSignup() {
	      if (this.state.params.step !== 'Matching') {
	        return _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h3',
	              null,
	              'First time here? Let\'s register your account!'
	            ),
	            _react2.default.createElement(_E.Button, { type: 'primary', component: _react2.default.createElement(
	                _reactRouter.Link,
	                { to: '/CustomerSignup' },
	                Translate.translate('Customer', 'SignupButtonText')
	              ) }),
	            ' ',
	            _react2.default.createElement(_E.Button, { type: 'success', component: _react2.default.createElement(
	                _reactRouter.Link,
	                { to: '/Storefront' },
	                Translate.translate('ShoppingCart', 'Shop_More')
	              ) })
	          )
	        );
	      }
	      return null;
	    }
	  }, {
	    key: 'renderStep',
	    value: function renderStep() {

	      var WhatStep = void 0;

	      switch (this.state.params.step) {

	        case 'FAIL':
	          return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	              _E.Alert,
	              { type: 'danger' },
	              'Sorry, we couldn\'t find your account.'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              ' '
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'primary', onClick: this.tryAgain },
	              Translate.translate('Customer', 'TryAgainButtonText')
	            ),
	            this.renderSimulator()
	          );
	          break;

	        case 'Matching':
	          WhatStep = _Matching2.default;
	          break;

	        case 'Step2':
	          // finger / thumb print scan
	          WhatStep = _Step4.default;
	          break;

	        case 'Step1': // ID scan
	        default:
	          WhatStep = _Step2.default;
	          break;
	      }

	      if (WhatStep) {
	        return _react2.default.createElement(WhatStep, {
	          loginToken: this.state.loginToken,
	          testing: this.props.appTesting
	        });
	      }

	      Big.warn('renderStep() ... unknown step requested: ' + this.state.params.step);
	      return null;
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.appTesting) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR'
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'login token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.loginToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return CustomerLogin;
	}(_react.Component);

	exports.default = CustomerLogin;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _Step = __webpack_require__(86);

	var _Step2 = _interopRequireDefault(_Step);

	var _Step3 = __webpack_require__(87);

	var _Step4 = _interopRequireDefault(_Step3);

	var _Step5 = __webpack_require__(88);

	var _Step6 = _interopRequireDefault(_Step5);

	var _Step7 = __webpack_require__(89);

	var _Step8 = _interopRequireDefault(_Step7);

	var _Step9 = __webpack_require__(90);

	var _Step10 = _interopRequireDefault(_Step9);

	var _AdminVerify = __webpack_require__(91);

	var _AdminVerify2 = _interopRequireDefault(_AdminVerify);

	var _Registering = __webpack_require__(92);

	var _Registering2 = _interopRequireDefault(_Registering);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _utils = __webpack_require__(5);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CustomerSignup');

	var CustomerSignup = function (_Component) {
	  _inherits(CustomerSignup, _Component);

	  function CustomerSignup(props, context) {
	    _classCallCheck(this, CustomerSignup);

	    //TsvSettingsStore.setSession('currentView', 'CustomerSignup');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomerSignup).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      params: _this.props.params,
	      signupToken: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);
	    _this.tryAgain = _this.tryAgain.bind(_this);
	    return _this;
	  }

	  _createClass(CustomerSignup, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	      _CustomerSignupActions2.default.clearSteps();
	      // reset the signup token on mount, should take care of retries, timeouts, etc
	      this.setState({
	        signupToken: (0, _utils.uniq)()
	      });
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	      // causing invariant error (dispatch problem)...
	      // moving to componentDidMount()
	      //CS_Actions.clearSteps();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      Big.log('componentWillReceiveProps(nextProps)');
	      Big.log(nextProps);
	      if (nextProps.params) {
	        this.setState({
	          params: nextProps.params
	        });
	      }
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      switch (event.type) {
	        case _appConstants2.default.LICENSE_SCANNED_SIGNUP:
	        case _appConstants2.default.PRINT_1SCANNED_SIGNUP:
	        case _appConstants2.default.PRINT_2SCANNED_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            _reactRouter.browserHistory.push('/CustomerSignup/Step2');
	          }
	          break;
	        /*
	          		case appConstants.PRINT_SCANNED_SIGNUP:
	        			if (event.status === 'ok') {
	        				// go to next signup step:
	        				browserHistory.push('/CustomerSignup/Step3');
	        			}
	          			break;
	        */
	        case _appConstants2.default.PRINT_3SCANNED_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            _reactRouter.browserHistory.push('/CustomerSignup/Step3');
	          }
	          break;

	        case _appConstants2.default.PHOTO_TAKEN_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            _reactRouter.browserHistory.push('/CustomerSignup/Step4');
	          }
	          break;

	        case _appConstants2.default.MOBILE_NUMBER_CAPTURED_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            _reactRouter.browserHistory.push('/CustomerSignup/Step5');
	          }
	          break;

	        case _appConstants2.default.EMAIL_CAPTURED_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            /*
	            if (unattendedAdminMode) {
	            	return browserHistory.push('/CustomerSignup/Registering');
	            }
	            */
	            _reactRouter.browserHistory.push('/CustomerSignup/AdminVerify');
	          }
	          break;

	        case _appConstants2.default.ADMIN_VERIFIED_SIGNUP:
	          if (event.status === 'ok') {
	            // go to next signup step:
	            _reactRouter.browserHistory.push('/CustomerSignup/Registering');
	          }
	          break;

	        case _appConstants2.default.CUSTOMER_REGISTERED_SIGNUP:
	          if (event.status === 'ok') {
	            // yay we are logged in!
	            var customer = _CustomerStore2.default.getCustomer();
	            if (customer) {
	              // FIXME: calling this action in sequence results in Invariant Violation: Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.
	              // moved to componentWillUnmount:
	              /*
	              setTimeout(() => {
	              	CS_Actions.clearSteps();
	              }, 100);
	              */
	              return _reactRouter.browserHistory.push('/Storefront');
	            }
	          }
	          _reactRouter.browserHistory.push('/CustomerSignup/FAIL');
	          break;
	      }
	    }
	  }, {
	    key: 'tryAgain',
	    value: function tryAgain() {
	      //CS_Actions.customerLogout();
	      _CustomerSignupActions2.default.clearSteps();
	      _reactRouter.browserHistory.push('/CustomerSignup/Step1');
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Customer Signup'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Before you can pick products and check out, we need to know who you are. :-)'
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            this.renderStep()
	          )
	        ),
	        this.renderLogin()
	      );
	    }
	  }, {
	    key: 'renderLogin',
	    value: function renderLogin() {
	      if (this.state.params.step !== 'Registering') {
	        return _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h3',
	              null,
	              'Already signed up? Go back to the signup page'
	            ),
	            _react2.default.createElement(_E.Button, { type: 'primary', component: _react2.default.createElement(
	                _reactRouter.Link,
	                { to: '/CustomerLogin' },
	                Translate.translate('Customer', 'LoginButtonText')
	              ) }),
	            ' ',
	            _react2.default.createElement(_E.Button, { type: 'success', component: _react2.default.createElement(
	                _reactRouter.Link,
	                { to: '/Storefront' },
	                Translate.translate('ShoppingCart', 'Shop_More')
	              ) })
	          )
	        );
	      }
	      return null;
	    }
	  }, {
	    key: 'renderStep',
	    value: function renderStep() {

	      var WhatStep = void 0;

	      switch (this.state.params.step) {

	        case 'FAIL':
	          return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	              _E.Alert,
	              { type: 'danger' },
	              'Sorry, there was a problem registering your account.'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              ' '
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'primary', onClick: this.tryAgain },
	              Translate.translate('Customer', 'TryAgainButtonText')
	            ),
	            this.renderSimulator()
	          );
	          break;

	        case 'Registering':
	          WhatStep = _Registering2.default;
	          break;

	        case 'AdminVerify':
	          // ADMIN thumb (unless "unattended admin" mode)
	          WhatStep = _AdminVerify2.default;
	          break;

	        case 'Step5':
	          // email
	          WhatStep = _Step10.default;
	          break;

	        case 'Step4':
	          // mobile
	          WhatStep = _Step8.default;
	          break;

	        case 'Step3':
	          // photo
	          WhatStep = _Step6.default;
	          break;

	        case 'Step2':
	          // thumb scan
	          WhatStep = _Step4.default;
	          break;

	        case 'Step1': // license
	        default:
	          WhatStep = _Step2.default;
	          break;
	      }

	      if (WhatStep) {
	        return _react2.default.createElement(WhatStep, {
	          signupToken: this.state.signupToken,
	          testing: this.props.appTesting
	        });
	      }

	      Big.warn('renderStep() ... unknown step requested: ' + this.state.params.step);
	      return null;
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.appTesting) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR'
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'signup token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return CustomerSignup;
	}(_react.Component);

	exports.default = CustomerSignup;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _reactRouter = __webpack_require__(9);

	var _ShoppingCartMini = __webpack_require__(95);

	var _ShoppingCartMini2 = _interopRequireDefault(_ShoppingCartMini);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('ProductDetail');

	var ProductDetail = function (_Component) {
	  _inherits(ProductDetail, _Component);

	  function ProductDetail(props, context) {
	    _classCallCheck(this, ProductDetail);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ProductDetail).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      loadedAtLeastOnce: false,
	      modalIsOpen: false,
	      product: {}
	    };
	    _this._onStoreFrontChange = _this._onStoreFrontChange.bind(_this);
	    return _this;
	  }

	  _createClass(ProductDetail, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _StorefrontStore2.default.addChangeListener(this._onStoreFrontChange);
	      this.setState({
	        loadedAtLeastOnce: true,
	        product: _StorefrontStore2.default.decorateProducts(_StorefrontStore2.default.getProductById(this.props.params.productID))
	      });
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _StorefrontStore2.default.removeChangeListener(this._onStoreFrontChange);
	    }
	  }, {
	    key: 'addToCart',
	    value: function addToCart(e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (this.state.product) {
	        _StorefrontActions2.default.addToCart(this.state.product);
	      }
	    }
	  }, {
	    key: '_onStoreFrontChange',
	    value: function _onStoreFrontChange() {}
	  }, {
	    key: 'toggleModal',
	    value: function toggleModal() {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      this.setState({
	        modalIsOpen: !this.state.modalIsOpen
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      if (!this.state.product) {

	        if (this.state.loadedAtLeastOnce) {
	          return _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              null,
	              _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' }),
	              _react2.default.createElement(
	                'h2',
	                null,
	                'Sorry, that product was not found.'
	              ),
	              _react2.default.createElement(_E.Button, { size: 'lg', type: 'default-success', component: _react2.default.createElement(
	                  _reactRouter.Link,
	                  { to: '/Help' },
	                  Translate.translate('ShoppingCart', 'Get_Some_Help')
	                ) }),
	              ' ',
	              _react2.default.createElement(_E.Button, { size: 'lg', type: 'success', component: _react2.default.createElement(
	                  _reactRouter.Link,
	                  { to: '/Storefront' },
	                  Translate.translate('ShoppingCart', 'Shop_More')
	                ) })
	            )
	          );
	        }

	        return _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' }),
	            _react2.default.createElement(
	              'h1',
	              null,
	              'Searching, one moment please...'
	            ),
	            _react2.default.createElement(_E.Spinner, null)
	          )
	        );
	      }

	      var prod = this.state.product;
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' }),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              { className: 'productDetailHeader' },
	              _react2.default.createElement(
	                'h2',
	                { style: { marginBottom: 0, marginTop: '1em', fontSize: '2.7em' } },
	                prod.name
	              ),
	              _react2.default.createElement(
	                'p',
	                null,
	                prod.description
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'div',
	            { className: 'productDetailBody' },
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '50%', className: 'product-preview' },
	                this.renderProductImage(prod)
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '50%' },
	                _react2.default.createElement(
	                  'p',
	                  { className: 'prdPrice' },
	                  'Price $',
	                  (0, _TsvUtils.currencyFilter)(prod.price),
	                  ' '
	                ),
	                this.renderAddToCart(),
	                _react2.default.createElement('hr', { style: { margin: '20px auto', height: '2px' } }),
	                _react2.default.createElement(_E.Button, { size: 'lg', type: 'success', component: _react2.default.createElement(
	                    _reactRouter.Link,
	                    { to: '/Storefront' },
	                    Translate.translate('ShoppingCart', 'Shop_More')
	                  ) })
	              )
	            )
	          )
	        ),
	        prod.imagePath ? _react2.default.createElement(
	          _E.Modal,
	          { isOpen: this.state.modalIsOpen, backdropClosesModal: true },
	          _react2.default.createElement(_E.ModalHeader, { text: 'Image Detail', showCloseButton: true, onClose: this.toggleModal.bind(this) }),
	          _react2.default.createElement(
	            _E.ModalBody,
	            null,
	            _react2.default.createElement('img', { src: prod.imagePath, title: prod.description, className: 'productImageModalDetailView' })
	          )
	        ) : null
	      );
	    }
	  }, {
	    key: 'renderProductImage',
	    value: function renderProductImage(product) {
	      var images = _StorefrontStore2.default.getImagesForProduct(product);
	      if (images && images.length) {
	        return _react2.default.createElement('img', { src: images[0].fileData, title: product.description, className: 'boxShadowed', onClick: this.toggleModal.bind(this) });
	      }
	      Big.log('hmmm no images found?');
	      Big.log(images);
	      return _react2.default.createElement('img', { src: '/gfx/ProductImageNotFound.png', title: product.description, className: 'boxShadowed', onClick: this.toggleModal.bind(this) });
	    }
	  }, {
	    key: 'renderAddToCart',
	    value: function renderAddToCart() {
	      if (this.state.product.stockCount > 0) {
	        return _react2.default.createElement(
	          _E.Button,
	          { className: 'product-button', onClick: this.addToCart.bind(this) },
	          'Add to cart'
	        );
	      }
	      return _react2.default.createElement(
	        'span',
	        { style: { fontSize: '1.1em', textTransform: 'uppercase', textAlign: 'center', display: 'block', float: 'right' } },
	        'out of stock'
	      );
	    }
	  }, {
	    key: 'renderMiniCart',
	    value: function renderMiniCart() {
	      /**** TODO: FIXME: this needs to be a css class, not embedded: ************/
	      /**** ALSO: FIXME: ShoppingCartMini has the same problem: ************/
	      return _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' });
	    }
	  }, {
	    key: 'renderBack',
	    value: function renderBack() {
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_E.Button, { size: 'lg', type: 'success', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/Storefront' },
	              Translate.translate('ShoppingCart', 'Shop_More')
	            ) })
	        )
	      );
	    }
	  }]);

	  return ProductDetail;
	}(_react.Component);

	exports.default = ProductDetail;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _ShoppingCartItem = __webpack_require__(96);

	var _ShoppingCartItem2 = _interopRequireDefault(_ShoppingCartItem);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Big = new _BigLogger2.default('ShoppingCart');

	var ShoppingCart = function (_Component) {
	  _inherits(ShoppingCart, _Component);

	  function ShoppingCart(props, context) {
	    _classCallCheck(this, ShoppingCart);

	    {/* MUST call super() before any this.*/}


	    // bDisplayCgryNavigation2 is not used anywhere that I can see:
	    //TsvSettingsStore.setConfig("bDisplayCgryNavigation2", TsvSettingsStore.getConfig('bDisplayCgryNavigation'));

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ShoppingCart).call(this, props, context));

	    (0, _TsvUtils.updateCredit)();

	    _this.state = {
	      totalPrice: _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice'),
	      cart: _TsvSettingsStore2.default.getCache('shoppingCart.detail'),
	      salesTaxAmount: _TsvSettingsStore2.default.getCache('shoppingCart.summary.salesTaxAmount'),
	      emptyCart: false,
	      bShowCgryNav: true,
	      summary: _TsvSettingsStore2.default.getCache('shoppingCart.summary'),
	      bShowTax: false,
	      bShowCouponBtn: false
	    };

	    //TsvSettingsStore.setConfig('summary', this.state.summary);

	    if (_this.state.salesTaxAmount > 0) {
	      _this.state.bShowTax = true;
	    };

	    if (_TsvSettingsStore2.default.getCache('custommachinesettings.bHasCouponCodes')) {
	      _this.state.bShowCouponBtn = true;
	    }

	    _this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
	    _this._onTsvChange = _this._onTsvChange.bind(_this);
	    return _this;
	  }

	  _createClass(ShoppingCart, [{
	    key: 'cancel',
	    value: function cancel() {
	      emptyCart();
	      //TsvSettingsStore.setConfig('itemsInCart', 0);
	      //gotoDefaultIdlePage();
	      _reactRouter.browserHistory.push('/Storefront');
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
	      _TsvStore2.default.addChangeListener(this._onTsvChange);
	      _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setCache('shoppingCart', data);
	      });
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
	      _TsvStore2.default.removeChangeListener(this._onTsvChange);
	    }
	  }, {
	    key: '_onTsvChange',
	    value: function _onTsvChange(event) {
	      if (event && event.method === 'cardTransactionResponse') {
	        if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
	          (0, _TsvUtils.cardTransaction)(event.data[0]);
	          _reactRouter.browserHistory.push("/CardVending");
	        }
	      }
	    }
	  }, {
	    key: '_onRootstoreChange',
	    value: function _onRootstoreChange() {
	      var data = _TsvSettingsStore2.default.getCache('shoppingCart');

	      if (this.state.loadedCartOnce && (!data.detail || !data.detail.length)) {
	        //gotoDefaultIdlePage();
	        _reactRouter.browserHistory.push('/Storefront');
	      } else {
	        this.setState({
	          cart: data.detail,
	          totalPrice: data.summary.TotalPrice,
	          summary: data.summary,
	          loadedCartOnce: true
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'ShoppingCart' },
	        _react2.default.createElement(
	          'h2',
	          null,
	          Translate.translate('ShoppingCart', 'ShoppingCart')
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'wrapper' },
	          this.renderShoppingCart(),
	          this.state.cart && this.state.cart.length ? _react2.default.createElement(
	            _E.Row,
	            { className: 'row-border shopping-cart-table' },
	            this.state.bShowTax ? this.renderShowTax() : null,
	            _react2.default.createElement(
	              'p',
	              null,
	              Translate.translate('ShoppingCart', 'TotalPrice'),
	              ': ',
	              this.getTotalPrice()
	            )
	          ) : _react2.default.createElement(
	            'p',
	            { style: { margin: '40px auto' } },
	            ' '
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
	              _react2.default.createElement(
	                _E.Button,
	                { type: 'primary', size: 'lg', onClick: function onClick() {
	                    _reactRouter.browserHistory.push('/Storefront');
	                  } },
	                Translate.translate('ShoppingCart', 'Shop_More')
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
	              this.renderCheckoutButton()
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
	              _react2.default.createElement(
	                _E.Button,
	                { type: 'danger', onClick: this.cancel.bind(this) },
	                _react2.default.createElement(_E.Glyph, { icon: 'circle-slash' }),
	                Translate.translate('ShoppingCart', 'Cancel')
	              )
	            ),
	            _react2.default.createElement(
	              _E.Col,
	              { xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3', style: { marginTop: '4em' } },
	              this.state.bShowCouponBtn ? this.renderCouponButton() : null
	            )
	          )
	        )
	      );
	    }
	  }, {
	    key: 'getTotalPrice',
	    value: function getTotalPrice() {
	      if (this.state.totalPrice) {
	        return (0, _TsvUtils.currencyFilter)(this.state.totalPrice);
	      }
	      if (this.state.summary.TotalPrice) {
	        return (0, _TsvUtils.currencyFilter)(this.state.summary.TotalPrice);
	      }
	      // ok, must calculate for some reason:
	      var total = 0;
	      this.state.cart.forEach(function (C) {
	        total += C.price * C.qtyInCart;
	      });
	      return (0, _TsvUtils.currencyFilter)(total);
	    }
	  }, {
	    key: 'renderShoppingCart',
	    value: function renderShoppingCart() {
	      var _this2 = this;

	      if (!this.state.cart || !this.state.cart.length) {
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'h2',
	            { style: { margin: '40px auto' } },
	            'You don\'t have any items in your cart'
	          )
	        );
	      }

	      Big.log('renderShoppingCart, check state');
	      Big.log(this.state);

	      return this.state.cart.map(function (prd, $index) {
	        return _react2.default.createElement(_ShoppingCartItem2.default, {
	          key: $index,
	          data: prd,
	          location: _this2.props.location
	        });
	      });
	    }
	  }, {
	    key: 'renderCheckoutButton',
	    value: function renderCheckoutButton() {
	      if (this.state.cart && this.state.cart.length) {
	        return _react2.default.createElement(
	          _E.Button,
	          { type: 'success', size: 'lg', onClick: function onClick() {
	              _reactRouter.browserHistory.push('/ChooseCashCard');
	            } },
	          Translate.translate('ShoppingCart', 'Checkout')
	        );
	      }
	      return null;
	    }
	  }, {
	    key: 'renderCouponButton',
	    value: function renderCouponButton() {
	      // <img className="regularBtn" id="couponImg" src={Translate.localizedImage('coupon.png')} onClick={this.coupon()} alt="Coupon"/>
	      return _react2.default.createElement(
	        _E.Button,
	        { type: 'primary', onClick: this.coupon },
	        Translate.translate('ShoppingCart', 'Coupon')
	      );
	    }
	  }, {
	    key: 'renderShowTax',
	    value: function renderShowTax() {
	      return _react2.default.createElement(
	        'p',
	        null,
	        Translate.translate('ShoppingCart', 'Tax'),
	        ': ',
	        (0, _TsvUtils.currencyFilter)(this.state.salesTaxAmount)
	      );
	    }
	  }]);

	  return ShoppingCart;
	}(_react.Component);

	exports.default = ShoppingCart;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _reactSlick = __webpack_require__(130);

	var _reactSlick2 = _interopRequireDefault(_reactSlick);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _ProductListItem = __webpack_require__(97);

	var _ProductListItem2 = _interopRequireDefault(_ProductListItem);

	var _ShoppingCartMini = __webpack_require__(95);

	var _ShoppingCartMini2 = _interopRequireDefault(_ShoppingCartMini);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('Storefront');
	/*
	// example of how to capture client logging to the server
	Big.setOptions({
		api: [{ type: 'axios', config: {
			url: '/api/big-log',
			method: 'post',
			then: [(response) => {
				console.log('[BigLog] posted log request to API');
			}],
			catch: (error) => {
				console.error('[BigLog] error, did not log request post to api!');
				console.error(error);
			}
		
		}} ]
	});
	*/

	var Storefront = function (_Component) {
	  _inherits(Storefront, _Component);

	  function Storefront(props, context) {
	    _classCallCheck(this, Storefront);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Storefront).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      categoryIdFilter: [],
	      products: [],
	      categories: []
	    };

	    _this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
	    _this._onStoreFrontChange = _this._onStoreFrontChange.bind(_this);

	    if (window) {
	      window.SFS = _StorefrontStore2.default;
	    }

	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(Storefront, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //Big.log(' >>>>>>>>>>>>>> STOREFRONT mounted... route: '+this.props.location.pathname + ' <<<<<<<<<<<<<<<<<');
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);

	      var state = {};

	      _TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
	      _StorefrontStore2.default.addChangeListener(this._onStoreFrontChange);

	      _TsvActions2.default.apiCall('fetchProduct', function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setSession('products', data);
	      });

	      /*
	      // using own categories now
	          if (!TsvSettingsStore.getConfig('categories')) {
	      		TsvActions.apiCall('fetchProductCategoriesByParentCategoryID', 0, (err, data) => {
	      			if (err) Big.throw(err);
	      			Big.log('fetchProductCategoriesByParentCategoryID');
	      			Big.log(err);
	      			Big.log(data);
	      			TsvSettingsStore.setConfig('categories', data);
	      		});
	      	} else {
	      		state.categories = TsvSettingsStore.getConfig('categories');
	      	}
	      */
	      state.categories = _StorefrontStore2.default.getStorefrontData('categories');
	      /*
	      	TsvActions.apiCall('fetchShoppingCart2', (err, data) => {
	      		if (err) Big.throw(err);
	      		TsvSettingsStore.setCache('shoppingCart', data);
	      	});
	      */
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
	      _StorefrontStore2.default.removeChangeListener(this._onStoreFrontChange);
	    }
	  }, {
	    key: '_onRootstoreChange',
	    value: function _onRootstoreChange(event) {
	      // if (event && event.type == 'config' && event.path == 'categories') {
	      // Big.log('[_onRootstoreChange]');
	      // Big.log(event);
	      // Big.log(TsvSettingsStore.getConfig('categories'));

	      var products = _TsvSettingsStore2.default.getSession('products'),
	          categories = _StorefrontStore2.default.getStorefrontData('categories');

	      this.setState({
	        categories: categories || [],
	        products: _StorefrontStore2.default.decorateProducts(products) || []
	      });

	      // }
	    }
	  }, {
	    key: '_onStoreFrontChange',
	    value: function _onStoreFrontChange() {
	      this.setState({
	        categoryIdFilter: _StorefrontStore2.default.getCategoryFilter()
	      });
	    }
	  }, {
	    key: 'categoryClick',
	    value: function categoryClick(categoryID) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      if (categoryID) {
	        return _StorefrontActions2.default.toggleIDtoCategoryFilter(categoryID);
	      }
	      _StorefrontActions2.default.clearCategoryFilter();
	    }
	  }, {
	    key: 'addToCart',
	    value: function addToCart(product, e) {
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _StorefrontActions2.default.addToCart(product, e);
	    }
	  }, {
	    key: 'render',
	    value: function render() {

	      var allType = !this.state.categoryIdFilter.length ? "primary" : "hollow-primary";
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' }),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Storefront'
	            )
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              null,
	              _react2.default.createElement(
	                'span',
	                { style: { fontWeight: 'bold', textTransform: 'uppercase', fontSize: '1.2em' } },
	                'Show:'
	              ),
	              ' ',
	              _react2.default.createElement(
	                _E.Button,
	                { style: { backgroundColor: '#fff' }, type: allType, onClick: this.categoryClick.bind(this, null) },
	                'All'
	              ),
	              _react2.default.createElement(
	                'span',
	                { style: { width: '1em', display: 'inline-block' } },
	                ' '
	              ),
	              this.renderCategories()
	            )
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'product-container' },
	            this.renderProducts()
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderCategories',
	    value: function renderCategories() {
	      var _this2 = this;

	      if (this.state.categories && this.state.categories.length) {
	        return _react2.default.createElement(
	          _E.ButtonGroup,
	          null,
	          this.state.categories.map(function (category, $index) {
	            var type = _this2.state.categoryIdFilter.indexOf(category._id) > -1 ? "primary" : "hollow-primary";
	            return _react2.default.createElement(
	              _E.Button,
	              { style: { backgroundColor: '#fff' }, key: $index, type: type, onClick: _this2.categoryClick.bind(_this2, category._id) },
	              category.label
	            );
	          })
	        );
	      }
	      return null;
	    }
	  }, {
	    key: 'renderProducts',
	    value: function renderProducts() {
	      var _this3 = this;

	      var settings = {
	        dots: true,
	        adaptiveHeight: false,
	        arrows: true,
	        //fade: true,
	        infinite: false,
	        swipeToSlide: true
	      };

	      var products_per_page = 12;
	      // for each item that is shown
	      if (!this.state.products.length) {
	        return null;
	      }

	      var prods = [];

	      this.state.products.map(function (P, $index) {
	        //let show = true;
	        if (_this3.state.categoryIdFilter.length) {
	          if (P.categories) {
	            // handle new structure!
	            var contains = P.categories.some(function (v) {
	              return _this3.state.categoryIdFilter.indexOf(v) >= 0;
	            });
	            if (contains) prods.push(P);
	          }
	        } else {
	          prods.push(P);
	        }
	      });

	      // testing, skip the <Slider />:
	      //prods = prods.slice(0,products_per_page);

	      if (!prods || !prods.length) {
	        if (this.state.categoryIdFilter.length) {
	          return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	              'h2',
	              { style: { margin: '40px auto' } },
	              'No products found, looks like you chose an empty category.'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              _react2.default.createElement(
	                'em',
	                null,
	                _react2.default.createElement(
	                  'strong',
	                  null,
	                  'HINT:'
	                ),
	                ' Press the ',
	                _react2.default.createElement(
	                  'strong',
	                  { style: { color: '#0A6BE2' } },
	                  '"All"'
	                ),
	                ' button in the top left corner'
	              )
	            )
	          );
	        }
	        return _react2.default.createElement(
	          'h2',
	          { style: { margin: '40px auto' } },
	          'No products found in this machine at this time, please try again later.'
	        );
	      }

	      if (prods <= products_per_page) {
	        return _react2.default.createElement(
	          'div',
	          { className: 'storefront-product-carousel-group' },
	          prods
	        );
	      } else {
	        var stack = [],
	            renderKey = 0;
	        while (prods.length) {
	          var prodslice = prods.splice(0, products_per_page);
	          stack.push(_react2.default.createElement(
	            'div',
	            { key: renderKey, className: 'storefront-product-carousel-group' },
	            this.renderProductGroup(prodslice)
	          ));
	          renderKey += 1;
	        }
	        return _react2.default.createElement(
	          _reactSlick2.default,
	          settings,
	          stack
	        );
	      }
	    }
	  }, {
	    key: 'renderProductGroup',
	    value: function renderProductGroup(products) {
	      var _this4 = this;

	      return products.map(function (prd, idx) {
	        return _react2.default.createElement(_ProductListItem2.default, {
	          key: idx,
	          onClick: _this4.addToCart.bind(_this4),
	          data: prd
	        });
	      });
	    }
	  }]);

	  return Storefront;
	}(_react.Component);

	exports.default = Storefront;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _ProductListItem = __webpack_require__(97);

	var _ProductListItem2 = _interopRequireDefault(_ProductListItem);

	var _ShoppingCartMini = __webpack_require__(95);

	var _ShoppingCartMini2 = _interopRequireDefault(_ShoppingCartMini);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('Storefront_Static');

	var Storefront_Static = function (_Component) {
	  _inherits(Storefront_Static, _Component);

	  function Storefront_Static(props, context) {
	    _classCallCheck(this, Storefront_Static);

	    //TsvSettingsStore.setSession('currentView', 'Storefront');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Storefront_Static).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      categoryIdFilter: [],
	      products: [],
	      categories: [],
	      quantity: 0
	    };

	    _this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
	    _this._onStoreFrontChange = _this._onStoreFrontChange.bind(_this);
	    return _this;
	  }

	  // Add change listeners to stores


	  _createClass(Storefront_Static, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
	      _StorefrontStore2.default.addChangeListener(this._onStoreFrontChange);

	      _TsvActions2.default.apiCall('fetchProduct', function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setSession('products', data);
	      });

	      _TsvActions2.default.apiCall('fetchProductCategoriesByParentCategoryID', 0, function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setConfig('categories', data);
	      });

	      _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setCache('shoppingCart', data);
	      });
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
	      _StorefrontStore2.default.removeChangeListener(this._onStoreFrontChange);
	    }
	  }, {
	    key: '_onRootstoreChange',
	    value: function _onRootstoreChange(event) {
	      // if (event && event.type == 'config' && event.path == 'categories') {
	      // Big.log('[_onRootstoreChange]');
	      // Big.log(event);
	      // Big.log(TsvSettingsStore.getConfig('categories'));
	      this.setState({
	        categories: _TsvSettingsStore2.default.getConfig('categories') || [],
	        products: _TsvSettingsStore2.default.getSession('products') || []
	      });

	      // }
	    }
	  }, {
	    key: '_onStoreFrontChange',
	    value: function _onStoreFrontChange() {
	      this.setState({
	        categoryIdFilter: _StorefrontStore2.default.getCategoryFilter()
	      });
	    }
	  }, {
	    key: 'categoryClick',
	    value: function categoryClick(categoryID) {
	      if (categoryID) {
	        return _StorefrontActions2.default.toggleIDtoCategoryFilter(categoryID);
	      }
	      _StorefrontActions2.default.clearCategoryFilter();
	    }
	  }, {
	    key: 'setPrdSelected',
	    value: function setPrdSelected(product, e) {
	      _StorefrontActions2.default.addToCart(product, e);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var allType = !this.state.categoryIdFilter.length ? "primary" : "hollow-primary";
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_ShoppingCartMini2.default, { className: 'scart-mini' }),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Storefront'
	            )
	          ),
	          _react2.default.createElement(
	            _E.Row,
	            null,
	            _react2.default.createElement(
	              _E.Col,
	              null,
	              'Categories:',
	              ' ',
	              _react2.default.createElement(
	                _E.Button,
	                { type: allType, onClick: this.categoryClick.bind(this, null) },
	                'All'
	              ),
	              _react2.default.createElement(
	                'span',
	                { style: { width: '1em', display: 'inline-block' } },
	                ' '
	              ),
	              _react2.default.createElement(
	                _E.ButtonGroup,
	                null,
	                this.state.categories ? this.state.categories.map(function (category, $index) {
	                  var type = _this2.state.categoryIdFilter.indexOf(category.categoryID) > -1 ? "primary" : "hollow-primary";
	                  return _react2.default.createElement(
	                    _E.Button,
	                    { key: $index, type: type, onClick: _this2.categoryClick.bind(_this2, category.categoryID) },
	                    category.categoryName
	                  );
	                }) : null
	              )
	            )
	          ),
	          this.renderProducts()
	        )
	      );
	    }
	  }, {
	    key: 'renderProducts',
	    value: function renderProducts() {
	      var _this3 = this;

	      if (!this.state.products.length) {
	        return null;
	      }
	      var prods = this.state.products.map(function (P, idx) {
	        var show = true;
	        if (_this3.state.categoryIdFilter.length) {
	          if (_this3.state.categoryIdFilter.indexOf(P.productCategoryID) === -1) {
	            show = false;
	          }
	        }
	        if (show) {
	          return _react2.default.createElement(
	            _E.Col,
	            { key: idx, xs: '1/2', sm: '1/3', md: '1/4', lg: '1/4' },
	            _react2.default.createElement(_ProductListItem2.default, {
	              onClick: _this3.setPrdSelected.bind(_this3),
	              data: P })
	          );
	        }
	        return null;
	      });

	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        prods
	      );
	    }
	  }]);

	  return Storefront_Static;
	}(_react.Component);

	exports.default = Storefront_Static;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var ThankYouMsg = function (_Component) {
	  _inherits(ThankYouMsg, _Component);

	  function ThankYouMsg(props, context) {
	    _classCallCheck(this, ThankYouMsg);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ThankYouMsg).call(this, props, context));
	    // MUST call super() before any this.*


	    _TsvSettingsStore2.default.setConfig("bDisplayCgryNavigation2", _TsvSettingsStore2.default.getConfig('bDisplayCgryNavigation'));
	    (0, _TsvUtils.updateCredit)();

	    (0, _TsvUtils.thankYouTimer)();

	    return _this;
	  }

	  _createClass(ThankYouMsg, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {}

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'PageIdle' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h1',
	            { style: { textAlign: 'center' } },
	            'Thanks for your business!'
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            ' '
	          ),
	          _react2.default.createElement(
	            'h3',
	            { style: { textAlign: 'center' } },
	            'Looking forwawrd to seeing you again.....'
	          )
	        )
	      );
	    }
	  }]);

	  return ThankYouMsg;
	}(_react.Component);

	exports.default = ThankYouMsg;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Transaction_Refund = function (_Component) {
	  _inherits(Transaction_Refund, _Component);

	  function Transaction_Refund(props, context) {
	    _classCallCheck(this, Transaction_Refund);

	    // MUST call super() before any this.*
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Transaction_Refund).call(this, props, context));
	    //TsvSettingsStore.setSession('currentView', 'Transaction_Refund');
	  }

	  _createClass(Transaction_Refund, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {}

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h2',
	            null,
	            'Transaction Refund',
	            _react2.default.createElement('br', null)
	          )
	        )
	      );
	    }
	  }]);

	  return Transaction_Refund;
	}(_react.Component);

	exports.default = Transaction_Refund;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var VendError = function (_Component) {
	  _inherits(VendError, _Component);

	  function VendError(props, context) {
	    _classCallCheck(this, VendError);

	    //TsvSettingsStore.setSession('currentView', 'VendError');
	    //TsvSettingsStore.setCache('currentLocation', '/VendError');

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(VendError).call(this, props, context));
	    // MUST call super() before any this.*


	    (0, _TsvUtils.updateCredit)();
	    _this.state = {
	      errorMsg1: _TsvSettingsStore2.default.getSession('vendErrorMsg1'),
	      errorMsg2: _TsvSettingsStore2.default.getSession('vendErrorMsg2')
	    };
	    (0, _TsvUtils.vendErrorTimer)();

	    return _this;
	  }

	  _createClass(VendError, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {}

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'VendError' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'p',
	            null,
	            this.errorMsg1
	          ),
	          _react2.default.createElement(
	            'p',
	            null,
	            this.errorMsg2
	          )
	        )
	      );
	    }
	  }]);

	  return VendError;
	}(_react.Component);

	exports.default = VendError;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _CategoryListItem = __webpack_require__(98);

	var _CategoryListItem2 = _interopRequireDefault(_CategoryListItem);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CategorySearch');

	var CategorySearch = function (_Component) {
	  _inherits(CategorySearch, _Component);

	  function CategorySearch(props, context) {
	    _classCallCheck(this, CategorySearch);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CategorySearch).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      // bClickedOnce: false,
	      bShowCgryTitle: true,
	      bShowPrevArrow: false,
	      bShowNextArrow: false,
	      _Index: 0,
	      categories: _TsvSettingsStore2.default.getConfig('categories')
	    };

	    _TsvSettingsStore2.default.setConfig('bDisplayCgryNavigation', false);
	    //TsvSettingsStore.setSession('currentView', 'CategorySearch');
	    //TsvSettingsStore.setCache('currentLocation', '/CategorySearch');
	    (0, _TsvUtils.updateCredit)();

	    _this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
	    return _this;
	  }

	  _createClass(CategorySearch, [{
	    key: 'back',
	    value: function back() {
	      _reactRouter.browserHistory.push("/ProductSearch");
	    }
	  }, {
	    key: 'isActive',
	    value: function isActive(index) {
	      return this.state._Index === index;
	    }
	  }, {
	    key: 'fetchCategory',
	    value: function fetchCategory(cat) {
	      //var categoryID = cat.categoryID;
	      _TsvActions2.default.apiCall('fetchProductCategoriesByParentCategoryID', cat.categoryID, function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setConfig('categories', data);
	        if (data.length === 0) {
	          _TsvActions2.default.apiCall('fetchProductByCategory', cat.categoryID, function (err, data) {
	            if (err) Big.throw(err);
	            Big.log('setting products data................................................................................' + "\n................................................................................\n");
	            Big.log(data);
	            _TsvSettingsStore2.default.setConfig('products', data);
	            _reactRouter.browserHistory.push("/ProductSearch");
	          });
	        }
	      });
	    }

	    // Add change listeners to stores

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      _TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
	      _TsvActions2.default.apiCall('fetchProductCategoriesByParentCategoryID', 0, function (err, data) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setConfig('categories', data);
	      });

	      (0, _TsvUtils.isCartEmpty)(function (err, isEmpty) {
	        if (_TsvSettingsStore2.default.getCache('custommachinesettings.txtIdleScene') === "category_search" || !isEmpty) {
	          startGeneralIdleTimer(_this2.props.location.pathname);
	        }
	      });
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
	    }
	  }, {
	    key: '_onRootstoreChange',
	    value: function _onRootstoreChange(event) {
	      if (event && event.type == 'config' && event.path == 'categories') {
	        //Big.log('[_onRootstoreChange]');
	        //Big.log(event);
	        //Big.log(TsvSettingsStore.getConfig('categories'));
	        this.setState({
	          categories: _TsvSettingsStore2.default.getConfig('categories')
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'CategorySearch' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(
	            'h2',
	            null,
	            Translate.translate('CategorySearch', 'SelectCategory')
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          { className: 'container_slider' },
	          this.state.categories ? this.state.categories.map(function (category, $index) {
	            return _react2.default.createElement(_CategoryListItem2.default, {
	              key: $index,
	              onClick: _this3.fetchCategory.bind(_this3),
	              data: category
	            });
	          }) : null
	        ),
	        this.state.bSubCgry ? this.renderSubCgry() : null
	      );
	    }
	  }, {
	    key: 'renderSubCgry',
	    value: function renderSubCgry() {
	      //<img className="regularBtn" id="backImg" src={Translate.localizedImage('back.png')} onClick={this.back} />
	      return _react2.default.createElement(_E.Button, { component: _react2.default.createElement(
	          Link,
	          { to: '/CategorySearch' },
	          Translate.translate('CategorySearch', 'Back')
	        ) });
	    }
	  }]);

	  return CategorySearch;
	}(_react.Component);

	exports.default = CategorySearch;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _ProductListItem = __webpack_require__(97);

	var _ProductListItem2 = _interopRequireDefault(_ProductListItem);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('ProductSearch');

	var ProductSearch = function (_Component) {
	  _inherits(ProductSearch, _Component);

	  function ProductSearch(props, context) {
	    _classCallCheck(this, ProductSearch);

	    {/* MUST call super() before any this.*/}

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ProductSearch).call(this, props, context));

	    _this.state = {
	      bShowBackBtn: TsvSettingsStore.getCache('custommachinesettings.bCategoryView'),
	      products: [],
	      _Index: 0
	    };

	    TsvSettingsStore.setConfig('bDisplayCgry', false);
	    updateCredit();
	    TsvSettingsStore.setConfig('credit', TsvSettingsStore.getSession('creditBalance'));
	    //TsvSettingsStore.setSession('currentView', 'ProductSearch');
	    //TsvSettingsStore.setCache('currentLocation', '/ProductSearch');

	    //if (typeof window !== 'undefined') {
	    //window.RootscopeStore = RootscopeStore;
	    //}

	    return _this;
	  }

	  _createClass(ProductSearch, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	        if (err) Big.throw(err);
	        TsvSettingsStore.setCache('shoppingCart', data);
	      });

	      var state = {
	        products: TsvSettingsStore.getConfig('products'),
	        bShowBackBtn: TsvSettingsStore.getCache('custommachinesettings.bCategoryView')
	      };

	      this.setState(state);

	      if (!state.products) {
	        Big.warn('have to go fetch all products! (fix in refactor, but ProductSearch is not long-term used anyway ... just old code for testing');
	        //Big.log(TsvSettingsStore.getConfig('products'));
	        _TsvActions2.default.apiCall('fetchProduct', function (err, data) {
	          if (err) Big.throw(err);
	          TsvSettingsStore.setConfig('products', data);
	          _this2.setState({
	            products: data
	          });
	        });
	      }
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {}
	  }, {
	    key: 'setOpacity',
	    value: function setOpacity(count) {
	      return count == 0 ? 0.4 : 1;
	    }
	  }, {
	    key: 'isActive',
	    value: function isActive(index) {
	      return this.state._Index === index;
	    }
	  }, {
	    key: 'showPrev',
	    value: function showPrev() {
	      this.state._Index = this.state._Index > 0 ? --this.state._Index : this.state.products.length - 1;
	    }
	  }, {
	    key: 'showNext',
	    value: function showNext() {}
	  }, {
	    key: 'setPrdSelected',
	    value: function setPrdSelected(product, e) {
	      if (product.stockCount > 0) {
	        _TsvActions2.default.apiCall('addToCartByProductID', product.productID, function (err, response) {
	          if (err) Big.throw(err);
	          TsvSettingsStore.setConfig('pvr', response);

	          _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	            if (err) Big.throw(err);
	            TsvSettingsStore.setCache('shoppingCart', data);
	          });

	          // this will throw it to the simple checkout page, don't want to do that we want to shop!
	          // browserHistory.push("/View2");
	        });
	      }
	    }
	  }, {
	    key: 'logoClicked',
	    value: function logoClicked() {
	      TsvSettingsStore.gotoDefaultIdlePage();
	    }
	  }, {
	    key: 'updateCategory',
	    value: function updateCategory(categoryID) {
	      var _this3 = this;

	      _TsvActions2.default.apiCall('fetchProductByCategory', categoryID, function (err, data) {
	        if (err) Big.throw(err);
	        TsvSettingsStore.setConfig('products', data);
	        _this3.setState({
	          products: data
	        });
	      });
	    }
	  }, {
	    key: 'back',
	    value: function back() {
	      _reactRouter.browserHistory.push("/CategorySearch");
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;

	      var products = this.state.products;
	      if (!products || !products.length) {
	        return _react2.default.createElement(
	          _E.Row,
	          { className: 'ProductSearch' },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              Translate.translate('ProductSearch', 'OneMomentPlease')
	            )
	          )
	        );
	      }

	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'ProductSearch' },
	        _react2.default.createElement(
	          _E.Col,
	          null,
	          _react2.default.createElement(_E.Button, { style: { float: 'right' }, type: 'primary', component: _react2.default.createElement(
	              _reactRouter.Link,
	              { to: '/ShoppingCart' },
	              'TEST: go to shopping cart page'
	            ) }),
	          this.state.bDisplayCgry ? this.renderCategoryTable() : null,
	          _react2.default.createElement(
	            'h2',
	            null,
	            Translate.translate('ProductSearch', 'SelectProduct')
	          )
	        ),
	        _react2.default.createElement(
	          _E.Row,
	          { gutter: 0, className: 'container_slider' },
	          this.state.products ? this.state.products.map(function (product, $index) {
	            /*
	            if (/ProductImageNotFound/.test(product.imagePath)) {
	            	return null;
	            }
	            */
	            return _react2.default.createElement(
	              _E.Col,
	              { basis: '25%', key: $index, style: { opacity: _this4.setOpacity(product.stockCount) } },
	              _react2.default.createElement(_ProductListItem2.default, {
	                onClick: _this4.setPrdSelected.bind(_this4),
	                data: product
	              })
	            );
	          }) : null
	        ),
	        this.renderBackBtn()
	      );
	    }
	  }, {
	    key: 'renderBackBtn',
	    value: function renderBackBtn() {
	      if (this.state.bShowBackButton) {
	        _react2.default.createElement('img', { className: 'regularBtn', id: 'back', src: Translate.localizedImage('back.png'), alt: 'back', onClick: this.back });
	      }
	    }
	  }, {
	    key: 'renderCategoryTable',
	    value: function renderCategoryTable() {
	      var _this5 = this;

	      var categories = TsvSettingsStore.getProductCategories();
	      return _react2.default.createElement(
	        _E.Row,
	        null,
	        categories.map(function (category, $index) {
	          return _react2.default.createElement(
	            _E.Col,
	            { basis: '33%', key: $index, className: 'gallery' + (_this5.isActive($index) ? ' active' : '') },
	            _react2.default.createElement('img', { src: category.imagePath, alt: category.description, title: category.description, onClick: _this5.updateCategory.bind(_this5, category.categoryID) })
	          );
	        })
	      );
	    }
	  }]);

	  return ProductSearch;
	}(_react.Component);

	exports.default = ProductSearch;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(99);
	var ReactServerRendering = __webpack_require__(100);
	var ReactVersion = __webpack_require__(101);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(102);
	var ReactDOMTextComponent = __webpack_require__(103);
	var ReactDefaultInjection = __webpack_require__(99);
	var ReactInstanceHandles = __webpack_require__(104);
	var ReactMount = __webpack_require__(105);
	var ReactPerf = __webpack_require__(106);
	var ReactReconciler = __webpack_require__(107);
	var ReactUpdates = __webpack_require__(108);
	var ReactVersion = __webpack_require__(101);

	var findDOMNode = __webpack_require__(109);
	var renderSubtreeIntoContainer = __webpack_require__(110);
	var warning = __webpack_require__(132);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(133);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(111);

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(43);
	var ReactDOMServer = __webpack_require__(42);
	var ReactIsomorphic = __webpack_require__(112);

	var assign = __webpack_require__(113);
	var deprecated = __webpack_require__(114);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibCreateHashHistory = __webpack_require__(188);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _historyLibUseQueries = __webpack_require__(189);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _createTransitionManager = __webpack_require__(115);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _PropTypes = __webpack_require__(60);

	var _RouterContext = __webpack_require__(58);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _RouteUtils = __webpack_require__(57);

	var _RouterUtils = __webpack_require__(116);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}

	var _React$PropTypes = _react2['default'].PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */
	var Router = _react2['default'].createClass({
	  displayName: 'Router',

	  propTypes: {
	    history: object,
	    children: _PropTypes.routes,
	    routes: _PropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,

	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2['default'].createElement(_RouterContext2['default'], props);
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },

	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : undefined;

	    var _createRouterObjects = this.createRouterObjects();

	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;

	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });

	    this.history = history;
	    this.router = router;
	  },

	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;

	    if (matchContext) {
	      return matchContext;
	    }

	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;

	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }

	    var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes || children));
	    var router = _RouterUtils.createRouterObject(history, transitionManager);
	    var routingHistory = _RouterUtils.createRoutingHistory(history, transitionManager);

	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },

	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;

	    var createHistory = undefined;
	    if (history) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : undefined;
	      createHistory = function () {
	        return history;
	      };
	    } else {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : undefined;
	      createHistory = _historyLibCreateHashHistory2['default'];
	    }

	    return _historyLibUseQueries2['default'](createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },

	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },

	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;

	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }

	});

	exports['default'] = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _React$PropTypes = _react2['default'].PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	function isEmptyObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return false;
	  }return true;
	}

	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;

	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }

	  return to;
	}

	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2['default'].createClass({
	  displayName: 'Link',

	  contextTypes: {
	    router: object
	  },

	  propTypes: {
	    to: oneOfType([string, object]).isRequired,
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      className: '',
	      style: {}
	    };
	  },

	  handleClick: function handleClick(event) {
	    var allowTransition = true;

	    if (this.props.onClick) this.props.onClick(event);

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    if (event.defaultPrevented === true) allowTransition = false;

	    // If target prop is set (e.g. to "_blank") let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) {
	      if (!allowTransition) event.preventDefault();

	      return;
	    }

	    event.preventDefault();

	    if (allowTransition) {
	      var _props = this.props;
	      var to = _props.to;
	      var query = _props.query;
	      var hash = _props.hash;
	      var state = _props.state;

	      var _location = createLocationDescriptor(to, { query: query, hash: hash, state: state });

	      this.context.router.push(_location);
	    }
	  },

	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : undefined;

	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;

	    if (router) {
	      var _location2 = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(_location2);

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(_location2, onlyActiveOnIndex)) {
	          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2['default'].createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }

	});

	exports['default'] = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(47);

	var _Link2 = _interopRequireDefault(_Link);

	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2['default'].createClass({
	  displayName: 'IndexLink',

	  render: function render() {
	    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }

	});

	exports['default'] = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Redirect = __webpack_require__(51);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _PropTypes = __webpack_require__(60);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	var IndexRedirect = _react2['default'].createClass({
	  displayName: 'IndexRedirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	    true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(57);

	var _PropTypes = __webpack_require__(60);

	var func = _react2['default'].PropTypes.func;

	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	var IndexRoute = _react2['default'].createClass({
	  displayName: 'IndexRoute',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
	      }
	    }

	  },

	  propTypes: {
	    path: _PropTypes.falsy,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	    true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(57);

	var _PatternUtils = __webpack_require__(63);

	var _PropTypes = __webpack_require__(60);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	var Redirect = _react2['default'].createClass({
	  displayName: 'Redirect',

	  statics: {

	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = _RouteUtils.createRouteFromReactElement(element);

	      if (route.from) route.path = route.from;

	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;

	        var pathname = undefined;
	        if (route.to.charAt(0) === '/') {
	          pathname = _PatternUtils.formatPattern(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = _PatternUtils.formatPattern(pattern, params);
	        }

	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };

	      return route;
	    },

	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';

	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';

	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	        if (pattern.indexOf('/') === 0) break;
	      }

	      return '/' + parentPattern;
	    }

	  },

	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	    true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _RouteUtils = __webpack_require__(57);

	var _PropTypes = __webpack_require__(60);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	var Route = _react2['default'].createClass({
	  displayName: 'Route',

	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },

	  propTypes: {
	    path: string,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },

	  /* istanbul ignore next: sanity check */
	  render: function render() {
	    true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }

	});

	exports['default'] = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _PropTypes = __webpack_require__(60);

	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {

	  contextTypes: {
	    history: _PropTypes.history
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : undefined;
	    this.history = this.context.history;
	  }

	};

	exports['default'] = History;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */
	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },

	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },

	  componentDidMount: function componentDidMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : undefined;
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

	    var route = this.props.route || this.context.route;

	    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }

	};

	exports['default'] = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var object = _react2['default'].PropTypes.object;

	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */
	var RouteContext = {

	  propTypes: {
	    route: object.isRequired
	  },

	  childContextTypes: {
	    route: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : undefined;
	  }

	};

	exports['default'] = RouteContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _historyLibUseQueries = __webpack_require__(189);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _createTransitionManager = __webpack_require__(115);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : undefined;

	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var routes = _ref.routes;

	    var options = _objectWithoutProperties(_ref, ['routes']);

	    var history = _historyLibUseQueries2['default'](createHistory)(options);
	    var transitionManager = _createTransitionManager2['default'](history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}

	exports['default'] = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function isValidChild(object) {
	  return object == null || _react2['default'].isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      /* istanbul ignore if: error logging */
	      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, error.message) : undefined;
	    }
	  }
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *   
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */

	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2['default'].Children.forEach(children, function (element) {
	    if (_react2['default'].isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */

	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _deprecateObjectProperties = __webpack_require__(118);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	var _getRouteParams = __webpack_require__(119);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _RouteUtils = __webpack_require__(57);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _React$PropTypes = _react2['default'].PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */
	var RouterContext = _react2['default'].createClass({
	  displayName: 'RouterContext',

	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2['default'].createElement
	    };
	  },

	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },

	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;

	    if (!router) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`<RouterContext>` expects a `router` rather than a `history`') : undefined;

	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      location = _deprecateObjectProperties2['default'](location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }

	    return { history: history, location: location, router: router };
	  },

	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },

	  render: function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = _getRouteParams2['default'](route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };

	        if (_RouteUtils.isReactChildren(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
	          }
	        }

	        if (typeof components === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (components.hasOwnProperty(key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

	    return element;
	  }

	});

	exports['default'] = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _RouterContext = __webpack_require__(58);

	var _RouterContext2 = _interopRequireDefault(_RouterContext);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var RoutingContext = _react2['default'].createClass({
	  displayName: 'RoutingContext',

	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : undefined;
	  },

	  render: function render() {
	    return _react2['default'].createElement(_RouterContext2['default'], this.props);
	  }
	});

	exports['default'] = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.falsy = falsy;

	var _react = __webpack_require__(8);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;

	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = shape({
	  listen: func.isRequired,
	  pushState: func.isRequired,
	  replaceState: func.isRequired,
	  go: func.isRequired
	});

	exports.history = history;
	var location = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});

	exports.location = location;
	var component = oneOfType([func, string]);
	exports.component = component;
	var components = oneOfType([component, object]);
	exports.components = components;
	var route = oneOfType([object, element]);
	exports.route = route;
	var routes = oneOfType([route, arrayOf(route)]);

	exports.routes = routes;
	exports['default'] = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _createMemoryHistory = __webpack_require__(66);

	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);

	var _createTransitionManager = __webpack_require__(115);

	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

	var _RouteUtils = __webpack_require__(57);

	var _RouterUtils = __webpack_require__(116);

	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history;
	  var routes = _ref.routes;
	  var location = _ref.location;

	  var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);

	  !(history || location) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a history or a location') : _invariant2['default'](false) : undefined;

	  history = history ? history : _createMemoryHistory2['default'](options);
	  var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes));

	  var unlisten = undefined;

	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    // Pick up the location from the history via synchronous history.listen
	    // call if needed.
	    unlisten = history.listen(function (historyLocation) {
	      location = historyLocation;
	    });
	  }

	  var router = _RouterUtils.createRouterObject(history, transitionManager);
	  history = _RouterUtils.createRoutingHistory(history, transitionManager);

	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation, nextState && _extends({}, nextState, {
	      history: history,
	      router: router,
	      matchContext: { history: history, transitionManager: transitionManager, router: router }
	    }));

	    // Defer removing the listener to here to prevent DOM histories from having
	    // to unwind DOM event listeners unnecessarily, in case callback renders a
	    // <Router> and attaches another history listener.
	    if (unlisten) {
	      unlisten();
	    }
	  });
	}

	exports['default'] = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = useRouterHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(189);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(190);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}

	module.exports = exports['default'];

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function escapeSource(string) {
	  return escapeRegExp(string).replace(/\/+/g, '/+');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = undefined,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/?#]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '([\\s\\S]*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '([\\s\\S]*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}

	var CompiledPatternsCache = {};

	function compilePattern(pattern) {
	  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */

	function matchPattern(pattern, pathname) {
	  // Make leading slashes consistent between pattern and pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;

	  regexpSource += '/*'; // Capture path separators

	  // Special-case patterns like '*' for catch-all routes.
	  var captureRemaining = tokens[tokens.length - 1] !== '*';

	  if (captureRemaining) {
	    // This will match newlines in the remaining path.
	    regexpSource += '([\\s\\S]*?)';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));

	  var remainingPathname = undefined,
	      paramValues = undefined;
	  if (match != null) {
	    if (captureRemaining) {
	      remainingPathname = match.pop();
	      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);

	      // If we didn't match the entire pathname, then make sure that the match
	      // we did get ends at a path separator (potentially the one we added
	      // above at the beginning of the path, if the actual match was empty).
	      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
	        return {
	          remainingPathname: null,
	          paramNames: paramNames,
	          paramValues: null
	        };
	      }
	    } else {
	      // If this matched at all, then the match was the entire pathname.
	      remainingPathname = '';
	    }

	    paramValues = match.slice(1).map(function (v) {
	      return v != null ? decodeURIComponent(v) : v;
	    });
	  } else {
	    remainingPathname = paramValues = null;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: paramValues
	  };
	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var _matchPattern = matchPattern(pattern, pathname);

	  var paramNames = _matchPattern.paramNames;
	  var paramValues = _matchPattern.paramValues;

	  if (paramValues != null) {
	    return paramNames.reduce(function (memo, paramName, index) {
	      memo[paramName] = paramValues[index];
	      return memo;
	    }, {});
	  }

	  return null;
	}

	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */

	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;

	  var token = undefined,
	      paramName = undefined,
	      paramValue = undefined;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateBrowserHistory = __webpack_require__(191);

	var _historyLibCreateBrowserHistory2 = _interopRequireDefault(_historyLibCreateBrowserHistory);

	var _createRouterHistory = __webpack_require__(120);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateBrowserHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibCreateHashHistory = __webpack_require__(188);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _createRouterHistory = __webpack_require__(120);

	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);

	exports['default'] = _createRouterHistory2['default'](_historyLibCreateHashHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = createMemoryHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _historyLibUseQueries = __webpack_require__(189);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _historyLibUseBasename = __webpack_require__(190);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	var _historyLibCreateMemoryHistory = __webpack_require__(192);

	var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = _historyLibCreateMemoryHistory2['default'](options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}

	module.exports = exports['default'];

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.init = init;
	exports.currencyFilter = currencyFilter;
	exports.registerKF = registerKF;
	exports.setVendingInProcessFlag = setVendingInProcessFlag;
	exports.clearVendingInProcessFlag = clearVendingInProcessFlag;
	exports.emptyCart = emptyCart;
	exports.vendResponse = vendResponse;
	exports.isFullSuccessVendResult = isFullSuccessVendResult;
	exports.checkBalance = checkBalance;
	exports.autoCheckout = autoCheckout;
	exports.cardTransaction = cardTransaction;
	exports.onGeneralTimeout = onGeneralTimeout;
	exports.thankYouTimer = thankYouTimer;
	exports.vendErrorTimer = vendErrorTimer;
	exports.startGeneralIdleTimer = startGeneralIdleTimer;
	exports.killGeneralIdleTimer = killGeneralIdleTimer;
	exports.getTimer = getTimer;
	exports.isCartEmpty = isCartEmpty;
	exports.gotoDefaultIdlePage = gotoDefaultIdlePage;
	exports.idleClicked = idleClicked;
	exports.resetSelectedItem = resetSelectedItem;
	exports.resetPaymentTimer = resetPaymentTimer;
	exports.killTimers = killTimers;
	exports.startPaymentTimer = startPaymentTimer;
	exports.getCreditMessage = getCreditMessage;
	exports.getShowCredit = getShowCredit;
	exports.gotoPayment = gotoPayment;
	exports.updateCredit = updateCredit;
	exports.coupon = coupon;

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _index = __webpack_require__(5);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _reactRouter = __webpack_require__(9);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import RootscopeStore from '../stores/RootscopeStore'
	//import RootscopeActions from '../actions/RootscopeActions'

	var Big = new _BigLogger2.default('TsvUtils');

	var serviceIsStarted = false

	// currentPageView: replacement for rootscope.currentLocation or whatever....
	// still need to track it somehow, and this script will never get access to router.location.path
	,
	    currentPageView,
	    globalTimers = {};

	function init() {
		if (!serviceIsStarted) {
			Big.warn(' --------- ...............       TsvService . init       ..................... --------------- ');
			setVendingInProcessFlag(false);
			_TsvActions2.default.serverHandshake();
			serviceIsStarted = true;
		}
	}

	function currencyFilter(amt, type) {
		if (!amt || isNaN(amt)) {
			return 'error';
		}
		type = type || _TsvSettingsStore2.default.getConfig('currencyType'); //'currency';

		switch (type) {
			case 'currency':

				// hard-coded to two decimal places:
				return (0, _index.moneyformat)(amt, 2);

				break;

			case 'points':

				// from OldCode/app.js app.filter('points', function() { .... })

				// Ensure that the passed in data is a number
				if (isNaN(amt) || amt < 0) {

					// If the data is not a amt or is less than one (thus not having a cardinal value) return it unmodified.
					return amt;
				} else {

					// If the data we are applying the filter to is a amt, perform the actions to check it's ordinal suffix and apply it.
					amt = amt * 100;
					var lastDigit = amt % 10;

					if (lastDigit === 1) {
						return amt + ' point';
					} else {
						return amt + ' points';
					}
				}

				break;
			default:
				return 'unknown currency' + type;
				break;
		}
	}

	function registerKF() {
		var app_config = _TsvSettingsStore2.default.getAppConfig();
		//TsvActions.apiCall('registerComponent',"KioskFramework", "1.0.0.3", "2015-12-10");
		_TsvActions2.default.apiCall('registerComponent', app_config.name, app_config.version, app_config.releaseDate);
	}

	function setVendingInProcessFlag(bool) {
		Big.log("setVendingInProcessFlag()");
		bool = typeof bool === 'undefined' ? true : bool;
		bool = (0, _index.forceBoolean)(bool);
		_TsvSettingsStore2.default.setSession('bVendingInProcess', bool);
	}

	function clearVendingInProcessFlag() {
		setVendingInProcessFlag(false);
	}

	function emptyCart() {
		_TsvSettingsStore2.default.setCache('shoppingCart.detail', []);
		_TsvActions2.default.apiCall('emptyCart');
	}

	function vendResponse(processStatus) {
		//, $location, $rootScope) {
		Big.log("Hi Ping Debug vendResponse!!!!!!!!!!!!!");
		Big.log('processStatus: ' + processStatus);
		resetSelectedItem();

		_TsvActions2.default.apiCall('fetchShoppingCart2', function (err, cart) {
			_TsvSettingsStore2.default.setCache('shoppingCart', cart);

			switch (processStatus) {
				case "VEND_SUCCESS":
					Big.log("Got event vendResponse(): " + processStatus);
					//tsv.cache.productList = tsv.fetchProduct(); //Not In Use Right Now

					if (isFullSuccessVendResult()) {
						Big.log("Full Vend Success!");
						_reactRouter.browserHistory.push("/ThankYouMsg");
						// moved here from below, but this is questionable
						emptyCart();
					} else {
						Big.log("Partial Vend Error");
						//pay out
						/*
	     // Kent is not sure about this? if we are "done" and vend error happens, why turn the payment device back on?
	     if (TsvSettingsStore.getCache('currentLocation') == "/CashVending"){
	     if (currentPageView == 'CashVending') {
	     	TsvActions.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");
	     }
	     */
						_TsvSettingsStore2.default.setSession({
							vendErrorMsg1: Translate.translate("Vending", "PartialVendFailure"),
							vendErrorMsg2: Translate.translate("Vending", "YouHaveBeenCharged") + currencyFilter(_TsvSettingsStore2.default.getSession('vendSettleTotal'))
						});
						_reactRouter.browserHistory.push("/VendError");
					}
					break;

				case "VEND_FAILURE":
					Big.log("Got event vendResponse(): " + processStatus);
					_TsvSettingsStore2.default.setSession({
						vendErrorMsg1: Translate.translate("Vending", "TotalVendFailure"),
						vendErrorMsg2: Translate.translate("Vending", "YouWereNotCharged")
					});
					_reactRouter.browserHistory.push("/VendError");
					break;

				case "EXCEPTION":
					Big.log("Got event vendResponse(): " + processStatus);
					_TsvSettingsStore2.default.setSession({
						vendErrorMsg1: Translate.translate("Vending", "TotalVendFailure"),
						vendErrorMsg2: Translate.translate("Vending", "YouWereNotCharged")
					});
					_reactRouter.browserHistory.push("/VendError");
					break;

				default:
					Big.log("Got event vendResponse, no idea what to do with it: " + processStatus);
					break;
			}

			// not sure about this, is this "single product vending" mode here?
			// moved to success areas
			//emptyCart();
		});
	}

	function isFullSuccessVendResult() {
		_TsvSettingsStore2.default.setSession('vendSettleTotal', _TsvSettingsStore2.default.getCache('shoppingCart.summary.netTotalPrice'));
		var itemsVendFail = _TsvSettingsStore2.default.getCache('shoppingCart.summary.vendFailCount'),
		    itemsVendSuccess = _TsvSettingsStore2.default.getCache('shoppingCart.summary.vendItemCount') - itemsVendFail;

		if (itemsVendFail > 0) {
			Big.log("is it a fullVendSuccess?(false)!success:(" + itemsVendSuccess + ")fail:(" + itemsVendFail + ")");
			return false;
		}
		Big.log("is it a fullVendSuccess?(true)success:(" + itemsVendSuccess + ")fail:(" + itemsVendFail + ")");
		return true;
	}

	function checkBalance() {
		//Big.log("checkBalance()!!!!!");
		var total = _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice'),
		    creditBalance = _TsvSettingsStore2.default.getSession('creditBalance'),
		    sc_detail = _TsvSettingsStore2.default.getCache('shoppingCart.detail') || [];

		if (creditBalance * 100 >= total * 100 && sc_detail.length > 0) {
			_TsvActions2.default.apiCall('disablePaymentDevice');
			var v_i_p = _TsvSettingsStore2.default.getSession('bVendingInProcess');
			if (!v_i_p) {
				//Big.log("Inserted Enough Cash should vend...!!!!!");
				//TsvSettingsStore.setSession('cashMsg', "Vending...");
				setVendingInProcessFlag(true);
				//Big.log("tsv.session.bVendingInProcess: " + v_i_p);
				_TsvActions2.default.apiCall('disablePaymentDevice');
				_TsvActions2.default.apiCall('startVend');
			}
		}
	}

	function autoCheckout() {
		var total = _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice'),
		    creditBalance = _TsvSettingsStore2.default.getSession('creditBalance'),
		    cartItems = _TsvSettingsStore2.default.getCache('shoppingCart.detail') || [],
		    itemsInCart = cartItems.length;

		Big.log("autoCheckout() totalPrice = " + total + " credit = " + creditBalance + " items = " + itemsInCart);

		if (creditBalance >= total && itemsInCart > 0) {
			//Big.log("disabling payment device");
			_TsvActions2.default.apiCall('disablePaymentDevice');

			Big.log("check vend in process?");
			if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
				//Big.log("Calling gotoPayment on rootScope");
				//TsvSettingsStore.gotoPayment();
				// it's in here now....
				gotoPayment();
			}
		} else {
			Big.log("Insufficient funds to autoCheckout");
		}
	}

	function cardTransaction(level) {
		var msg = '';
		switch (level) {
			case "CARD_INSERTED":
				msg = Translate.translate("CardVending", "ProcessingMessage");
				break;
			case "CARD_PROCESSING":
				msg = Translate.translate("CardVending", "ProcessingMessage");
				break;
			case "CARD_APPROVED":
				_TsvActions2.default.apiCall('disablePaymentDevice');
				break;
			case "CARD_INVALID_READ":
				msg = Translate.translate("CardVending", "CardInvalidMessage");
				break;
			case "CARD_DECLINED":
				msg = Translate.translate("CardVending", "CardDeclinedMessage");
				break;
			case "CARD_CONNECTION_FAILURE":
				msg = Translate.translate("CardVending", "CardConnectionErrorMessage");
				break;
			case "CARD_UNKNOWN_ERROR":
				msg = Translate.translate("CardVending", "CardUnknownErrorMessage");
				break;
			default:
				msg = Translate.translate("CardVending", "CardUnknownErrorMessage");
				break;
		}
		_TsvSettingsStore2.default.setSession('cardMsg', msg);
		return msg;
	}

	function onGeneralTimeout() {
		Big.log("onGeneralTimeout() called");

		killGeneralIdleTimer();

		var gotoDef = false;

		if (_TsvSettingsStore2.default.getConfig('bDualLanguage')) {
			var dfltLang = _TsvSettingsStore2.default.getCache('custommachinesettings.languageDefaulted', "En");

			//Big.warn('old code calling for DOM manipulation, no good.... who called this?');
			//$('.showflag').removeClass('showflag').addClass('hideflag');
			//document.getElementById(dfltLang).className = "showflag";
			_TsvSettingsStore2.default.setConfig('selectedLanguage', dfltLang);
			Translate.selectLanguage(dfltLang);
		}

		//Big.log("TsvSettingsStore.getCache('currentLocation'): "+TsvSettingsStore.getCache('currentLocation'));
		Big.log('currentPageView: ' + currentPageView);

		//switch (TsvSettingsStore.getCache('currentLocation')) {
		switch (currentPageView) {

			case "/PageIdle": // this is the "idle" page... should be here instead of storefront eventually, but for now we have no idle graphics
			case "/View0": // this is the "reset" page... should be here instead of storefront eventually, but for now we have no idle graphics
			// these two have their own timers:
			case "/ThankYouMsg":
			case "/VendError":
				break;

			case "/View1":
			case "/CategorySearch":
			case "/ProductSearch":
				emptyCart();
				//gotoDefaultIdlePage(); //$location, $rootScope);
				gotoDef = true;
				break;
			/*
	  		case "/MakeDonation":
	  			//tsv.emptyCart();
	  			break;
	  */
			case "/CashVending":
			case "/CardVending":
				var T = getTimer('paymentTimer');
				if (!T || T && T.getTimeLeft() <= 0) {
					// but why are we emptying the cart here without going to DefaultIdlePage???
					// probably should check to see if any card action has run yet but no resolution (no success and no fail)
					// if none, then empty + idle, if some, "Payment is still processing, one moment please", resets main payment idle timer
					// will need to track this somehow through TsvStore?
					emptyCart();
					gotoDef = true;
				} else {
					Big.log("On " + currentPageView + " idle timeout disabled...Running the paymentTimer...");
					if (T.getTimeLeft()) {
						Big.log('time left in payment timer: ' + T.getTimeLeft());
					}
				}
				break;

			case "/Admin/CheckFaults":
				if (!_TsvSettingsStore2.default.getSession('bRunningClearFaults')) {
					//gotoDefaultIdlePage(); //$location, $rootScope);
					gotoDef = true;
					Big.log("Idle Timeout from /Admin/CheckFaults not running ClearFaults");
				}
				break;

			case "/Admin/AutoMap":
				if (!_TsvSettingsStore2.default.getSession('bRunningAutoMap')) {
					//gotoDefaultIdlePage(); //$location, $rootScope);
					gotoDef = true;
					Big.log("Idle Timeout from /Admin/AutoMap not running AutoMap");
				}
				break;

			default:
				Big.log("default ... Idle Timeout from " + currentPageView);
				emptyCart();
				//gotoDefaultIdlePage(); //$location, $rootScope);
				gotoDef = true;
				break;
		}

		startGeneralIdleTimer(currentPageView); //$location, $rootScope);//Ping added on 1016/2015
		if (gotoDef) {
			gotoDefaultIdlePage();
		}
	}

	function thankYouTimer() {
		//var timer = setTimeout( gotoDefaultIdlePage, TsvSettingsStore.getCache('custommachinesettings.thankyouPageTimeout' ) );
		var T = new _index.timer(gotoDefaultIdlePage, _TsvSettingsStore2.default.getCache('custommachinesettings.thankyouPageTimeout', 10000));
		T.self(T);
		setTimer('thankyouTimer', T);
	}

	function vendErrorTimer() {
		//var timer = setTimeout( gotoDefaultIdlePage, TsvSettingsStore.getCache('custommachinesettings.VendErrorTimeout', 10000) );
		var T = new _index.timer(gotoDefaultIdlePage, _TsvSettingsStore2.default.getCache('custommachinesettings.VendErrorTimeout', 10000));
		T.self(T);
		setTimer('vendErrorTimer', T);
	}

	function startGeneralIdleTimer(fromPage) {
		var T = getTimer('generalIdleTimer');
		if (!T && /Admin/.test(fromPage)) {
			//Big.warn('skipping startGeneralIdleTimer() because it looks like we are in admin land, and timer was cancelled');
			return;
		}
		if (fromPage) {
			currentPageView = fromPage;
		}
		killGeneralIdleTimer();
		var ts = _TsvSettingsStore2.default.getCache('custommachinesettings.generalPageTimeout', 120000),
		    T = new _index.timer(onGeneralTimeout, ts);
		T.self(T);
		setTimer('generalIdleTimer', T);
	}

	function killGeneralIdleTimer() {
		killTimers(['generalIdleTimer']);
	}

	function setTimer(label, timer) {
		globalTimers[label] = timer;
	}

	function getTimer(label) {
		return globalTimers[label];
	}

	function getTimers() {
		return globalTimers;
	}

	function dropTimer(label) {
		if (globalTimers[label]) {
			if (globalTimers[label].stop) {
				globalTimers[label].stop();
			}
			delete globalTimers[label];
		}
	}

	function isCartEmpty(cb) {
		var cart = _TsvSettingsStore2.default.getCache('shoppingCart');
		if (!cart) {

			Big.warn('this may be out of sync, as we have to check with the TsvActions.apiCall(fetchShoppingCart2) thing for data');
			_TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
				if (err) {
					Big.warn('error trying to fetchShoppingCart2!');
					Big.warn(err);
					cb(null, false);
				}
				_TsvSettingsStore2.default.setCache('shoppingCart', data);
				cb(null, !(data.detail && data.detail.length));
			});
		} else if (!cart.detail) {
			cb(null, true);
		} else {
			cb(null, cart.detail.length == 0);
		}
	}

	var timesIdleCalled = 0;

	function gotoDefaultIdlePage() {
		//$location, $rootScope){

		// can't go to idle page until we get settings!
		if (_TsvSettingsStore2.default.getCache('custommachinesettings', undefined) === undefined) {
			window.location.reload();
			return;
		}

		function activated(setActivation) {
			if (setActivation) {
				// no need to constantly poke this thing:
				_TsvSettingsStore2.default.setConfig('activated', true);
			}

			resetSelectedItem();

			if (_TsvSettingsStore2.default.getCache('custommachinesettings.txtIdleScene', 'coil_keypad').toLowerCase() == "page_idle") {
				_reactRouter.browserHistory.push("/PageIdle");
				return;
			} else {

				return _reactRouter.browserHistory.push("/Storefront");
				// there used to be more options here, look in old TsvService to see them
			}
		}

		if (_TsvSettingsStore2.default.getConfig('activated')) {
			activated(false);
		} else {

			_TsvActions2.default.apiCall('checkActivation', function (err, result) {

				Big.warn('checkActivation: timesIdleCalled:' + timesIdleCalled);
				Big.log(result);
				timesIdleCalled += 1;

				if (!result || result.resultCode !== "SUCCESS") {
					//Big.throw('WHY U NO ACTIVATE');
					// FIXME (or not) temporarily disabling this, not sure what the deal is with TSV <=> AVT
					//return browserHistory.push("/Admin/Activate");
				}

				activated(true);
			});
		}
	}

	function idleClicked() {
		return _reactRouter.browserHistory.push("/Storefront");
		// there used to be more options here, look in old TsvService to see them
	}

	function resetSelectedItem() {
		//Big.log("resetSelectedItem()!");
		_TsvSettingsStore2.default.setSession({
			bRunningClearFaults: false,
			bRunningAutoMap: false,
			cashMsg: Translate.translate("CashVending", "HintMessageInsertCash"),
			vendErrorMsg1: '',
			vendErrorMsg2: '',
			vendSettleTotal: 0,
			bVendedOldCredit: false
		});
	}

	function resetPaymentTimer() {
		//Big.log("Hi Ping Debug reset the paymentTimer");
		killTimers('paymentTimer'); //TsvActions.stopPaymentTimer();
		startPaymentTimer();
	}

	function killTimers(timerList) {

		if (timerList && typeof timerList === 'string') {
			timerList = [timerList];
		}

		if (timerList && timerList.length) {
			var timerSet = getTimers();
			if (timerSet) {
				timerList.forEach(function (TIMER) {
					if (timerSet[TIMER]) {
						var ref = timerSet[TIMER];
						if (ref) {
							if (ref.stop) {
								ref.stop();
							} else {
								clearTimeout(ref);
							}
						}
						dropTimer(TIMER);
					}
				});
				//TsvSettingsStore.setTimers(timerSet);
			}
		}
	}

	function startPaymentTimer(idlePage) {
		var timeoutLength = _TsvSettingsStore2.default.getCache('custommachinesettings.paymentPageTimeout');
		/*
	 	// allow override to /View1
	 	idlePage = idlePage || 'idle';
	 
	 	// for now though, force all to go to Idle page,
	 	// because /View1 is the keypad input interface for single product choose + purchase (no shopping cart)
	 	idlePage = 'idle';
	 */
		if (!timeoutLength) {
			Big.log(_TsvSettingsStore2.default.getCache('custommachinesettings'));
			Big.throw('startPaymentTimer: I need a timeoutLength to start a timeout! none found.');
		}

		var T = new _index.timer(function () {
			emptyCart();
			//stopPaymentTimer();
			killTimers('paymentTimer');

			switch (idlePage) {
				// "View1" is the keypad input interface for single product choose + purchase (no cart)
				case 'View1':
					_reactRouter.browserHistory.push('/View1');
					break;

				default:
					gotoDefaultIdlePage();
					break;
			}
		}, timeoutLength);
		T.self(T);
		setTimer('paymentTimer', T);
	}

	/******

	stuff below here are old "rootscope" actions mostly.

	*******/

	// this is never called anywhere:
	function getCreditMessage() {
		if (_TsvSettingsStore2.default.getConfig('bCashless')) {
			return Translate.translate("BalanceLabel") + ":" + '\n' + currencyFilter(_TsvSettingsStore2.default.getConfig('fundsAvailable'));
		} else {
			return Translate.translate("CreditLabel") + ":" + '\n' + currencyFilter(_TsvSettingsStore2.default.getConfig('credit'));
		}
	}

	// this is never called anywhere:
	function getShowCredit() {
		if (_TsvSettingsStore2.default.getConfig('bCashless')) {
			var fundsA = _TsvSettingsStore2.default.getConfig('fundsAvailable');
			return typeof fundsA !== 'undefined' && fundsA !== 0 && _TsvSettingsStore2.default.getConfig('bShowCredit');
		} else {
			var credit = _TsvSettingsStore2.default.getConfig('credit');
			return typeof credit !== 'undefined' && credit !== 0 && _TsvSettingsStore2.default.getConfig('bShowCredit');
		}
	}

	/*
	// this function was never called in the old code.... looks suspect as well.
	// if you try to use, test heavily and study the logic
	export function checkout() {
		var bHasShoppingCart = TsvSettingsStore.getCache('custommachinesettings.bHasShoppingCart', true)
			, fundsAvailable = TsvSettingsStore.getConfig('fundsAvailable')
			, summary = TsvSettingsStore.getConfig('summary')
			;

		if (fundsAvailable >= summary.TotalPrice) {
			browserHistory.push("/Cashless_Vending");

		} else {
			//Big.log("bHasShoppingCart:" + TsvService .bCustomSetting('bHasShoppingCart', "true"));
			if (bHasShoppingCart && TsvSettingsStore.getCache('currentLocation') != "/ShoppingCart"){
				browserHistory.push("/ShoppingCart");

			} else {

				if (bHasShoppingCart) {
					return browserHistory.push("/ShoppingCart");
				}

				if (TsvSettingsStore.getCache('custommachinesettings.bAskForReceipt', false)) {
					this.setConfig('keyboardView', "Enter_Email");
					browserHistory.push("/Keyboard");
				} else {
					this.gotoPayment();
				}
			}
		}
	}
	*/

	function gotoPayment() {
		//TsvActions.apiCall("gotoPayment() called");

		var TotalPrice = _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice', 0);

		if (TotalPrice != 0 && _TsvSettingsStore2.default.getCache('custommachinesettings.HasCreditCard', true) && _TsvSettingsStore2.default.getCache('custommachinesettings.HasBillCoin', true)) {
			_reactRouter.browserHistory.push("/ChooseCashCard");
		} else {

			if (_TsvSettingsStore2.default.getCache('custommachinesettings.HasBillCoin', true)) {
				_reactRouter.browserHistory.push("/CashVending");
			} else if (_TsvSettingsStore2.default.getCache('custommachinesettings.HasCreditCard', true)) {
				_reactRouter.browserHistory.push("/CardVending");

				// this doesn't seem right:
				//} else if (TotalPrice == 0) {
				//browserHistory.push("/CardVending");
			}
		}
	}

	function updateCredit() {
		var discount = _TsvSettingsStore2.default.getSession('discount', 0),
		    creditBalance = _TsvSettingsStore2.default.getSession('creditBalance', 0);
		_TsvSettingsStore2.default.setConfig('credit', discount + creditBalance);
	}

	function coupon() {
		_TsvSettingsStore2.default.setConfig('keyboardView', "Enter_Coupon");
		_reactRouter.browserHistory.push("/Keyboard");
	}

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.selectLanguage = selectLanguage;
	exports.translate = translate;
	exports.currencyFilter = currencyFilter;
	exports.localizedPath = localizedPath;
	exports.localizedImage = localizedImage;

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _en = __webpack_require__(131);

	var _en2 = _interopRequireDefault(_en);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// TODO: upgrade this to just load all languages in ./languages folder


	var trans = {
		current: "En",
		En: _en2.default,
		Fr: _en2.default
	};

	function selectLanguage(language) {
		trans.current = language;
	}

	function translate(nsString, name) {

		// unloaded language
		if (!(trans.current in trans)) {
			return 'unknown language: ' + trans.current;
		}

		// unknown namespace gets @@ in UI
		if (nsString != null && !(nsString in trans[trans.current])) return "@@" + name;

		var dict = trans[trans.current];
		if (nsString != null) {
			dict = dict[nsString];
		}

		if (!(name in dict)) {
			if (nsString == null) {
				return "@" + name;
			} else {
				return "@" + nsString + "::" + name;
			}
		}

		return dict[name];
	};

	function currencyFilter(model) {
		// app.js, line 136
		throw new Error('not done!');
	}

	function localizedPath(filename) {
		return _localizedPath(filename);
	};

	function localizedImage(filename) {
		return _localizedPath(filename);
	};

	function _localizedPath(filename) {

		return '/gfx/languages/' + trans.current.toLowerCase() + '/' + filename;
		/*
	 if (filename == 'thankyou.png'){
	 	if(window.innerHeight > window.innerWidth){
	 		return '/Images/languages/' + trans.current.toLowerCase() + '/' + filename;
	 	} else {
	 		return '/Images/languages/' + trans.current.toLowerCase() + '/' + 'landscape/'+ filename;
	 	}
	 } else {
	 	return '/Images/languages/' + trans.current.toLowerCase() + '/' + filename;
	 }
	 */
	}

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _session;

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _muDB = __webpack_require__(125);

	var _muDB2 = _interopRequireDefault(_muDB);

	var _utils = __webpack_require__(5);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**************************
	                                                                                                                                                                                                                  
	                                                                                                                                                                                                                  
	                                                                                                                                                                                                                  
	                                                                                                                                                                                                                  		ATTENTION: this is not the usual Flux Store!
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  		this is a hybrid action-store solely set up to support the phase 1 refactor
	                                                                                                                                                                                                                  		of the existing AVT angular app.
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  		that original app has two very different logical flows:
	                                                                                                                                                                                                                  		- synchronous ajax calls to the server
	                                                                                                                                                                                                                  		- a sprawling management of settings across a multitude of what I'll call "mini-stores"
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  		these two things are problematic in React flow, because:
	                                                                                                                                                                                                                  		- flux is designed to have a dispatching loop that handles events,
	                                                                                                                                                                                                                  			and the dispatch loop does not allow dispatching while a dispatch is being handled
	                                                                                                                                                                                                                  		- the design of the original app's settings management allows for synchronous on-demand get/set access,
	                                                                                                                                                                                                                  			but converting ALL of them to the flux loop is not feasible as many are done in succession,
	                                                                                                                                                                                                                  			which ultimately results in flux loop dispatcher being called out of sequence
	                                                                                                                                                                                                                  			(and resulting in an "Invariant" error which throws a big error)
	                                                                                                                                                                                                                  			>> and many hacks already in the code of using ms timeouts simply to stagger settings, not good
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  		current solution that this script provides:
	                                                                                                                                                                                                                  		- allows the on-demand get/set of the original app flow
	                                                                                                                                                                                                                  		- does not use the flux loop, so is not bound by the dispatcher problems
	                                                                                                                                                                                                                  		- still uses the basic event emitter pattern to bubble up settings changes to components that need to know about them
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  		
	                                                                                                                                                                                                                  
	                                                                                                                                                                                                                  ***************************/

	//import AppDispatcher from '../dispatcher/AppDispatcher'
	//import appConstants from '../constants/appConstants'
	//import TsvService from '../../lib/TsvService'


	//import { currencyFilter } from '../utils/TsvUtils'
	// only need this for testing, whether or not to attach this to window (at bottom of script):

	var Big = new _BigLogger2.default('TsvSettingsStore');

	var CHANGE_EVENT = 'change'

	// example state vars:
	,
	    _store = {

		appConfig: {
			name: 'SDK-Vending-Gui',
			version: '0.0.1',
			date: '2016-03-22'
		},

		session: (_session = {
			cashMsg: Translate.translate("CashVending", "HintMessageInsertCash"),
			cardMsg: Translate.translate("CardVending", "InstructionMessage"),
			bVendedOldCredit: false,
			bVendingInProcess: false,
			vendErrorMsg1: "vendErrorMsg1",
			vendErrorMsg2: "vendErrorMsg2",
			vendSettleTotal: 0,
			creditBalance: 0,
			discount: 0,
			bRunningAutoMap: false,
			machineID: 0
		}, _defineProperty(_session, 'bVendedOldCredit', false), _defineProperty(_session, 'products', null), _session),

		cache: {
			shoppingCart: {},
			productList: {},
			planogram: {},
			machineSettings: {},
			// pre-setting this from the actual settings for testing:
			custommachinesettings: {
				paymentPageTimeout: 65000
			},
			machineList: {},
			prdHashTable: {}
		},

		config: {
			currencyType: 'currency',
			failing: true,
			failCount: 0,
			eventSubscriptions: {},
			bShowLanguageFlag: false,
			bShowLanguage: false,
			bShowCredit: false,
			bCashless: false,
			bDualMachine: false,
			itemsInCart: 0,
			bInsufficientFunds: false,
			bDisplayCgryNavigation: false,
			bDisplayCgryNavigation2: false,
			categories: []
		}
	},
	    _storeDB = new _muDB2.default();

	_storeDB.setDB(_store);

	var TsvSettingsStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getConfig: function getConfig(path, dflt) {
			path = path ? 'config.' + path : 'config';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getCache: function getCache(path, dflt) {
			path = path ? 'cache.' + path : 'cache';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getSession: function getSession(path, dflt) {
			path = path ? 'session.' + path : 'session';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getAppConfig: function getAppConfig() {
			return _storeDB.get('appConfig');
		},

		getDB: function getDB() {
			Big.warn('using getDB, should only be used for testing purposes!');
			return _storeDB.getDB();
		},

		setConfig: function setConfig(path, value) {
			if (!value && path && (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object') {
				Object.keys(path).forEach(function (KEY) {
					_storeDB.set('config.' + KEY, path[KEY]);
				});
				path = '__multiple__';
			} else {
				_storeDB.set('config.' + path, value);
			}
			TsvSettingsStore.emitChange({ type: 'config', path: path });
		},
		setCache: function setCache(path, value) {
			if (!value && path && (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object') {
				Object.keys(path).forEach(function (KEY) {
					_storeDB.set('cache.' + KEY, path[KEY]);
				});
				path = '__multiple__';
			} else {
				_storeDB.set('cache.' + path, value);
			}
			TsvSettingsStore.emitChange({ type: 'cache', path: path });
		},
		setSession: function setSession(path, value) {
			if (!value && path && (typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object') {
				Object.keys(path).forEach(function (KEY) {
					_storeDB.set('session.' + KEY, path[KEY]);
				});
				path = '__multiple__';
			} else {
				_storeDB.set('session.' + path, value);
			}
			TsvSettingsStore.emitChange({ type: 'session', path: path });
		}
	});

	//*
	//Big.warn("\n\n -------------------------------------------------------\n\n TsvSettingsStore loaded!\n\n -------------------------------------------------------\n\n");
	if (_utils.isClient) {
		window.RSS = TsvSettingsStore;
	}
	//*/

	exports.default = TsvSettingsStore;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TestscopeActions = __webpack_require__(123);

	var _TestscopeActions2 = _interopRequireDefault(_TestscopeActions);

	var _TestscopeStore = __webpack_require__(124);

	var _TestscopeStore2 = _interopRequireDefault(_TestscopeStore);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Big = new _BigLogger2.default('ComEmulator');

	var ComEmulator = function (_Component) {
		_inherits(ComEmulator, _Component);

		function ComEmulator(props, context) {
			_classCallCheck(this, ComEmulator);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ComEmulator).call(this, props, context));

			_this._onTestscopeChange = _this._onTestscopeChange.bind(_this);
			_this._onTsvSettingsChange = _this._onTsvSettingsChange.bind(_this);
			_this.state = {
				lastResult: '',
				currentView: _TsvSettingsStore2.default.getSession('currentView')
			};
			return _this;
		}

		_createClass(ComEmulator, [{
			key: 'sendCommand',
			value: function sendCommand(cmd, e) {
				_TestscopeActions2.default.sendEmulatorCommand(cmd);
			}
		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				_TestscopeStore2.default.addChangeListener(this._onTestscopeChange);
				_TsvSettingsStore2.default.addChangeListener(this._onTsvSettingsChange);
			}
		}, {
			key: 'compomentWillUnmount',
			value: function compomentWillUnmount() {
				_TestscopeStore2.default.removeChangeListener(this._onTestscopeChange);
				_TsvSettingsStore2.default.removeChangeListener(this._onTsvSettingsChange);
			}
		}, {
			key: '_onTestscopeChange',
			value: function _onTestscopeChange(result) {
				this.setState({
					lastResult: result
				});
			}
		}, {
			key: '_onTsvSettingsChange',
			value: function _onTsvSettingsChange(event) {
				if (event.type === 'session' && event.path === 'currentView') {
					this.setState({
						currentView: _TsvSettingsStore2.default.getSession('currentView')
					});
				}
			}
		}, {
			key: 'render',
			value: function render() {
				var _this2 = this;

				var stylz = {
					backgroundColor: 'rgba(0,0,0,0.5)',
					color: '#fff',
					padding: '4px',
					fontSize: '0.75em'
				};

				var buttons = [

				// credits:
				{
					label: 'Pay Full Amount',
					cmd: [['payFullWithCustomerCredit']],
					showFor: ['ChooseCashCard', 'CustomerCreditVending']
				},

				// cash:
				{
					label: 'Insert $5',
					cmd: [['insertCash', 5]],
					showFor: ['ChooseCashCard', 'CashVending', 'AdminBillAcceptor']
				}, {
					label: 'Insert $10',
					cmd: [['insertCash', 10]],
					showFor: ['ChooseCashCard', 'CashVending', 'AdminBillAcceptor']
				}, {
					label: 'Insert $20',
					cmd: [['insertCash', 20]],
					showFor: ['ChooseCashCard', 'CashVending', 'AdminBillAcceptor']
				}, {
					label: 'Insert $50',
					cmd: [['insertCash', 50]],
					showFor: ['ChooseCashCard', 'CashVending', 'AdminBillAcceptor']
				}, {
					label: 'Insert $100',
					cmd: [['insertCash', 100]],
					showFor: ['ChooseCashCard', 'CashVending', 'AdminBillAcceptor']
				},

				// credit cards:
				{
					label: 'CC Insert',
					cmd: [['cardTransactionResponse', 'CARD_INSERTED']],
					showFor: ['ChooseCashCard', 'CardVending']
				}, {
					label: 'CC Processing',
					cmd: [['cardTransactionResponse', 'CARD_PROCESSING']],
					showFor: ['ChooseCashCard', 'CardVending']
				}, {
					label: 'CC Approve',
					cmd: [['cardTransactionResponse', 'CARD_APPROVED']],
					showFor: ['ChooseCashCard', 'CardVending']
				}, {
					label: 'CC Connect Fail',
					cmd: [['cardTransactionResponse', 'CARD_CONNECTION_FAILURE']],
					showFor: ['ChooseCashCard', 'CardVending']
				}, {
					label: 'CC Decline',
					cmd: [['cardTransactionResponse', 'CARD_DECLINED']],
					showFor: ['ChooseCashCard', 'CardVending']
				}, {
					label: 'CC Unknown Error',
					cmd: [['cardTransactionResponse', 'CARD_UNKNOWN_ERROR']],
					showFor: ['ChooseCashCard', 'CardVending']
				},

				// admin
				{
					label: 'Sample Automap',
					cmd: [['notifyMapStatusChange', 'Map', { machineID: 0, coilNumber: '10', channel: 1, tray: 1 }], ['notifyMapStatusChange', 'Map', { machineID: 0, coilNumber: '11', channel: 1, tray: 1 }], ['notifyMapStatusChange', 'Map', { machineID: 0, coilNumber: '12', channel: 1, tray: 1 }], ['notifyMapStatusChange', 'Map', { machineID: 0, coilNumber: '13', channel: 1, tray: 1 }], ['notifyMapStatusChange', 'InvalidChannel', { machineID: 0, coilNumber: '', channel: 1, tray: 1 }], ['notifyMapStatusChange', 'InvalidChannel', { machineID: 0, coilNumber: '', channel: 2, tray: 1 }]],
					showFor: ['AdminAutoMap']
				}, {
					label: 'END Automap',
					cmd: [['notifyMapStatusChange', 'End', { machineID: 0, coilNumber: null, channel: '0', tray: 0 }]],
					showFor: ['AdminAutoMap']
				}];

				var pathname = '';
				if (typeof window !== 'undefined') {
					pathname = window.location.pathname.replace(/\//g, '');
					Big.log('pathname: ' + pathname);
				}

				var showButtons = buttons.filter(function (B) {
					return pathname !== 'ChooseCashCard' && B.showFor.indexOf(pathname) > -1;
				});

				if (!showButtons.length) {
					return null;
				}

				Big.log('ok, render');

				return _react2.default.createElement(
					'div',
					{ id: 'ComEmulator' },
					_react2.default.createElement(
						'h4',
						null,
						'Send Test Commands:'
					),
					_react2.default.createElement(
						'div',
						null,
						showButtons.map(function (B, idx) {
							return _react2.default.createElement(
								_E.Button,
								{ key: idx, type: 'primary', size: 'sm', onClick: _this2.sendCommand.bind(_this2, B.cmd) },
								B.label
							);
						})
					),
					_react2.default.createElement('hr', null),
					_react2.default.createElement(
						'p',
						{ style: stylz },
						this.state.lastResult ? JSON.stringify(this.state.lastResult) : 'no commands sent yet'
					)
				);
			}
		}]);

		return ComEmulator;
	}(_react.Component);

	exports.default = ComEmulator;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CustomerStatusDisplay = function (_Component) {
		_inherits(CustomerStatusDisplay, _Component);

		function CustomerStatusDisplay(props, context) {
			_classCallCheck(this, CustomerStatusDisplay);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomerStatusDisplay).call(this, props, context));

			_this.state = {
				machineInfo: _TsvStore2.default.getMachineInfo()
			};

			_this._onTsvStoreChange = _this._onTsvStoreChange.bind(_this);
			_this.timer = null;
			return _this;
		}

		// Add change listeners to stores


		_createClass(CustomerStatusDisplay, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				_TsvStore2.default.addChangeListener(this._onTsvStoreChange);
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvStoreChange);
			}
		}, {
			key: '_onTsvStoreChange',
			value: function _onTsvStoreChange(event) {
				if (event.type === _appConstants2.default.MACHINE_INFO) {
					this.setState({
						machineInfo: _TsvStore2.default.getMachineInfo()
					});
				}
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					'div',
					{ className: 'machineIdTag' },
					this.state.machineInfo ? this.state.machineInfo.vendor_id : 'no id'
				);
			}
		}]);

		return CustomerStatusDisplay;
	}(_react.Component);

	exports.default = CustomerStatusDisplay;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _CustomerLoginActions = __webpack_require__(80);

	var _CustomerLoginActions2 = _interopRequireDefault(_CustomerLoginActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	//import CL_Store from '../stores/CL_Store'

	//import TsvSettingsStore from '../stores/TsvSettingsStore'


	var CustomerStatusDisplay = function (_Component) {
		_inherits(CustomerStatusDisplay, _Component);

		function CustomerStatusDisplay(props, context) {
			_classCallCheck(this, CustomerStatusDisplay);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CustomerStatusDisplay).call(this, props, context));

			_this.state = {
				customer: _CustomerStore2.default.getCustomer(),
				adminInPath: _this.props.adminInPath,
				generalTimeoutRemaining: 0
			};

			_this._onCLStoreChange = _this._onCLStoreChange.bind(_this);
			_this.timer = null;
			return _this;
		}

		// Add change listeners to stores


		_createClass(CustomerStatusDisplay, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				_CustomerStore2.default.addChangeListener(this._onCLStoreChange);
				_CustomerLoginActions2.default.refreshCustomer();
				this.startInterval(this.state.adminInPath);
			}
		}, {
			key: 'startInterval',
			value: function startInterval(adminInPath) {
				if (adminInPath) {
					this.timer = setInterval(this.updateTimer.bind(this), 420); // just to be weird
				}
			}
		}, {
			key: 'updateTimer',
			value: function updateTimer() {
				var T = (0, _TsvUtils.getTimer)('generalIdleTimer'),
				    timeLeft = T && T.getTimeLeft() ? T.getTimeLeft() : 0;

				if (T) {
					this.setState({
						generalTimeoutRemaining: (timeLeft / 1000).toFixed(3) + 's'
					});
				}
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				if (this.timer) {
					clearInterval(this.timer);
				}
				_CustomerStore2.default.removeChangeListener(this._onCLStoreChange);
			}
		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextprops) {
				if (nextprops) {
					this.setState({ adminInPath: nextprops.adminInPath });
					this.startInterval(nextprops.adminInPath);
				}
			}
		}, {
			key: 'resetGeneralIdleTimer',
			value: function resetGeneralIdleTimer() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
			}
		}, {
			key: 'cancelGeneralIdleTimer',
			value: function cancelGeneralIdleTimer() {
				(0, _TsvUtils.killGeneralIdleTimer)();
				this.setState({
					generalTimeoutRemaining: 'timer cancelled'
				});
			}
		}, {
			key: '_onCLStoreChange',
			value: function _onCLStoreChange(event) {
				this.setState({
					customer: _CustomerStore2.default.getCustomer()
				});
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					'div',
					{ style: { backgroundColor: '#000', padding: '0.5em', fontSize: '0.85em', color: '#fff', textTransform: 'uppercase', textAlign: 'right', marginBottom: 0 } },
					this._render()
				);
			}
		}, {
			key: '_render',
			value: function _render() {
				if (this.state.adminInPath && !/Login/.test(this.props.location.pathname)) {
					var btype = this.state.generalTimeoutRemaining > 10 ? 'warning' : 'danger';
					return _react2.default.createElement(
						'p',
						{ style: { marginBottom: 0 } },
						_react2.default.createElement(
							'strong',
							null,
							'... admin mode ...'
						),
						' general timeout: ',
						this.state.generalTimeoutRemaining,
						' ',
						parseInt(this.state.generalTimeoutRemaining) > 0 ? _react2.default.createElement(
							'span',
							null,
							_react2.default.createElement(
								_E.Button,
								{ type: btype, size: 'sm', onClick: this.resetGeneralIdleTimer.bind(this) },
								' RESET IDLE TIMER '
							),
							' ',
							_react2.default.createElement(
								_E.Button,
								{ type: btype, size: 'sm', onClick: this.cancelGeneralIdleTimer.bind(this) },
								' CANCEL IDLE TIMER '
							)
						) : null
					);
				}
				return this.state.customer ? this.renderLoggedIn() : this.renderLoggedOut();
			}
		}, {
			key: 'renderLoggedIn',
			value: function renderLoggedIn() {
				return _react2.default.createElement(
					'p',
					{ style: { marginBottom: 0 } },
					'Welcome Back, ',
					this.state.customer.firstname,
					'! ... Credit Balance: $0.00',
					' ',
					_react2.default.createElement(
						_E.Button,
						{ size: 'xs', type: 'success', onClick: function onClick() {
								_CustomerLoginActions2.default.customerLogout();
							} },
						'Logout'
					)
				);
			}
		}, {
			key: 'renderLoggedOut',
			value: function renderLoggedOut() {
				return _react2.default.createElement(
					'p',
					{ style: { marginBottom: 0 } },
					'Logged Out',
					' ',
					_react2.default.createElement(
						_E.Button,
						{ size: 'xs', type: 'success', onClick: function onClick() {
								_reactRouter.browserHistory.push('/CustomerLogin');
							} },
						'Login'
					),
					' ',
					_react2.default.createElement(
						_E.Button,
						{ size: 'xs', type: 'success', onClick: function onClick() {
								_reactRouter.browserHistory.push('/CustomerSignup');
							} },
						'Register'
					)
				);
			}
		}]);

		return CustomerStatusDisplay;
	}(_react.Component);

	exports.default = CustomerStatusDisplay;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Activate = function (_Component) {
	  _inherits(Activate, _Component);

	  function Activate(props, context) {
	    _classCallCheck(this, Activate);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Activate).call(this, props, context));

	    _this.state = { numClicks: 0, loginOK: 3 };

	    return _this;
	  }

	  _createClass(Activate, [{
	    key: 'handleClick',
	    value: function handleClick(e) {
	      var num = this.state.numClicks;
	      num += 1;
	      if (num >= this.state.loginOK) {

	        _reactRouter.browserHistory.push('/Admin/Login');
	        this.setState({
	          numClicks: 0
	        });
	      } else {
	        this.setState({
	          numClicks: num
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var STYLZ = {
	        height: '3em',
	        width: '4em',
	        backgroundColor: 'transparent',
	        //border: '1px solid red',
	        position: 'absolute',
	        top: 0,
	        left: 0
	      };
	      if (this.props.testing) {
	        STYLZ.border = '1px solid red';
	        STYLZ.color = '#fff';
	      }
	      return _react2.default.createElement(
	        'div',
	        {
	          style: STYLZ,
	          onClick: this.handleClick.bind(this)
	        },
	        this.showClicks()
	      );
	    }
	  }, {
	    key: 'showClicks',
	    value: function showClicks() {
	      if (this.props.testing) {
	        return this.state.numClicks;
	      }
	      return null;
	    }
	  }]);

	  return Activate;
	}(_react.Component);

	exports.default = Activate;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _muDB = __webpack_require__(125);

	var _muDB2 = _interopRequireDefault(_muDB);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('TsvStore');
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	var CHANGE_EVENT = 'change'

	// example state vars:
	,
	    _store = {
		reconnectProxyDelay: 10000,
		tryProxyReconnects: true,
		machineInfo: null
	},
	    _storeDB = new _muDB2.default();

	_storeDB.setDB(_store);

	function getReconnectFlag() {
		return _store.tryProxyReconnects;
	}

	function getReconnectProxyDelay(ms) {
		return _store.reconnectProxyDelay || ms;
	}

	function setReconnectFlag(flag) {
		_store.tryProxyReconnects = flag;
	}

	function setReconnectProxyDelay(ms) {
		_store.reconnectProxyDelay = ms;
	}

	var TsvStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getMachineInfo: function getMachineInfo() {
			return _store.machineInfo;
		}

	});

	TsvStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			case _appConstants2.default.FLASH_API_MULTIEVENT:
				Big.log('FLASH_API_MULTIEVENT dispatched... action:');
				Big.log(action);
				Big.log(JSON.stringify(action));
				if (action.data && action.data.length) {
					var method = action.data.shift();
					if (method === 'linkdown') {
						if (getReconnectFlag()) {
							var ms = getReconnectProxyDelay(10000);
							Big.warn(' LINK DOWN DOWN DOWN received.... try a reconnect in ' + ms + 'ms');
							_TsvActions2.default.reconnectHandshake(ms);
						}
					} else {
						TsvStore.emitChange({ method: method, data: action.data });
					}
				} else {
					if (!action.data) {
						Big.error('FLASH_API_MULTIEVENT but no data');
						Big.log(action.data);
					} else {
						if (action.data.hasOwnProperty('tryProxyReconnects')) {
							setReconnectFlag(action.data.tryProxyReconnects);
						}
					}
				}
				break;

			case _appConstants2.default.MACHINE_INFO:
				_store.machineInfo = action.data.data;
				TsvStore.emitChange({ type: action.actionType });
				break;

			default:
				return true;
				break;
		}
	});

	module.exports = TsvStore;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _SocketAPI = __webpack_require__(127);

	var _SocketAPI2 = _interopRequireDefault(_SocketAPI);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _reactRouter = __webpack_require__(9);

	var _TsvActionList = __webpack_require__(128);

	var _TsvActionList2 = _interopRequireDefault(_TsvActionList);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('TsvActions');

	function _callback(callback, response) {
		if (callback) {
			callback(null, response);
		} else {
			_AppDispatcher2.default.handleServerAction({
				actionType: _appConstants2.default.FLASH_API,
				data: response
			});
		}
	}

	function _callbackError(callback, error) {
		if (callback) {
			callback(error);
		} else {
			Big.warn('skipping AppDispatch for FLASH_API error... error:');
			Big.log(error);
			/*
	  AppDispatcher.handleServerAction({
	  	actionType: appConstants.FLASH_API
	  	data: response
	  });
	  */
		}
	}

	var TsvActions = {
		getMachineInfo: function getMachineInfo() {
			_axios2.default.get('/api/machine-info').then(function (response) {
				// uh, daaaaaable check?
				if (response.data && response.data.status && response.data.status == 'ok') {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.MACHINE_INFO,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to get machine info, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to get machine info, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to get machine info, call chain error probably check component tree');
				Big.log(error);
				Big.throw(error);
			});
		},
		serverHandshake: function serverHandshake() {
			// essentially, registers a handler for this event by sending to it once:
			_SocketAPI2.default.send('flash-api-multi-event', { _ws_args: { subscribe_to_externals: true } }, function (response) {
				Big.warn('SOCKET multi-event response');
				//Big.log(JSON.stringify(response));

				// we can get multiple responses at a time:
				if (response && response instanceof Array && response[0] instanceof Array) {
					if (response.length > 1) {
						response.forEach(function (R) {
							//setTimeout(
							_R_(R);
						});
					} else {
						_R_(response[0]);
					}
				} else {
					if (response && (typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object' && (response.result || response.resultCode)) {
						_callback(null, response);
					} else {
						Big.error('response did not pass the Array test!');
						Big.log(response);
					}
				}
				function _R_(response) {
					if (response) {
						Big.log('dispatching MULTIEVENT, name: ' + response[0]);
						_AppDispatcher2.default.handleServerAction({
							actionType: _appConstants2.default.FLASH_API_MULTIEVENT,
							data: response
						});
					} else {
						Big.error('[flash-api-multi-event] pinged, but nothing there?');
						Big.log(response);
						Big.warn(' ((( you should look into the linkDown / failCount stuff from old TsvService ... ))) ');
						// if above response is truly an error, track it a few times then if "link is really down", supposed to be in idle state
					}
				}
			});
		},
		reconnectHandshake: function reconnectHandshake(ms) {
			ms = ms || 10000;
			setTimeout(TsvActions.serverHandshake, ms);
		},
		apiCall: function apiCall() {
			var args = Array.prototype.slice.call(arguments),
			    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,
			    requestJson = JSON.stringify(args);

			if (_TsvActionList2.default.indexOf(args[0]) === -1) {
				_callbackError(callback, 'unsupported api action requested: ' + args[0]);
			}

			var flash_api_url = 'http://localhost:8087/tsv-proxy/flashapi';
			if (typeof window !== 'undefined') {
				if (window.location.port !== 8087) {
					flash_api_url = location.protocol + '//' + location.host + '/tsv-proxy/flashapi';
				}
			}

			_axios2.default.post(flash_api_url, requestJson, {
				headers: {
					'Content-Type': 'application/json'
				}
			}).then(function (response) {

				if (response.data || response.statusText === 'OK') {
					_callback(callback, response.data || response);
				} else {
					_callbackError(callback, response.data && response.data.error ? response.data.error : 'unknown error, check logs');
					/*
	    if (response.data && response.data.error) {
	    	Big.error('[TsvService] failed to post to flashapi, error:');
	    	Big.log(response.data.error);
	    	callback(response.data.error);
	    } else {
	    	Big.error('[TsvService] failed to post to flashapi, no data returned. full response:');
	    	Big.log(response);
	    	callback('unknown error, check logs');
	    }
	    */
				}
			}).catch(function (error) {
				//Big.log("Flash call failed " + textStatus + " - " + errorThrown);
				Big.warn("Flash call failed - error:");
				Big.log(error);
				Big.log(args);
				Big.throw(error);
				_callbackError(error);
			});
		}
	};

	module.exports = TsvActions;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('Storefront');

	var StorefrontActions = {
	  loadStorefrontData: function loadStorefrontData() {
	    _axios2.default.get('/api/get-storefront-data').then(function (response) {
	      if (response.data && response.data.data) {
	        _AppDispatcher2.default.handleServerAction({
	          actionType: _appConstants2.default.STOREFRONT_DATA_RECEIVED,
	          data: response.data.data
	        });
	      }
	    }).catch(function (error) {
	      Big.error('failed to refresh customer???');
	      Big.log(error);
	    });
	  },
	  minusQty: function minusQty(product) {
	    // coil
	    var coil = product.coilNumber;

	    Big.log('removeOneQty ///////');
	    Big.log(product, coil);

	    _TsvActions2.default.apiCall('removeFromCartByCoilNo', coil, function (err, ok) {
	      if (err) Big.throw(err);
	      if (ok && ok.shoppingCart) {
	        _TsvSettingsStore2.default.setCache('shoppingCart', ok.shoppingCart);
	      } else {
	        _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	          if (err) Big.throw(err);
	          _TsvSettingsStore2.default.setCache('shoppingCart', data);
	        });
	      }
	    });
	  },
	  removeAllQty: function removeAllQty(product) {
	    // coil, qty

	    var coil = product.coilNumber,
	        qty = product.qtyInCart;

	    Big.log('removeAllQty ///////');
	    Big.log(product, coil, qty);

	    _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	      if (err) Big.throw(err);
	      _TsvSettingsStore2.default.setCache('shoppingCart', data);

	      var removeQty = function removeQty(qty) {
	        if (qty > 0) {
	          qty -= 1;
	          _TsvActions2.default.apiCall('removeFromCartByCoilNo', coil, function (err, ok) {
	            if (err) Big.throw(err);
	            if (ok && ok.shoppingCart) {
	              _TsvSettingsStore2.default.setCache('shoppingCart', ok.shoppingCart);
	            } else {
	              _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	                if (err) Big.throw(err);
	                _TsvSettingsStore2.default.setCache('shoppingCart', data);
	                removeQty(qty);
	              });
	            }
	          });
	          // don't think we need to do the last cart retrieval...
	          /*
	          } else {
	            TsvActions.apiCall('fetchShoppingCart2', (err, data) => {
	              if (err) Big.throw(err);
	              TsvSettingsStore.setCache('shoppingCart', data);
	            });
	            */
	        }
	      };

	      removeQty(qty);
	    });
	  },
	  addQty: function addQty(product) {
	    // coil

	    var coil = product.coilNumber;

	    Big.log('removeAllQty ///////');
	    Big.log(product, coil);

	    _TsvActions2.default.apiCall('addToCartByCoil', coil, function (err, ok) {
	      if (err) Big.throw(err);
	      if (ok && ok.shoppingCart) {
	        _TsvSettingsStore2.default.setCache('shoppingCart', ok.shoppingCart);
	      } else {
	        _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	          if (err) Big.throw(err);
	          _TsvSettingsStore2.default.setCache('shoppingCart', data);
	        });
	      }
	    });
	  },
	  toggleIDtoCategoryFilter: function toggleIDtoCategoryFilter(ID) {
	    _AppDispatcher2.default.handleServerAction({
	      actionType: _appConstants2.default.TOGGLE_CATEGORY_ID_TO_FILTER,
	      data: ID
	    });
	  },
	  clearCategoryFilter: function clearCategoryFilter() {
	    _AppDispatcher2.default.handleServerAction({
	      actionType: _appConstants2.default.CLEAR_CATEGORY_FILTER,
	      data: null
	    });
	  },
	  addToCart: function addToCart(product, e) {
	    if (product.stockCount > 0) {
	      _TsvActions2.default.apiCall('addToCartByProductID', product.productID, function (err, response) {
	        if (err) Big.throw(err);
	        _TsvSettingsStore2.default.setConfig('pvr', response);
	        if (response && response.shoppingCart) {
	          _TsvSettingsStore2.default.setCache('shoppingCart', response.shoppingCart);
	        } else {
	          _TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
	            if (err) Big.throw(err);
	            _TsvSettingsStore2.default.setCache('shoppingCart', data);
	          });
	        }
	      });
	    }
	  }
	};

	module.exports = StorefrontActions;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/*****

			WEBPACK IS PUKING on including this in a "watch" update,
			have to stop and start it, which is fucking annoying.
			so, make my own key mirror.

	********/
	//var keyMirror = require('react/lib/keyMirror');

	var keyMirror = function keyMirror(obj) {
		Object.keys(obj).forEach(function (prop) {
			obj[prop] = prop;
		});
		return obj;
	};

	// simply mirrors the key to the value, so you don't have to type doubles all the time... :)
	var appConstants = keyMirror({

		// Root section updaters:
		UPDATE_ROOT_CONFIG: null,
		UPDATE_ROOT_CACHE: null,
		UPDATE_ROOT_SESSION: null,

		// Storefront:
		TOGGLE_CATEGORY_ID_TO_FILTER: null,
		CLEAR_CATEGORY_FILTER: null,
		STOREFRONT_DATA_RECEIVED: null,

		// Customer:
		CUSTOMER_LOGOUT: null,

		LICENSE_SCANNED_LOGIN: null,
		PRINT_SCANNED_LOGIN: null,
		CUSTOMER_MATCHED_LOGIN: null,
		CUSTOMER_RESET_LOGIN: null,

		LICENSE_SCANNED_SIGNUP: null,
		//	PRINT_SCANNED_SIGNUP: null,
		PRINT_1SCANNED_SIGNUP: null,
		PRINT_2SCANNED_SIGNUP: null,
		PRINT_3SCANNED_SIGNUP: null,
		MOBILE_NUMBER_CAPTURED_SIGNUP: null,
		EMAIL_CAPTURED_SIGNUP: null,
		PHOTO_TAKEN_SIGNUP: null,
		CUSTOMER_REGISTERED_SIGNUP: null,
		CUSTOMER_RESET_SIGNUP: null,
		CUSTOMER_REFRESH: null,
		ADMIN_VERIFIED_SIGNUP: null,

		// Emulator:
		TEST_EMULATOR_RESULT: null,

		// Admin panel:
		TEST_REGISTER_PRINT: null,
		TEST_MATCH_PRINT: null,
		CLEAR_API_RESPONSES: null,
		MACHINE_INFO: null,
		REGISTER_CLIENT_USER_PRINT: null,
		CLIENT_USERS_RECEIVED: null,
		STOREFRONT_DATA_REFRESHED: null,

		// Session
		SESSION_CREATED: null,
		SESSION_UPDATED: null,
		ADDED_USER_TO_SESSION: null,
		SESSION_CLOSED: null,
		SESSION_DROPPED: null,
		TRANSACTION_CREATED: null,
		TRANSACTION_UPDATED: null,

		// TSV:
		FLASH_API_MULTIEVENT: null,
		FLASH_API: null,

		// Foo Section Describer (optional)
		EXAMPLE_ACTION_CONSTANT: null

	});

	module.exports = appConstants;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import SocketAPI from '../utils/SocketAPI'

	var Big = new _BigLogger2.default('AdminActions');
	//import { browserHistory } from 'react-router'

	var AdminActions = {
		getClientUsers: function getClientUsers() {
			_axios2.default.get('/api/get-client-users').then(function (response) {
				// uh, daaaaaable check?
				if (response.data && response.data.status && response.data.status == 'ok') {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.CLIENT_USERS_RECEIVED,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to get client users, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to get client users, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to get client users, call chain error probably check component tree');
				Big.log(error);
				//Big.throw(error);
			});
		},
		refreshStorefrontData: function refreshStorefrontData() {
			_axios2.default.get('/api/refresh-storefront-data').then(function (response) {
				// uh, daaaaaable check?
				if (response.data && response.data.status && response.data.status == 'ok') {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.STOREFRONT_DATA_REFRESHED,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to refresh store data, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to refresh store data, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to refresh store data, call chain error probably check component tree');
				Big.log(error);
				Big.throw(error);
			});
		},
		registerClientUserPrintComplete: function registerClientUserPrintComplete(config) {
			_axios2.default.post('/api/register-client-user-print-complete', config // .post() expects and passes this as a json object
			).then(function (response) {
				// fire and forget this one
				if (response.data && response.data.status) {
					/*
	    AppDispatcher.handleServerAction({
	    	actionType: config.ACTION || appConstants.TEST_REGISTER_PRINT,
	    	data: response.data
	    });
	    */
					Big.log('Client User print registration complete');
					Big.log(response.data);
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to register print, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to register print, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to register print, call chain error probably check component tree');
				Big.log(error);
				//Big.throw(error);
			});
		},
		registerPrint: function registerPrint(config) {
			_axios2.default.post('/api/print-reader/grab-and-register-print', config // .post() expects and passes this as a json object
			).then(function (response) {
				// uh, daaaaaable check?
				if (response.data && response.data.status && response.data.status == 'ok') {
					_AppDispatcher2.default.handleServerAction({
						actionType: config.ACTION || _appConstants2.default.TEST_REGISTER_PRINT,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to register print, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to register print, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to register print, call chain error probably check component tree');
				Big.log(error);
				Big.throw(error);
			});
		},
		matchPrint: function matchPrint(config) {
			_axios2.default.post('/api/print-reader/match-print', config // .post() expects and passes this as a json object
			).then(function (response) {
				// uh, daaaaaable check?
				if (response.data && response.data.status && response.data.status == 'ok') {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.TEST_MATCH_PRINT,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to match print, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to match print, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to match print, call chain error probably check component tree');
				Big.log(error);
				//Big.throw(error);
			});
		},
		clearApiResponses: function clearApiResponses() {
			_AppDispatcher2.default.handleServerAction({
				actionType: _appConstants2.default.CLEAR_API_RESPONSES
			});
		}
	};

	module.exports = AdminActions;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import muDB from '../../lib/muDB'

	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	var CHANGE_EVENT = 'change'

	// example state vars:
	,
	    _store = {
		apiResponses: []
	}

	//	, _storeDB = new muDB()
	;

	//_storeDB.setDB(_store);

	var AdminStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getApiResponses: function getApiResponses() {
			return _store.apiResponses;
		},

		getClientUsers: function getClientUsers() {
			return _store.clientUsers;
		}

	});

	AdminStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			case _appConstants2.default.TEST_REGISTER_PRINT:
			case _appConstants2.default.TEST_MATCH_PRINT:
			case _appConstants2.default.REGISTER_CLIENT_USER_PRINT:
				if (action.data && action.data.apiResponses) {
					_store.apiResponses = action.data.apiResponses;
				}
				AdminStore.emitChange({ type: action.actionType });
				break;

			case _appConstants2.default.CLIENT_USERS_RECEIVED:
				_store.clientUsers = action.data.clientUsers;
				AdminStore.emitChange({ type: action.actionType });
				break;

			case _appConstants2.default.STOREFRONT_DATA_REFRESHED:
				//_store.clientUsers = action.data.clientUsers;
				AdminStore.emitChange({ type: action.actionType });
				break;

			case _appConstants2.default.CLEAR_API_RESPONSES:
				_store.apiResponses = [];
				break;

			default:
				return true;
				break;
		}
	});

	module.exports = AdminStore;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _SocketAPI = __webpack_require__(127);

	var _SocketAPI2 = _interopRequireDefault(_SocketAPI);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _reactRouter = __webpack_require__(9);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _TsvUtils = __webpack_require__(67);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('CustomerLoginActions');
	//import TsvService from '../../lib/TsvService'
	//import RootscopeActions from '../actions/RootscopeActions'

	var CustomerLoginActions = {
		refreshCustomer: function refreshCustomer() {
			_axios2.default.get('/api/customer-refresh').then(function (response) {
				if (response.data && response.data.customer) {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.CUSTOMER_REFRESH,
						data: response.data
					});
				}
			}).catch(function (error) {
				Big.error('failed to refresh customer???');
				Big.log(error);
			});
		},
		scanPrint: function scanPrint(loginToken, simulatorPrintCustomer) {
			Big.log('scanPrint, check what we are passing');
			Big.log(loginToken, simulatorPrintCustomer);
			_SocketAPI2.default.send('activate-module', { action: 'scan-print', module: 'print-scanner', gui: 'login', loginToken: loginToken, simulatorPrintCustomer: simulatorPrintCustomer }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.PRINT_SCANNED_LOGIN,
					data: data
				});
			});
		},
		scanLicense: function scanLicense(loginToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'scan-license', module: 'license-scanner', gui: 'login', loginToken: loginToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_SCANNED_LOGIN,
					data: data
				});
			});
		},
		swipeLicense: function swipeLicense(loginToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'swipe-license', module: 'license-scanner', gui: 'login', loginToken: loginToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_SWIPED_LOGIN,
					data: data
				});
			});
		},
		dipLicense: function dipLicense(loginToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'dip-license', module: 'license-scanner', gui: 'login', loginToken: loginToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_DIPPED_LOGIN,
					data: data
				});
			});
		},
		startMatching: function startMatching(loginToken) {
			_SocketAPI2.default.send('customer-match-login', { action: 'match', loginToken: loginToken }, function (data) {

				/**** temporary call, due to session probs with IO ****/
				if (data && data.customer) {
					_axios2.default.post('/api/set-loggedin-customer', { customer: data.customer }).then(function (response) {
						Big.log('temp action: updated the current customer after login');
					}).catch(function (error) {
						Big.error('failed to set current customer???');
						Big.log(error);
					});
				}
				/**** END temporary call ****/

				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.CUSTOMER_MATCHED_LOGIN,
					data: data
				});
			});
		},
		clearSteps: function clearSteps() {
			_AppDispatcher2.default.handleServerAction({
				actionType: _appConstants2.default.CUSTOMER_RESET_LOGIN
			});
		},
		customerLogout: function customerLogout() {
			(0, _TsvUtils.emptyCart)();
			_axios2.default.get('/api/reset-current-customer').then(function (response) {
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.CUSTOMER_LOGOUT
				});
			}).catch(function (error) {
				Big.error('failed to logout customer???');
				Big.log(error);
			});
		}
	};

	module.exports = CustomerLoginActions;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _utils = __webpack_require__(5);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var CHANGE_EVENT = 'change',
	    _store = {
		loginStepsComplete: [],
		signupStepsComplete: [],
		customer: null
	};
	//import muDB from '../../lib/muDB'

	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	function pushStep(kind, step) {
		if (_store[kind + 'StepsComplete']) {
			if (_store[kind + 'StepsComplete'].indexOf(step) === -1) {
				_store[kind + 'StepsComplete'].push(step);
			}
		}
	}

	function clearSteps(kind) {
		if (_store[kind + 'StepsComplete']) {
			_store[kind + 'StepsComplete'] = [];
		}
	}

	function setCustomer(obj) {
		_store.customer = obj;
	}

	function clearCustomer() {
		_store.customer = null;
	}

	var CustomerStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getStepsCompleted: function getStepsCompleted(kind) {
			if (_store[kind + 'StepsComplete']) {
				return _store[kind + 'StepsComplete'];
			}
			return [];
		},

		getCustomer: function getCustomer() {
			return _store.customer;
		}
	});

	CustomerStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			/// signup
			case _appConstants2.default.LICENSE_SCANNED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.LICENSE_SCANNED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.LICENSE_SCANNED_SIGNUP, status: action.data.status });
				break;
			/*
	  		case appConstants.PRINT_SCANNED_SIGNUP:
	  			if (action.data.status === 'ok') {
	  				pushStep('signup', appConstants.PRINT_SCANNED_SIGNUP);
	  			}
	  			CustomerStore.emitChange({ type: appConstants.PRINT_SCANNED_SIGNUP, status: action.data.status });
	  			break;
	  */

			case _appConstants2.default.PRINT_1SCANNED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.PRINT_1SCANNED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.PRINT_1SCANNED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.PRINT_2SCANNED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.PRINT_2SCANNED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.PRINT_2SCANNED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.PRINT_3SCANNED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.PRINT_3SCANNED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.PRINT_3SCANNED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.PHOTO_TAKEN_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.PHOTO_TAKEN_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.PHOTO_TAKEN_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.EMAIL_CAPTURED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.EMAIL_CAPTURED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.EMAIL_CAPTURED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.MOBILE_NUMBER_CAPTURED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.MOBILE_NUMBER_CAPTURED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.MOBILE_NUMBER_CAPTURED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.ADMIN_VERIFIED_SIGNUP:
				if (action.data.status === 'ok') {
					pushStep('signup', _appConstants2.default.ADMIN_VERIFIED_SIGNUP);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.ADMIN_VERIFIED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.CUSTOMER_REGISTERED_SIGNUP:
				// CustomerStore will decide if the event is ok or err
				if (action.data.status === 'ok' && action.data.customer) {
					clearSteps('signup');
					setCustomer(action.data.customer);
				} else {
					clearCustomer();
				}
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_REGISTERED_SIGNUP, status: action.data.status });
				break;

			case _appConstants2.default.CUSTOMER_RESET_SIGNUP:
				clearSteps('signup');
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_RESET_SIGNUP });
				break;

			/// login
			case _appConstants2.default.LICENSE_SCANNED_LOGIN:
				if (action.data.status === 'ok') {
					pushStep('login', _appConstants2.default.LICENSE_SCANNED_LOGIN);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.LICENSE_SCANNED_LOGIN, status: action.data.status });
				break;

			case _appConstants2.default.PRINT_SCANNED_LOGIN:
				if (action.data.status === 'ok') {
					pushStep('login', _appConstants2.default.PRINT_SCANNED_LOGIN);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.PRINT_SCANNED_LOGIN, status: action.data.status });
				break;

			case _appConstants2.default.CUSTOMER_MATCHED_LOGIN:
				// CustomerStore will decide if the event is ok or err
				if (action.data.status === 'ok' && action.data.customer) {
					clearSteps('login');
					setCustomer(action.data.customer);
				} else {
					clearCustomer();
				}
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_MATCHED_LOGIN, status: action.data.status });
				break;

			case _appConstants2.default.CUSTOMER_RESET_LOGIN:
				clearSteps('login');
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_RESET_LOGIN });
				break;

			case _appConstants2.default.CUSTOMER_REFRESH:
				clearSteps('login');
				clearSteps('signup');
				if (action.data) {
					setCustomer(action.data.customer);
				}
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_REFRESH, status: action.data.status });
				break;

			case _appConstants2.default.CUSTOMER_LOGOUT:
				clearSteps('login');
				clearSteps('signup');
				clearCustomer();
				CustomerStore.emitChange({ type: _appConstants2.default.CUSTOMER_LOGOUT });
				break;

			default:
				return true;
				break;
		}
	});

	module.exports = CustomerStore;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerLoginActions = __webpack_require__(80);

	var _CustomerLoginActions2 = _interopRequireDefault(_CustomerLoginActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorLicense: null
	    };

	    _this._onCLStoreChange = _this._onCLStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCLStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCLStoreChange);
	    }
	  }, {
	    key: '_onCLStoreChange',
	    value: function _onCLStoreChange(event) {
	      if (event.type === _appConstants2.default.PRINT_SCANNED_SIGNUP) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem scanning your fingerprint, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'selectSimulatorLicense',
	    value: function selectSimulatorLicense(who, e) {
	      this.setState({
	        simulatorLicense: who
	      });
	    }
	  }, {
	    key: 'startLicenseScan',
	    value: function startLicenseScan() {
	      if (this.props.testing && !this.state.simulatorLicense) {
	        return alert('TESTING: Please choose a customer license from the orange buttons.');
	      }
	      _CustomerLoginActions2.default.scanLicense(this.props.loginToken, this.state.simulatorLicense);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Scan your ID'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Put your driver\'s license on the scanner to the left, press below to scan'
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'primary', onClick: this.startLicenseScan.bind(this) },
	              'Start Scan'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer license:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'KrisKhan') },
	                  'Kris Khan'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'MaryJaneSmith') },
	                  'Mary Jane Smith'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'BuddyGalore') },
	                  'Buddy Galore'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorLicense || 'none yet',
	              ', login token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.loginToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerLoginActions = __webpack_require__(80);

	var _CustomerLoginActions2 = _interopRequireDefault(_CustomerLoginActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPrint: null
	    };

	    _this._onCLStoreChange = _this._onCLStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCLStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCLStoreChange);
	    }
	  }, {
	    key: '_onCLStoreChange',
	    value: function _onCLStoreChange(event) {
	      // this component unmounting is causing an undefined error due to setState() on an unmounted component
	      // FIXME: change to passing CLStoreChange from parent as a prop, instead of directly connecting.
	      // make this change through all the steps
	      if (event.type === _appConstants2.default.PRINT_SCANNED_LOGIN) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem scanning your fingerprint, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'selectSimulatorPrint',
	    value: function selectSimulatorPrint(who, e) {
	      this.setState({
	        simulatorPrint: who
	      });
	    }
	  }, {
	    key: 'startPrintScan',
	    value: function startPrintScan() {
	      if (this.props.testing && !this.state.simulatorPrint) {
	        return alert('TESTING: Please choose a customer print from the orange buttons.');
	      }
	      _CustomerLoginActions2.default.scanPrint(this.props.loginToken, this.state.simulatorPrint);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Scan your finger or thumb print'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Put your finger or thumb on the scanner to the left.'
	            ),
	            _react2.default.createElement(
	              _E.Alert,
	              { type: 'info' },
	              'Use the same finger or thumb that you used at sign up.',
	              _react2.default.createElement('br', null),
	              _react2.default.createElement(
	                'strong',
	                null,
	                'HINT: '
	              ),
	              'we asked for your thumb and your index finger from your dominant hand.'
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'warning', onClick: this.startPrintScan.bind(this) },
	              'TESTING: Press to "record" the scan, this will happen automatically when hardware is attached.'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer finger/thumb print:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'KrisKhan') },
	                  'Kris Khan'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'MaryJaneSmith') },
	                  'Mary Jane Smith'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'BuddyGalore') },
	                  'Buddy Galore'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorPrint || 'none yet',
	              ', login token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.loginToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerLoginActions = __webpack_require__(80);

	var _CustomerLoginActions2 = _interopRequireDefault(_CustomerLoginActions);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'

	//import CL_Store from '../../stores/CustomerStore'

	var Step1 = function (_Component) {
	  _inherits(Step1, _Component);

	  function Step1(props, context) {
	    _classCallCheck(this, Step1);

	    // MUST call super() before any this.*
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Step1).call(this, props, context));
	  }

	  _createClass(Step1, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _CustomerLoginActions2.default.startMatching(this.props.loginToken);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'One moment please while we match....'
	            ),
	            _react2.default.createElement(_E.Spinner, null)
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: trying to match the customer'
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'login token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.loginToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step1;
	}(_react.Component);

	exports.default = Step1;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _SocketAPI = __webpack_require__(127);

	var _SocketAPI2 = _interopRequireDefault(_SocketAPI);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _reactRouter = __webpack_require__(9);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import TsvService from '../../lib/TsvService'
	//import RootscopeActions from '../actions/RootscopeActions'

	var Big = new _BigLogger2.default('CustomerSignupActions');

	var CustomerSignupActions = {
		refreshCustomer: function refreshCustomer() {
			_axios2.default.get('/api/customer-refresh').then(function (response) {
				if (response.data && response.data.customer) {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.CUSTOMER_REFRESH,
						data: response.data
					});
				}
			}).catch(function (error) {
				Big.error('failed to refresh customer???');
				Big.log(error);
			});
		},
		captureEmail: function captureEmail(signupToken, email) {
			_SocketAPI2.default.send('customer-signup', { action: 'capture-email', gui: 'signup', signupToken: signupToken, email: email }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.EMAIL_CAPTURED_SIGNUP,
					data: data
				});
			});
		},
		captureMobileNumber: function captureMobileNumber(signupToken, mobileNumber) {
			_SocketAPI2.default.send('customer-signup', { action: 'capture-mobile-number', gui: 'signup', signupToken: signupToken, mobileNumber: mobileNumber }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.MOBILE_NUMBER_CAPTURED_SIGNUP,
					data: data
				});
			});
		},
		grabPhoto: function grabPhoto(signupToken, simulatorPhotoCustomer) {
			_SocketAPI2.default.send('activate-module', { action: 'scan-print', module: 'camera', gui: 'signup', signupToken: signupToken, simulatorPhotoCustomer: simulatorPhotoCustomer }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.PHOTO_TAKEN_SIGNUP,
					data: data
				});
			});
		},
		scanPrint: function scanPrint(signupToken, whichPrint, simulatorPrintCustomer) {
			_SocketAPI2.default.send('activate-module', { action: 'scan-print', module: 'print-scanner', gui: 'signup', signupToken: signupToken, simulatorPrintCustomer: simulatorPrintCustomer }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default['PRINT_' + whichPrint + 'SCANNED_SIGNUP'],
					data: data
				});
			});
		},
		scanLicense: function scanLicense(signupToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'scan-license', module: 'license-scanner', gui: 'signup', signupToken: signupToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_SCANNED_SIGNUP,
					data: data
				});
			});
		},
		swipeLicense: function swipeLicense(signupToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'swipe-license', module: 'license-scanner', gui: 'signup', signupToken: signupToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_SWIPED_SIGNUP,
					data: data
				});
			});
		},
		dipLicense: function dipLicense(signupToken, simulatorLicenseName) {
			_SocketAPI2.default.send('activate-module', { action: 'dip-license', module: 'license-scanner', gui: 'signup', signupToken: signupToken, simulatorLicenseName: simulatorLicenseName }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.LICENSE_DIPPED_SIGNUP,
					data: data
				});
			});
		},
		adminVerify: function adminVerify(signupToken, simulatorPrintAdmin) {
			_SocketAPI2.default.send('customer-signup', { action: 'admin-verify', gui: 'signup', signupToken: signupToken, simulatorPrintAdmin: simulatorPrintAdmin }, function (data) {
				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.ADMIN_VERIFIED_SIGNUP,
					data: data
				});
			});
		},
		finishRegistering: function finishRegistering(signupToken) {
			_SocketAPI2.default.send('customer-signup', { action: 'register', signupToken: signupToken }, function (data) {

				/**** temporary call, due to session probs with IO ****/
				if (data && data.customer) {
					_axios2.default.post('/api/set-loggedin-customer', { customer: data.customer }).then(function (response) {
						Big.log('temp action: updated the current customer after signup');
					}).catch(function (error) {
						Big.error('failed to set current customer???');
						Big.log(error);
					});
				}
				/**** END temporary call ****/

				// we're not validating here, either the scan completed or failed... pass it through.
				// CustomerStore will decide if the event is ok or err
				_AppDispatcher2.default.handleServerAction({
					actionType: _appConstants2.default.CUSTOMER_REGISTERED_SIGNUP,
					data: data
				});
			});
		},
		clearSteps: function clearSteps() {
			_AppDispatcher2.default.handleServerAction({
				actionType: _appConstants2.default.CUSTOMER_RESET_SIGNUP
			});
		}
	};

	module.exports = CustomerSignupActions;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorLicense: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      if (event.type === _appConstants2.default.LICENSE_SCANNED_LOGIN) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem scanning your license, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'selectSimulatorLicense',
	    value: function selectSimulatorLicense(who, e) {
	      this.setState({
	        simulatorLicense: who
	      });
	    }
	  }, {
	    key: 'startLicenseScan',
	    value: function startLicenseScan() {
	      if (this.props.testing && !this.state.simulatorLicense) {
	        return alert('TESTING: Please choose a customer license from the orange buttons.');
	      }
	      _CustomerSignupActions2.default.scanLicense(this.props.signupToken, this.state.simulatorLicense);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Scan your ID'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Put your driver\'s license on the scanner to the left, press below to scan'
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'primary', onClick: this.startLicenseScan.bind(this) },
	              'Start Scan'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer license:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'KrisKhan') },
	                  'Kris Khan'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'MaryJaneSmith') },
	                  'Mary Jane Smith'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorLicense.bind(this, 'BuddyGalore') },
	                  'Buddy Galore'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorLicense || 'none yet',
	              ', login token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Big = new _BigLogger2.default('SignupStep2');

	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPrint: null,
	      completedSteps: []
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      var scanEvents = [_appConstants2.default.PRINT_1SCANNED_SIGNUP, _appConstants2.default.PRINT_2SCANNED_SIGNUP, _appConstants2.default.PRINT_3SCANNED_SIGNUP];
	      if (scanEvents.indexOf(event.type) > -1) {
	        var state = {
	          completedSteps: _CustomerStore2.default.getStepsCompleted('signup')
	        };
	        this.setState(state);
	        /*
	        if (event.type === appConstants.PRINT_SCANNED_SIGNUP) {
	        	if (event.status === 'ok') {
	        		this.setState({
	        			errorMsg: null
	        		});
	        	} else {
	        		this.setState({
	        			errorMsg: 'There was a problem scanning your fingerprint, please try again.'
	        		});
	        	}
	        }
	        */
	      } else {
	          Big.error('HAY not a known event???');
	          Big.log(event);
	        }
	    }
	  }, {
	    key: 'selectSimulatorPrint',
	    value: function selectSimulatorPrint(who, e) {
	      this.setState({
	        simulatorPrint: who
	      });
	    }
	  }, {
	    key: 'startPrintScan',
	    value: function startPrintScan() {
	      if (this.props.testing && !this.state.simulatorPrint) {
	        return alert('TESTING: Please choose a customer print from the orange buttons.');
	      }

	      var whichPrint = 1,
	          cs = this.state.completedSteps;
	      if (cs && cs.length) {
	        if (cs.indexOf(_appConstants2.default.PRINT_3SCANNED_SIGNUP) > -1) {
	          whichPrint = 4;
	        } else if (cs.indexOf(_appConstants2.default.PRINT_2SCANNED_SIGNUP) > -1) {
	          whichPrint = 3;
	        } else if (cs.indexOf(_appConstants2.default.PRINT_1SCANNED_SIGNUP) > -1) {
	          whichPrint = 2;
	        }
	      }

	      if (whichPrint < 4) {
	        _CustomerSignupActions2.default.scanPrint(this.props.signupToken, whichPrint, this.state.simulatorPrint);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Scan your finger or thumb print'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'We need to take three scans of your finger or thumb.'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              null,
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '33%', md: '33%', lg: '33%' },
	                this.renderThumb(1)
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '33%', md: '33%', lg: '33%' },
	                this.renderThumb(2)
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { sm: '33%', md: '33%', lg: '33%' },
	                this.renderThumb(3)
	              )
	            ),
	            _react2.default.createElement(
	              _E.Alert,
	              { type: 'info' },
	              'Use the same finger or thumb for each scan.'
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'warning', onClick: this.startPrintScan.bind(this) },
	              'TESTING: Press to "record" the scan, this will happen automatically when hardware is attached.'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderThumb',
	    value: function renderThumb(whichOne) {
	      var checkConstant = _appConstants2.default['PRINT_' + whichOne + 'SCANNED_SIGNUP'],
	          cs = this.state.completedSteps,
	          RESULT;
	      if (cs && cs.length && cs.indexOf(checkConstant) > -1) {
	        RESULT = _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            _E.Button,
	            { type: 'success' },
	            _react2.default.createElement(_E.Glyph, { icon: 'check' })
	          ),
	          _react2.default.createElement(
	            'span',
	            { style: { display: 'block' } },
	            'Complete!'
	          )
	        );
	      } else {
	        RESULT = _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            _E.Button,
	            { type: 'danger' },
	            _react2.default.createElement(_E.Glyph, { icon: 'issue-opened' })
	          ),
	          _react2.default.createElement(
	            'span',
	            { style: { display: 'block' } },
	            'Not scanned'
	          )
	        );
	      }
	      return _react2.default.createElement(
	        'div',
	        { style: { textAlign: 'center' } },
	        RESULT
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer finger/thumb print:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'KrisKhan') },
	                  'Kris Khan'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'MaryJaneSmith') },
	                  'Mary Jane Smith'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'BuddyGalore') },
	                  'Buddy Galore'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorPrint || 'none yet',
	              ', signup token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            ),
	            _react2.default.createElement(
	              'pre',
	              { style: { fontSize: '0.75em' } },
	              JSON.stringify(this.state.completedSteps)
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPhoto: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      if (event.type === _appConstants2.default.PHOTO_TAKEN_SIGNUP) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem taking your photo, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'selectSimulatorPhoto',
	    value: function selectSimulatorPhoto(who, e) {
	      this.setState({
	        simulatorPhoto: who
	      });
	    }
	  }, {
	    key: 'startPhotoCapture',
	    value: function startPhotoCapture() {
	      if (this.props.testing && !this.state.simulatorPhoto) {
	        return alert('TESTING: Please choose a customer print from the orange buttons.');
	      }
	      _CustomerSignupActions2.default.grabPhoto(this.props.signupToken, this.state.simulatorPhoto);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement('div', { style: { width: '100px', height: '100px', borderRadius: '50px', backgroundColor: '#84E60E', margin: '0 auto 1em' } }),
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Initial photo for Facial Recognition'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Look at the green bubble above.'
	            ),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'warning', onClick: this.startPhotoCapture.bind(this) },
	              'TESTING: Press to "take" the photo, this will happen automatically on a countdown, like a photo booth.'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer photo:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPhoto.bind(this, 'KrisKhan') },
	                  'Kris Khan'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPhoto.bind(this, 'MaryJaneSmith') },
	                  'Mary Jane Smith'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPhoto.bind(this, 'BuddyGalore') },
	                  'Buddy Galore'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorPhoto || 'none yet',
	              ', signup token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPrint: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      if (event.type === _appConstants2.default.MOBILE_NUMBER_ADDED_SIGNUP) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem with your mobile number, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'updateNumber',
	    value: function updateNumber(e) {
	      this.setState({
	        mobileNumber: e.target.value
	      });
	    }
	  }, {
	    key: 'saveMobileNumber',
	    value: function saveMobileNumber() {
	      if (this.state.mobileNumber && this.mobileNumberIsOK()) {
	        _CustomerSignupActions2.default.captureMobileNumber(this.props.signupToken, this.state.mobileNumber);
	      }
	    }
	  }, {
	    key: 'mobileNumberIsOK',
	    value: function mobileNumberIsOK() {
	      if (this.state.mobileNumber) {
	        // eventually, validate it!
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Mobile Number'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Punch in your mobile number so we can send a receipt to your phone.'
	            ),
	            _react2.default.createElement(
	              _E.InputGroup,
	              { contiguous: true },
	              _react2.default.createElement(
	                _E.InputGroup.Section,
	                { grow: true },
	                _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Enter your mobile number', _vkenabled: 'true', onKeyUp: this.updateNumber.bind(this) })
	              ),
	              _react2.default.createElement(
	                _E.InputGroup.Section,
	                null,
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: 'primary', onClick: this.saveMobileNumber.bind(this) },
	                  'Add Phone Number'
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPrint: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      if (event.type === _appConstants2.default.MOBILE_NUMBER_ADDED_SIGNUP) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem with your email, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'updateNumber',
	    value: function updateNumber(e) {
	      this.setState({
	        email: e.target.value
	      });
	    }
	  }, {
	    key: 'saveEmail',
	    value: function saveEmail() {
	      if (this.state.email && this.emailIsOK()) {
	        _CustomerSignupActions2.default.captureEmail(this.props.signupToken, this.state.email);
	      }
	    }
	  }, {
	    key: 'emailIsOK',
	    value: function emailIsOK() {
	      if (this.state.email) {
	        // eventually, validate it!
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Email'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Add your email so we can send you refunds and change through interac.'
	            ),
	            _react2.default.createElement(
	              _E.InputGroup,
	              { contiguous: true },
	              _react2.default.createElement(
	                _E.InputGroup.Section,
	                { grow: true },
	                _react2.default.createElement(_E.FormInput, { type: 'text', placeholder: 'Enter your email', _vkenabled: 'true', onKeyUp: this.updateNumber.bind(this) })
	              ),
	              _react2.default.createElement(
	                _E.InputGroup.Section,
	                null,
	                _react2.default.createElement(
	                  _E.Button,
	                  { type: 'primary', onClick: this.saveEmail.bind(this) },
	                  'Add Email'
	                )
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _CustomerStore = __webpack_require__(81);

	var _CustomerStore2 = _interopRequireDefault(_CustomerStore);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'


	var Step = function (_Component) {
	  _inherits(Step, _Component);

	  function Step(props, context) {
	    _classCallCheck(this, Step);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Step).call(this, props, context));
	    // MUST call super() before any this.*


	    _this.state = {
	      errorMsg: null,
	      simulatorPrint: null
	    };

	    _this._onCSStoreChange = _this._onCSStoreChange.bind(_this);

	    return _this;
	  }

	  _createClass(Step, [{
	    key: 'componentDidMount',


	    // Add change listeners to stores
	    value: function componentDidMount() {
	      _CustomerStore2.default.addChangeListener(this._onCSStoreChange);
	    }

	    // Remove change listers from stores

	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _CustomerStore2.default.removeChangeListener(this._onCSStoreChange);
	    }
	  }, {
	    key: '_onCSStoreChange',
	    value: function _onCSStoreChange(event) {
	      if (event.type === _appConstants2.default.ADMIN_VERIFIED_SIGNUP) {
	        if (event.status === 'ok') {
	          this.setState({
	            errorMsg: null
	          });
	        } else {
	          this.setState({
	            errorMsg: 'There was a problem recognizing the admin, please try again.'
	          });
	        }
	      }
	    }
	  }, {
	    key: 'selectSimulatorPrint',
	    value: function selectSimulatorPrint(who, e) {
	      this.setState({
	        simulatorPrint: who
	      });
	    }
	  }, {
	    key: 'startPrintScan',
	    value: function startPrintScan() {
	      if (this.props.testing && !this.state.simulatorPrint) {
	        return alert('TESTING: Please choose a customer print from the orange buttons.');
	      }
	      _CustomerSignupActions2.default.adminVerify(this.props.signupToken, this.state.simulatorPrint);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'Attendant verification of your signup'
	            ),
	            _react2.default.createElement(
	              'p',
	              null,
	              'Please alert one of the attendants to verify your identity, and then scan their fingerprint.'
	            ),
	            this.renderErrorMsg(),
	            _react2.default.createElement(
	              _E.Button,
	              { type: 'warning', onClick: this.startPrintScan.bind(this) },
	              'TESTING: Press to "record" the scan, this will happen automatically when hardware is attached.'
	            )
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderErrorMsg',
	    value: function renderErrorMsg() {
	      if (this.state.errorMsg) {
	        return _react2.default.createElement(
	          _E.Alert,
	          { type: 'danger' },
	          this.state.errorMsg
	        );
	      }
	      return null;
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: choose a customer finger/thumb print:'
	            ),
	            _react2.default.createElement(
	              _E.Row,
	              { style: { marginBottom: '1em' } },
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'Admin') },
	                  'ADMIN'
	                )
	              ),
	              _react2.default.createElement(
	                _E.Col,
	                { basis: '33%', style: { textAlign: 'center', marginBottom: '1em' } },
	                _react2.default.createElement(
	                  _E.Button,
	                  { size: 'sm', type: 'warning', onClick: this.selectSimulatorPrint.bind(this, 'NotAdmin') },
	                  'NOT admin'
	                )
	              )
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'Picked: ',
	              this.state.simulatorPrint || 'none yet',
	              ', signup token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step;
	}(_react.Component);

	exports.default = Step;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _CustomerSignupActions = __webpack_require__(85);

	var _CustomerSignupActions2 = _interopRequireDefault(_CustomerSignupActions);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'
	//import * as Translate from '../../lib/Translate'

	//import RootscopeActions from '../actions/RootscopeActions'
	//import RootscopeStore from '../stores/RootscopeStore'

	//import CS_Store from '../../stores/CustomerStore'

	var Step1 = function (_Component) {
	  _inherits(Step1, _Component);

	  function Step1(props, context) {
	    _classCallCheck(this, Step1);

	    // MUST call super() before any this.*
	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Step1).call(this, props, context));
	  }

	  _createClass(Step1, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _CustomerSignupActions2.default.finishRegistering(this.props.signupToken);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _E.Row,
	          null,
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h2',
	              null,
	              'One moment please while we create your account'
	            ),
	            _react2.default.createElement(_E.Spinner, null)
	          )
	        ),
	        this.renderSimulator()
	      );
	    }
	  }, {
	    key: 'renderSimulator',
	    value: function renderSimulator() {
	      if (this.props.testing) {
	        return _react2.default.createElement(
	          _E.Row,
	          { style: { border: '1px solid #666', borderRadius: '4px', backgroundColor: '#ccc', maxWidth: '85%', margin: '3em auto', paddingTop: '0.4em' } },
	          _react2.default.createElement(
	            _E.Col,
	            null,
	            _react2.default.createElement(
	              'h4',
	              { style: { fontWeight: 'normal' } },
	              'SIMULATOR: trying to register the customer'
	            ),
	            _react2.default.createElement(
	              'p',
	              { style: { fontSize: '0.75em' } },
	              'signup token: ',
	              _react2.default.createElement(
	                'strong',
	                null,
	                this.props.signupToken
	              )
	            )
	          )
	        );
	      }
	      return null;
	    }
	  }]);

	  return Step1;
	}(_react.Component);

	exports.default = Step1;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var VendCartItem = function (_Component) {
	  _inherits(VendCartItem, _Component);

	  function VendCartItem() {
	    _classCallCheck(this, VendCartItem);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(VendCartItem).apply(this, arguments));
	  }

	  _createClass(VendCartItem, [{
	    key: 'render',
	    value: function render() {
	      var prd = _StorefrontStore2.default.decorateProducts(this.props.data);
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'shoppingCartItem' },
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'shopping-cart-list-image', sm: '20%', md: '20%', lg: '20%', style: { textAlign: 'center' } },
	          this.renderProductImage(prd)
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'cart shopping-cart-table', xs: '42%', sm: '37%', md: '50%', lg: '50%' },
	          prd.name
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'cart shopping-cart-table', xs: '8%', sm: '13%', md: '10%', lg: '10%', style: { textAlign: 'right' } },
	          '$',
	          (0, _TsvUtils.currencyFilter)(prd.price * prd.qtyInCart)
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { xs: '20%', sm: '20%', md: '20%', lg: '20%', className: 'productQuantity', style: { textAlign: 'right' } },
	          ' ',
	          ' ',
	          prd.qtyInCart,
	          ' ',
	          ' '
	        )
	      );
	    }
	  }, {
	    key: 'renderProductImage',
	    value: function renderProductImage(product) {
	      var images = _StorefrontStore2.default.getImagesForProduct(product);
	      if (images && images.length) {
	        return _react2.default.createElement('img', { src: images[0].fileData, title: product.description, className: 'boxShadowed' });
	      }
	      return _react2.default.createElement('img', { src: '/gfx/ProductImageNotFound.png', title: product.description, className: 'boxShadowed' });
	    }
	  }]);

	  return VendCartItem;
	}(_react.Component);

	exports.default = VendCartItem;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _muDB = __webpack_require__(125);

	var _muDB2 = _interopRequireDefault(_muDB);

	var _RootscopeStore = __webpack_require__(129);

	var _RootscopeStore2 = _interopRequireDefault(_RootscopeStore);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _utils = __webpack_require__(5);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('StorefrontStore');
	//import TsvService from '../../lib/TsvService'


	var CHANGE_EVENT = 'change',
	    _store = {
		categoryIdFilter: [],
		storefrontData: {
			products: [],
			productImages: [],
			categories: [],
			planogram: {}
		}
	}

	// , _storeDB = new muDB()
	;

	function setStorefrontData(databomb) {
		_store.storefrontData.products = databomb.products || [];
		_store.storefrontData.productImages = databomb.productImages || [];
		_store.storefrontData.categories = databomb.categories || [];
		_store.storefrontData.planogram = databomb.planogram || [];
	}

	function toggleIDtoCategoryFilter(ID) {
		if (_store.categoryIdFilter.indexOf(ID) == -1) {
			_store.categoryIdFilter.push(ID);
		} else {
			_store.categoryIdFilter.splice(_store.categoryIdFilter.indexOf(ID), 1);
		}
	}

	function clearFilter() {
		_store.categoryIdFilter = [];
	}
	// _storeDB.setDB(_store);

	var StorefrontStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getCategoryFilter: function getCategoryFilter() {
			return _store.categoryIdFilter;
		},

		getStorefrontData: function getStorefrontData(which) {
			if (which && _store.storefrontData[which]) {
				return _store.storefrontData[which];
			}
			return _store.storefrontData;
		},
		getImagesForProduct: function getImagesForProduct(product) {
			if (product && _store.storefrontData.productImages.length) {
				return _store.storefrontData.productImages.filter(function (I) {
					return I.product === product._id;
				});
			}
			return null;
		},
		decorateProducts: function decorateProducts(avtProducts) {
			if (!avtProducts) return avtProducts;
			var isSingle = false;
			// make sure an array, but just return the one result.
			if (!(avtProducts instanceof Array)) {
				avtProducts = [avtProducts];
				isSingle = true;
			}
			if (_store.storefrontData.products.length) {
				var stack = [];
				avtProducts.forEach(function (AP) {
					var thisProd = _store.storefrontData.products.filter(function (P) {
						return P._id == AP.productName;
					});
					if (thisProd && thisProd.length) {
						thisProd = JSON.parse(JSON.stringify(thisProd[0]));
						/*
	     thisProd.price = AP.price;
	     thisProd.productID = AP.productID;
	     thisProd.inventoryCount = AP.inventoryCount;
	     thisProd.stockCount = AP.stockCount;
	     if (AP.qtyInCart) {
	     	thisProd.qtyInCart = AP.qtyInCart;
	     }
	     */
						Object.keys(AP).forEach(function (KEY) {
							if (!thisProd.hasOwnProperty(KEY) || !thisProd[KEY]) {
								thisProd[KEY] = AP[KEY];
							}
						});
						stack.push(thisProd);
					}
				});
				return isSingle ? stack.pop() : stack;
			}
			// FAIL
			return avtProducts;
		},


		getProductById: function getProductById(productID) {
			/*
	  	FIXME: KLOOOODGE ALERT:
	  	we are still straddling old and new code,
	  	currently all products are kept in the RootscopeStore,
	  	eventually they will be here.
	  */
			var products = _TsvSettingsStore2.default.getSession('products');
			if (products) {
				var found = products.filter(function (P) {
					return P.productID == productID;
				});
				if (found && found.length) {
					return found.pop();
				}
			}
			return null;
		}
	});

	StorefrontStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			case _appConstants2.default.TOGGLE_CATEGORY_ID_TO_FILTER:
				toggleIDtoCategoryFilter(action.data);
				StorefrontStore.emitChange();
				break;

			case _appConstants2.default.CLEAR_CATEGORY_FILTER:
				clearFilter();
				StorefrontStore.emitChange();
				break;

			case _appConstants2.default.STOREFRONT_DATA_RECEIVED:
				setStorefrontData(action.data);
				StorefrontStore.emitChange({ type: _appConstants2.default.STOREFRONT_DATA_RECEIVED });
				break;

			default:
				return true;
				break;
		}
	});

	module.exports = StorefrontStore;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ShoppingCartMini = function (_Component) {
		_inherits(ShoppingCartMini, _Component);

		function ShoppingCartMini(props, context) {
			_classCallCheck(this, ShoppingCartMini);

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ShoppingCartMini).call(this, props, context));

			_this.state = {
				qty: _this.getCartData(true)
			};

			_this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
			return _this;
		}

		// Add change listeners to stores


		_createClass(ShoppingCartMini, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				_TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
				// artificial delay due to TSV race conditions
				// let's see if new TsvSettingsStore fixes it?
				//setTimeout(() => {
				this.getCartData();
				//}, 1000);
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
			}
		}, {
			key: '_onRootstoreChange',
			value: function _onRootstoreChange(event) {
				this.getCartData();
			}
		}, {
			key: 'getCartData',
			value: function getCartData(returnData) {

				returnData = returnData || false;

				var qty = 0,
				    cart = _TsvSettingsStore2.default.getCache('shoppingCart.detail');

				if (cart) {
					var _iteratorNormalCompletion = true;
					var _didIteratorError = false;
					var _iteratorError = undefined;

					try {
						for (var _iterator = cart[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
							var value = _step.value;

							qty += value.qtyInCart;
						}
					} catch (err) {
						_didIteratorError = true;
						_iteratorError = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion && _iterator.return) {
								_iterator.return();
							}
						} finally {
							if (_didIteratorError) {
								throw _iteratorError;
							}
						}
					}
				}

				if (returnData) {
					return qty;
				}

				this.setState({
					qty: qty
				});
			}
		}, {
			key: 'render',
			value: function render() {
				var ITEMS = this.state.qty + ' item';
				if (this.state.qty == 0 || this.state.qty > 1) {
					ITEMS += 's';
				}
				return _react2.default.createElement(
					'div',
					{ className: this.props.className || '' },
					_react2.default.createElement(
						'p',
						null,
						_react2.default.createElement(
							'a',
							null,
							_react2.default.createElement('img', { onClick: function onClick() {
									_reactRouter.browserHistory.push("/ShoppingCart");
								}, src: '/gfx/shop.png' })
						),
						' ',
						ITEMS,
						this.renderCheckoutButton()
					)
				);
			}
		}, {
			key: 'renderCheckoutButton',
			value: function renderCheckoutButton() {
				if (this.state.qty > 0) {
					return _react2.default.createElement(
						_E.Button,
						{ type: 'success', size: 'lg', style: { marginLeft: '0.5em' }, onClick: function onClick() {
								_reactRouter.browserHistory.push('/ChooseCashCard');
							} },
						Translate.translate('ShoppingCart', 'Checkout')
					);
				}
				return null;
			}
		}]);

		return ShoppingCartMini;
	}(_react.Component);

	exports.default = ShoppingCartMini;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _StorefrontActions = __webpack_require__(76);

	var _StorefrontActions2 = _interopRequireDefault(_StorefrontActions);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _reactRouter = __webpack_require__(9);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Big = new _BigLogger2.default('ShoppingCartItem');

	var ShoppingCartItem = function (_Component) {
	  _inherits(ShoppingCartItem, _Component);

	  function ShoppingCartItem() {
	    _classCallCheck(this, ShoppingCartItem);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ShoppingCartItem).apply(this, arguments));
	  }

	  _createClass(ShoppingCartItem, [{
	    key: 'minusQty',
	    value: function minusQty() {
	      // c
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _StorefrontActions2.default.minusQty(this.props.data); // , prd.coilNumber
	    }
	  }, {
	    key: 'removeAllQty',
	    value: function removeAllQty() {
	      // c, q
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _StorefrontActions2.default.removeAllQty(this.props.data); // , prd.coilNumber, prd.qtyInCart
	    }
	  }, {
	    key: 'addQty',
	    value: function addQty() {
	      // c
	      (0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
	      _StorefrontActions2.default.addQty(this.props.data); // prd.coilNumber
	    }
	  }, {
	    key: 'productDetail',
	    value: function productDetail() {
	      _reactRouter.browserHistory.push('/ProductDetail/' + this.props.data.productID);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var prd = _StorefrontStore2.default.decorateProducts(this.props.data);
	      return _react2.default.createElement(
	        _E.Row,
	        { className: 'shoppingCartItem' },
	        _react2.default.createElement(
	          _E.Col,
	          { sm: '7%', md: '6%', lg: '5%' },
	          _react2.default.createElement(
	            _E.Button,
	            { type: 'danger', onClick: this.removeAllQty.bind(this) },
	            _react2.default.createElement(
	              'strong',
	              null,
	              'X'
	            )
	          )
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'shopping-cart-list-image', sm: '18%', md: '19%', lg: '20%', onClick: this.productDetail.bind(this), style: { textAlign: 'center' } },
	          this.renderProductImage(prd)
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'cart shopping-cart-table', xs: '42%', sm: '37%', md: '39%', lg: '42%', onClick: this.productDetail.bind(this) },
	          prd.name
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { className: 'cart shopping-cart-table', xs: '8%', sm: '13%', md: '13%', lg: '13%', style: { textAlign: 'right' } },
	          '$',
	          (0, _TsvUtils.currencyFilter)(prd.price * prd.qtyInCart)
	        ),
	        _react2.default.createElement(
	          _E.Col,
	          { xs: '20%', sm: '25%', md: '23%', lg: '20%', className: 'productQuantity', style: { textAlign: 'right' } },
	          _react2.default.createElement(
	            _E.Button,
	            { type: 'primary', size: 'sm', onClick: this.minusQty.bind(this) },
	            _react2.default.createElement(_E.Glyph, { icon: 'dash' })
	          ),
	          ' ',
	          ' ',
	          prd.qtyInCart,
	          ' ',
	          ' ',
	          _react2.default.createElement(
	            _E.Button,
	            { type: 'primary', size: 'sm', onClick: this.addQty.bind(this) },
	            _react2.default.createElement(_E.Glyph, { icon: 'plus' })
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderProductImage',
	    value: function renderProductImage(product) {
	      var images = _StorefrontStore2.default.getImagesForProduct(product);
	      if (images && images.length) {
	        return _react2.default.createElement('img', { src: images[0].fileData, className: 'boxShadowed' });
	      }
	      return _react2.default.createElement('img', { src: '/gfx/ProductImageNotFound.png', className: 'boxShadowed' });
	    }
	  }]);

	  return ShoppingCartItem;
	}(_react.Component);

	exports.default = ShoppingCartItem;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _reactRouter = __webpack_require__(9);

	var _StorefrontStore = __webpack_require__(94);

	var _StorefrontStore2 = _interopRequireDefault(_StorefrontStore);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	var _TsvUtils = __webpack_require__(67);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('ProductListItem');

	var ProductListItem = function (_Component) {
	  _inherits(ProductListItem, _Component);

	  function ProductListItem() {
	    _classCallCheck(this, ProductListItem);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(ProductListItem).apply(this, arguments));
	  }

	  _createClass(ProductListItem, [{
	    key: 'clickHandler',
	    value: function clickHandler(e) {
	      this.props.onClick(this.props.data);
	    }
	  }, {
	    key: 'viewProduct',
	    value: function viewProduct() {
	      _reactRouter.browserHistory.push("/ProductDetail/" + this.props.data.productID);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var product = this.props.data;

	      return _react2.default.createElement(
	        'div',
	        { className: 'product-list-item' },
	        _react2.default.createElement(
	          'div',
	          { onClick: this.viewProduct.bind(this), className: 'product-name' },
	          _react2.default.createElement(
	            'h3',
	            null,
	            product.name
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { onClick: this.viewProduct.bind(this), className: 'image-container' },
	          this.renderProductImage(product)
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'product-list-item-add-to-cart clearfix' },
	          _react2.default.createElement(
	            'div',
	            null,
	            this.renderAddToCart(),
	            _react2.default.createElement(
	              'p',
	              { className: 'prdPrice' },
	              '$',
	              (0, _TsvUtils.currencyFilter)(product.price),
	              ' '
	            )
	          )
	        )
	      );
	    }
	  }, {
	    key: 'renderProductImage',
	    value: function renderProductImage(product) {
	      var images = _StorefrontStore2.default.getImagesForProduct(product);
	      if (images && images.length) {
	        return _react2.default.createElement('img', { src: images[0].fileData, title: product.description, className: 'boxShadowed' });
	      }
	      return _react2.default.createElement('img', { src: '/gfx/ProductImageNotFound.png', title: product.description, className: 'boxShadowed' });
	    }
	  }, {
	    key: 'renderAddToCart',
	    value: function renderAddToCart() {
	      if (this.props.data.stockCount > 0) {
	        return _react2.default.createElement(
	          _E.Button,
	          { className: 'product-button', size: 'lg', type: 'success', onClick: this.clickHandler.bind(this) },
	          '+ Add'
	        );
	      }
	      return _react2.default.createElement(
	        'span',
	        { style: { fontSize: '0.75em', textTransform: 'uppercase', textAlign: 'center', display: 'block', float: 'right' } },
	        'out',
	        _react2.default.createElement('br', null),
	        'of stock'
	      );
	    }
	  }]);

	  return ProductListItem;
	}(_react.Component);

	exports.default = ProductListItem;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var CategoryListItem = function (_Component) {
	  _inherits(CategoryListItem, _Component);

	  function CategoryListItem() {
	    _classCallCheck(this, CategoryListItem);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(CategoryListItem).apply(this, arguments));
	  }

	  _createClass(CategoryListItem, [{
	    key: 'clickHandler',
	    value: function clickHandler(e) {
	      this.props.onClick(this.props.data);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var category = this.props.data;
	      return _react2.default.createElement(
	        _E.Col,
	        { basis: '33%', className: 'gallery' },
	        _react2.default.createElement(
	          'div',
	          { className: 'product' },
	          _react2.default.createElement(
	            'h4',
	            null,
	            category.categoryName
	          ),
	          ')',
	          _react2.default.createElement('img', { src: category.imagePath, alt: category.description, title: category.description, onClick: this.clickHandler.bind(this) })
	        )
	      );
	    }
	  }]);

	  return CategoryListItem;
	}(_react.Component);

	exports.default = CategoryListItem;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(134);
	var ChangeEventPlugin = __webpack_require__(135);
	var ClientReactRootIndex = __webpack_require__(136);
	var DefaultEventPluginOrder = __webpack_require__(137);
	var EnterLeaveEventPlugin = __webpack_require__(138);
	var ExecutionEnvironment = __webpack_require__(133);
	var HTMLDOMPropertyConfig = __webpack_require__(139);
	var ReactBrowserComponentMixin = __webpack_require__(140);
	var ReactComponentBrowserEnvironment = __webpack_require__(141);
	var ReactDefaultBatchingStrategy = __webpack_require__(142);
	var ReactDOMComponent = __webpack_require__(143);
	var ReactDOMTextComponent = __webpack_require__(103);
	var ReactEventListener = __webpack_require__(144);
	var ReactInjection = __webpack_require__(145);
	var ReactInstanceHandles = __webpack_require__(104);
	var ReactMount = __webpack_require__(105);
	var ReactReconcileTransaction = __webpack_require__(146);
	var SelectEventPlugin = __webpack_require__(147);
	var ServerReactRootIndex = __webpack_require__(148);
	var SimpleEventPlugin = __webpack_require__(149);
	var SVGDOMPropertyConfig = __webpack_require__(150);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(151);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(142);
	var ReactElement = __webpack_require__(152);
	var ReactInstanceHandles = __webpack_require__(104);
	var ReactMarkupChecksum = __webpack_require__(153);
	var ReactServerBatchingStrategy = __webpack_require__(154);
	var ReactServerRenderingTransaction = __webpack_require__(155);
	var ReactUpdates = __webpack_require__(108);

	var emptyObject = __webpack_require__(156);
	var instantiateReactComponent = __webpack_require__(157);
	var invariant = __webpack_require__(158);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(159);
	var DOMPropertyOperations = __webpack_require__(160);
	var ReactComponentBrowserEnvironment = __webpack_require__(141);
	var ReactMount = __webpack_require__(105);

	var assign = __webpack_require__(113);
	var escapeTextContentForBrowser = __webpack_require__(161);
	var setTextContent = __webpack_require__(162);
	var validateDOMNesting = __webpack_require__(163);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(164);

	var invariant = __webpack_require__(158);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);
	var ReactBrowserEventEmitter = __webpack_require__(167);
	var ReactCurrentOwner = __webpack_require__(102);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactElement = __webpack_require__(152);
	var ReactEmptyComponentRegistry = __webpack_require__(169);
	var ReactInstanceHandles = __webpack_require__(104);
	var ReactInstanceMap = __webpack_require__(170);
	var ReactMarkupChecksum = __webpack_require__(153);
	var ReactPerf = __webpack_require__(106);
	var ReactReconciler = __webpack_require__(107);
	var ReactUpdateQueue = __webpack_require__(171);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var emptyObject = __webpack_require__(156);
	var containsNode = __webpack_require__(172);
	var instantiateReactComponent = __webpack_require__(157);
	var invariant = __webpack_require__(158);
	var setInnerHTML = __webpack_require__(173);
	var shouldUpdateReactComponent = __webpack_require__(174);
	var validateDOMNesting = __webpack_require__(163);
	var warning = __webpack_require__(132);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(165);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(175);
	var PooledClass = __webpack_require__(176);
	var ReactPerf = __webpack_require__(106);
	var ReactReconciler = __webpack_require__(107);
	var Transaction = __webpack_require__(177);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(102);
	var ReactInstanceMap = __webpack_require__(170);
	var ReactMount = __webpack_require__(105);

	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	  true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(105);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var defaults = __webpack_require__(179);
	var utils = __webpack_require__(180);
	var dispatchRequest = __webpack_require__(181);
	var InterceptorManager = __webpack_require__(182);
	var isAbsoluteURL = __webpack_require__(183);
	var combineURLs = __webpack_require__(184);
	var bind = __webpack_require__(185);
	var transformData = __webpack_require__(186);

	function Axios(defaultConfig) {
	  this.defaults = utils.merge({}, defaultConfig);
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}

	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = utils.merge({
	      url: arguments[0]
	    }, arguments[1]);
	  }

	  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

	  // Support baseURL config
	  if (config.baseURL && !isAbsoluteURL(config.url)) {
	    config.url = combineURLs(config.baseURL, config.url);
	  }

	  // Don't allow overriding defaults.withCredentials
	  config.withCredentials = config.withCredentials || this.defaults.withCredentials;

	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );

	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers || {}
	  );

	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );

	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);

	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });

	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });

	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }

	  return promise;
	};

	var defaultInstance = new Axios(defaults);
	var axios = module.exports = bind(Axios.prototype.request, defaultInstance);

	axios.create = function create(defaultConfig) {
	  return new Axios(defaultConfig);
	};

	// Expose defaults
	axios.defaults = defaultInstance.defaults;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(187);

	// Expose interceptors
	axios.interceptors = defaultInstance.interceptors;

	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});

	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	  axios[method] = bind(Axios.prototype[method], defaultInstance);
	});


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(194);
	var ReactComponent = __webpack_require__(195);
	var ReactClass = __webpack_require__(196);
	var ReactDOMFactories = __webpack_require__(197);
	var ReactElement = __webpack_require__(152);
	var ReactElementValidator = __webpack_require__(198);
	var ReactPropTypes = __webpack_require__(199);
	var ReactVersion = __webpack_require__(101);

	var assign = __webpack_require__(113);
	var onlyChild = __webpack_require__(200);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(113);
	var warning = __webpack_require__(132);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = createTransitionManager;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _historyLibActions = __webpack_require__(201);

	var _computeChangedRoutes2 = __webpack_require__(202);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(203);

	var _isActive2 = __webpack_require__(204);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(205);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(206);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return true;
	  }return false;
	}

	function createTransitionManager(history, routes) {
	  var state = {};

	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	    var indexOnly = undefined;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }

	    return _isActive3['default'](location, indexOnly, state.location, state.routes, state.params);
	  }

	  function createLocationFromRedirectInfo(location) {
	    return history.createLocation(location, _historyLibActions.REPLACE);
	  }

	  var partialNextState = undefined;

	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      _matchRoutes2['default'](routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }

	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;

	    _TransitionUtils.runLeaveHooks(leaveRoutes);

	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);

	    _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
	      if (error) {
	        callback(error);
	      } else if (redirectInfo) {
	        callback(null, createLocationFromRedirectInfo(redirectInfo));
	      } else {
	        // TODO: Fetch components after state is updated.
	        _getComponents2['default'](nextState, function (error, components) {
	          if (error) {
	            callback(error);
	          } else {
	            // TODO: Make match a pure function and have some other API
	            // for "match and update state".
	            callback(null, null, state = _extends({}, nextState, { components: components }));
	          }
	        });
	      }
	    });
	  }

	  var RouteGuid = 1;

	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }

	  var RouteHooks = {};

	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }

	  function transitionHook(location, callback) {
	    _matchRoutes2['default'](routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }

	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });

	      var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

	      var result = undefined;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }

	      callback(result);
	    });
	  }

	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);

	      var message = undefined;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }

	      return message;
	    }
	  }

	  var unlistenBefore = undefined,
	      unlistenBeforeUnload = undefined;

	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }

	    delete RouteHooks[routeID];

	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }

	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }

	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and must return either a) a prompt message to show
	   * the user, to make sure they want to leave the page or b) false, to prevent
	   * the transition.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];

	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	      RouteHooks[routeID] = [hook];

	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);

	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : undefined;

	        hooks.push(hook);
	      }
	    }

	    return function () {
	      var hooks = RouteHooks[routeID];

	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }

	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.transitionTo(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
	          }
	        });
	      }
	    });
	  }

	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}

	//export default useRoutes
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _deprecateObjectProperties = __webpack_require__(118);

	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);

	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}

	// deprecated

	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);

	  if (process.env.NODE_ENV !== 'production') {
	    history = _deprecateObjectProperties2['default'](history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }

	  return history;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports['default'] = routerWarning;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	function routerWarning(falseToWarn, message) {
	  message = '[react-router] ' + message;

	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  process.env.NODE_ENV !== 'production' ? _warning2['default'].apply(undefined, [falseToWarn, message].concat(args)) : undefined;
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint no-empty: 0*/
	'use strict';

	exports.__esModule = true;
	exports['default'] = deprecateObjectProperties;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var useMembrane = false;

	if (process.env.NODE_ENV !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', { get: function get() {
	        return true;
	      } }).x) {
	      useMembrane = true;
	    }
	  } catch (e) {}
	}

	// wraps an object in a membrane to warn about deprecated property access

	function deprecateObjectProperties(object, message) {
	  if (!useMembrane) return object;

	  var membrane = {};

	  var _loop = function (prop) {
	    if (typeof object[prop] === 'function') {
	      membrane[prop] = function () {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	        return object[prop].apply(object, arguments);
	      };
	    } else {
	      Object.defineProperty(membrane, prop, {
	        configurable: false,
	        enumerable: false,
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	          return object[prop];
	        }
	      });
	    }
	  };

	  for (var prop in object) {
	    _loop(prop);
	  }

	  return membrane;
	}

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(63);

	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  for (var p in params) {
	    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
	  }return routeParams;
	}

	exports['default'] = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _useRouterHistory = __webpack_require__(62);

	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	exports['default'] = function (createHistory) {
	  var history = undefined;
	  if (canUseDOM) history = _useRouterHistory2['default'](createHistory)();
	  return history;
	};

	module.exports = exports['default'];

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.Alert = __webpack_require__(207);
	exports.BlankState = __webpack_require__(208);
	exports.Button = __webpack_require__(209);
	exports.ButtonGroup = __webpack_require__(210);
	exports.Checkbox = __webpack_require__(211);
	exports.Card = __webpack_require__(212);
	exports.Col = __webpack_require__(213);
	exports.Container = __webpack_require__(214);
	exports.Dropdown = __webpack_require__(215);
	exports.EmailInputGroup = __webpack_require__(216);
	exports.FileDragAndDrop = __webpack_require__(217);
	exports.FileUpload = __webpack_require__(218);
	exports.Form = __webpack_require__(219);
	exports.FormField = __webpack_require__(220);
	exports.FormIcon = __webpack_require__(221);
	exports.FormIconField = __webpack_require__(222);
	exports.FormInput = __webpack_require__(223);
	exports.FormLabel = __webpack_require__(224);
	exports.FormNote = __webpack_require__(225);
	exports.FormRow = __webpack_require__(226);
	exports.FormSelect = __webpack_require__(227);
	exports.Glyph = __webpack_require__(228);
	exports.InputGroup = __webpack_require__(229);
	exports.InputGroupSection = __webpack_require__(230);
	exports.Modal = __webpack_require__(231);
	exports.ModalBody = __webpack_require__(232);
	exports.ModalFooter = __webpack_require__(233);
	exports.ModalHeader = __webpack_require__(234);
	exports.Pagination = __webpack_require__(235);
	exports.PasswordInputGroup = __webpack_require__(236);
	exports.Pill = __webpack_require__(237);
	exports.Radio = __webpack_require__(238);
	exports.ResponsiveText = __webpack_require__(239);
	exports.Row = __webpack_require__(240);
	exports.RadioGroup = __webpack_require__(241);
	exports.SegmentedControl = __webpack_require__(242);
	exports.Spinner = __webpack_require__(243);
	exports.Table = __webpack_require__(244);

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    draining = true;
	    var currentQueue;
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        var i = -1;
	        while (++i < len) {
	            currentQueue[i]();
	        }
	        len = queue.length;
	    }
	    draining = false;
	}
	process.nextTick = function (fun) {
	    queue.push(fun);
	    if (!draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _SocketAPI = __webpack_require__(127);

	var _SocketAPI2 = _interopRequireDefault(_SocketAPI);

	var _axios = __webpack_require__(44);

	var _axios2 = _interopRequireDefault(_axios);

	var _reactRouter = __webpack_require__(9);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import TsvService from '../../lib/TsvService'

	var Big = new _BigLogger2.default('TestscopeActions');

	var TestscopeActions = {
		sendEmulatorCommand: function sendEmulatorCommand(cmd) {
			_axios2.default.post('/api/emulator', { emulator_command: cmd } // .post() expects and passes this as a json object
			).then(function (response) {
				if (response.data && response.data) {
					_AppDispatcher2.default.handleServerAction({
						actionType: _appConstants2.default.TEST_EMULATOR_RESULT,
						data: response.data
					});
				} else {
					if (response.data && response.data.error) {
						Big.error('failed to post foo, error:');
						Big.log(response.data.error);
					} else {
						Big.error('failed to post foo, no data returned. full response:');
						Big.log(response);
					}
				}
			}).catch(function (error) {
				Big.error('failed to post foo, call chain error probably check component tree');
				Big.log(error);
			});
		}
	};

	module.exports = TestscopeActions;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _muDB = __webpack_require__(125);

	var _muDB2 = _interopRequireDefault(_muDB);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//import TsvService from '../../lib/TsvService'


	var CHANGE_EVENT = 'change'

	// example state vars:
	,
	    _store = {},
	    _storeDB = new _muDB2.default();

	_storeDB.setDB(_store);

	var TestscopeStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		}

	});

	TestscopeStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			case _appConstants2.default.TEST_EMULATOR_RESULT:
				TestscopeStore.emitChange({ test_result: action.data });
				break;

			default:
				return true;
				break;
		}
	});

	module.exports = TestscopeStore;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	//var muDB = function(e){e=e||null;if(e!==null){this.setDB(e)}return this};muDB.prototype={db:{},cb:null,curpath:null,setDB:function(e){this.db=e},getDB:function(){return this.db},addObserver:function(e){this.cb=e},notify:function(e,t){if(this.cb){this.cb(e,this.curpath,t)}},expand:function(e){if(typeof e=="object"&&e!==null&&e.toString().indexOf("[object HTML")==-1){for(var t in e){e[t]=this.expand(e[t])}}else if(typeof e=="string"){if(e.charAt(0)=="$"){e=this.expand(this.get(e.slice(1)))}}return e},get:function(e,t){data=this.search(e);if(data==null){if(e.charAt(0)=="$"){e=e.slice(1);data=this.search(e)}if(data==null){return null}}if(typeof data==="string"){if(data.charAt(0)=="$"){e=data.slice(1);data=this.search(e)}}if(t==undefined){t=true}if(t){data=this.expand(data)}return data},set:function(e,t,n,r){n=n||false;this.curpath=e||null;e=e.split(".");this._set(this.db,e,t,n);this.notify("set",r)},search:function(e,t){t=t||false;e=e.split(".");return this._search(this.db,e,t)},filter:function(e,t,n,r){e=this.checkObjRef(e);r=r||-1;if(typeof n=="string"&&n.indexOf("%%")>-1){return this._fuzzyFilter(e,t,n.substr(0,n.length-2),r)}if(n===null){return this._nullFilter(e,t,r)}var i=[];if(e instanceof Array){if(e.length){for(var s=0;s<e.length;s+=1){if(this._search(e[s],t.split("."))==n){i.push(e[s])}if(r>-1&&i.length>=r){break}}}}else{for(var o in e){if(e.hasOwnProperty(o)){var u=this._search(e[o],t.split("."));if(u&&u==n){if(r===-1||i.length<r){i.push(e[o])}}}}}if(i.length){return i}return null},findOne:function(e,t,n){var r=this.filter(e,t,n,1);if(r&&r.length){return r[0]}return null},keyExists:function(e,t){e=this.checkObjRef(e);if(e.hasOwnProperty(t)){return true}return false},checkObjRef:function(e){e=e||null;if(e!==null){e=typeof e=="string"?this.get(e):e}else{e=this.db}return e},del:function(e,t){this.curpath=e||null;e=e.split(".");return this._del(this.db,e);this.notify("del",t)},_set:function(e,t,n,r){key=t.shift();if(e.hasOwnProperty(key)){if(t.length==0){if(r&&typeof n==="object"){for(k in n){e[key][k]=n[k]}}else{e[key]=n;return}}else{this._set(e[key],t,n,r)}}else{if(t.length==0){e[key]=n}else{e[key]={};this._set(e[key],t,n,r)}}},_search:function(e,t,n){var r=t.shift();if(e!==undefined&&e.hasOwnProperty(r)){if(t.length==0){if(n)return e;return e[r]}return this._search(e[r],t,n)}return null},_nullFilter:function(e,t,n){var r=[];if(e instanceof Array){if(e.length){for(var i=0;i<e.length;i+=1){if(this._search(e[i],t.split("."))){r.push(e[i])}if(n>-1&&r.length>=n){break}}}}else{for(var s in e){if(e.hasOwnProperty(s)){if(this._search(e[s],t.split("."))){if(n===-1||r.length<n){r.push(e[s])}}}}}if(r.length){return r}return null},_fuzzyFilter:function(e,t,n,r){var i=[];if(e instanceof Array){if(e.length){for(var s=0;s<e.length;s+=1){var o=this._search(e[s],t.split("."));if(o){if(o.toLowerCase().indexOf(n)>-1){i.push(e[s])}}if(r>-1&&i.length>=r){break}}}}else{for(var u in e){if(e.hasOwnProperty(u)){var o=this._search(e[u],t.split("."));if(o&&o.toLowerCase().indexOf(n)>-1){if(r===-1||i.length<r){i.push(e[u])}}}}}if(i.length){return i}return null},_del:function(e,t){key=t.shift();if(e.hasOwnProperty(key)){if(t.length==0){delete e[key];return true}else{this._del(e[key],t)}}else if(e[key]){if(t.length==0){delete e[key];return true}else{this._del(e[key],t)}}else{return false}}}

	var muDB = function muDB(e) {
	    e = e || null;
	    if (e !== null) {
	        this.setDB(e);
	    }
	    this.uniq = Date.now();
	    this.db = {};
	    return this;
	};

	var EXPANDtimes = 0,
	    maxEXPANDtimes = 5000,
	    lastGet;

	// every ten seconds, erase the EXPANDtimes. It's a stop-gap in case of run-away script calls.
	setInterval(function () {
	    EXPANDtimes = 0;
	}, 10000);

	muDB.prototype = {
	    //db: {}, // data was bleeding between muDB instances with this being set here! (now, set above in construct)
	    cb: null,
	    curpath: null,
	    setDB: function setDB(e) {
	        this.db = e;
	    },
	    getDB: function getDB() {
	        return this.db;
	    },
	    addObserver: function addObserver(e) {
	        this.cb = e;
	    },
	    notify: function notify(e, t) {
	        if (this.cb) {
	            this.cb(e, this.curpath, t);
	        }
	    },
	    expand: function expand(e) {
	        EXPANDtimes += 1;
	        if (EXPANDtimes > maxEXPANDtimes) {
	            EXPANDtimes = 0;
	            console.log(e);
	            throw new Error('expanding rapidly');
	        }
	        if (EXPANDtimes > maxEXPANDtimes - 20) {
	            console.log(e);
	        }
	        /*if (typeof e == "object" && e !== null && e.toString().indexOf("[object HTML") == -1) {
	        	console.log('[muDB] wtf is happening here');
	        	console.log(e.toString());
	        	console.log(lastGet);
	            for (var t in e) {
	            	console.log('typeof expander: ' + typeof e[t] );
	                e[t] = this.expand(e[t])
	            }
	        } else */if (typeof e == "string") {
	            if (e.charAt(0) == "$") {
	                e = this.expand(this.get(e.slice(1)));
	            }
	        }
	        return e;
	    },
	    get: function get(e, t) {
	        var data = this.search(e);
	        if (data == null) {
	            if (e.charAt(0) == "$") {
	                e = e.slice(1);
	                data = this.search(e);
	            }
	            if (data == null) {
	                return null;
	            }
	        }
	        if (typeof data === "string") {
	            if (data.charAt(0) == "$") {
	                e = data.slice(1);
	                data = this.search(e);
	            }
	        }
	        if (t == undefined) {
	            /*
	            console.log('[muDB] t was undefined, setting to true which will "expand" .... ! here is "e" and data that will be expanded:');
	            console.log(e);
	            console.log(data);
	            lastGet = e;
	            */
	            t = true;
	        }
	        if (t) {
	            data = this.expand(data);
	        }
	        return data;
	    },
	    set: function set(e, t, n, r) {
	        n = n || false;
	        this.curpath = e || null;
	        e = e.split(".");
	        this._set(this.db, e, t, n);
	        this.notify("set", r);
	    },
	    search: function search(e, t) {
	        t = t || false;
	        e = e.split(".");
	        return this._search(this.db, e, t);
	    },
	    filter: function filter(e, t, n, r) {
	        e = this.checkObjRef(e);
	        r = r || -1;
	        if (typeof n == "string" && n.indexOf("%%") > -1) {
	            return this._fuzzyFilter(e, t, n.substr(0, n.length - 2), r);
	        }
	        if (n === null) {
	            return this._nullFilter(e, t, r);
	        }
	        var i = [];
	        if (e instanceof Array) {
	            if (e.length) {
	                for (var s = 0; s < e.length; s += 1) {
	                    if (this._search(e[s], t.split(".")) == n) {
	                        i.push(e[s]);
	                    }
	                    if (r > -1 && i.length >= r) {
	                        break;
	                    }
	                }
	            }
	        } else {
	            for (var o in e) {
	                if (e.hasOwnProperty(o)) {
	                    var u = this._search(e[o], t.split("."));
	                    if (u && u == n) {
	                        if (r === -1 || i.length < r) {
	                            i.push(e[o]);
	                        }
	                    }
	                }
	            }
	        }
	        if (i.length) {
	            return i;
	        }
	        return null;
	    },
	    findOne: function findOne(e, t, n) {
	        var r = this.filter(e, t, n, 1);
	        if (r && r.length) {
	            return r[0];
	        }
	        return null;
	    },
	    keyExists: function keyExists(e, t) {
	        e = this.checkObjRef(e);
	        if (e.hasOwnProperty(t)) {
	            return true;
	        }
	        return false;
	    },
	    checkObjRef: function checkObjRef(e) {
	        e = e || null;
	        if (e !== null) {
	            e = typeof e == "string" ? this.get(e) : e;
	        } else {
	            e = this.db;
	        }
	        return e;
	    },
	    del: function del(e, t) {
	        this.curpath = e || null;
	        e = e.split(".");
	        return this._del(this.db, e);
	        this.notify("del", t);
	    },
	    _set: function _set(e, t, n, r) {
	        var key = t.shift();
	        if (e.hasOwnProperty(key)) {
	            if (t.length == 0) {
	                if (r && (typeof n === "undefined" ? "undefined" : _typeof(n)) === "object") {
	                    for (k in n) {
	                        e[key][k] = n[k];
	                    }
	                } else {
	                    e[key] = n;
	                    return;
	                }
	            } else {
	                this._set(e[key], t, n, r);
	            }
	        } else {
	            if (t.length == 0) {
	                e[key] = n;
	            } else {
	                e[key] = {};
	                this._set(e[key], t, n, r);
	            }
	        }
	    },
	    _search: function _search(e, t, n) {
	        var r = t.shift();
	        if (e !== undefined && e.hasOwnProperty(r)) {
	            if (t.length == 0) {
	                if (n) return e;
	                return e[r];
	            }
	            return this._search(e[r], t, n);
	        }
	        return null;
	    },
	    _nullFilter: function _nullFilter(e, t, n) {
	        var r = [];
	        if (e instanceof Array) {
	            if (e.length) {
	                for (var i = 0; i < e.length; i += 1) {
	                    if (this._search(e[i], t.split("."))) {
	                        r.push(e[i]);
	                    }
	                    if (n > -1 && r.length >= n) {
	                        break;
	                    }
	                }
	            }
	        } else {
	            for (var s in e) {
	                if (e.hasOwnProperty(s)) {
	                    if (this._search(e[s], t.split("."))) {
	                        if (n === -1 || r.length < n) {
	                            r.push(e[s]);
	                        }
	                    }
	                }
	            }
	        }
	        if (r.length) {
	            return r;
	        }
	        return null;
	    },
	    _fuzzyFilter: function _fuzzyFilter(e, t, n, r) {
	        var i = [];
	        if (e instanceof Array) {
	            if (e.length) {
	                for (var s = 0; s < e.length; s += 1) {
	                    var o = this._search(e[s], t.split("."));
	                    if (o) {
	                        if (o.toLowerCase().indexOf(n) > -1) {
	                            i.push(e[s]);
	                        }
	                    }
	                    if (r > -1 && i.length >= r) {
	                        break;
	                    }
	                }
	            }
	        } else {
	            for (var u in e) {
	                if (e.hasOwnProperty(u)) {
	                    var o = this._search(e[u], t.split("."));
	                    if (o && o.toLowerCase().indexOf(n) > -1) {
	                        if (r === -1 || i.length < r) {
	                            i.push(e[u]);
	                        }
	                    }
	                }
	            }
	        }
	        if (i.length) {
	            return i;
	        }
	        return null;
	    },
	    _del: function _del(e, t) {
	        var key = t.shift();
	        if (e.hasOwnProperty(key)) {
	            if (t.length == 0) {
	                delete e[key];
	                return true;
	            } else {
	                this._del(e[key], t);
	            }
	        } else if (e[key]) {
	            if (t.length == 0) {
	                delete e[key];
	                return true;
	            } else {
	                this._del(e[key], t);
	            }
	        } else {
	            return false;
	        }
	    }
	};

	module.exports = muDB;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Dispatcher = __webpack_require__(297).Dispatcher,
	    AppDispatcher = new Dispatcher();

	AppDispatcher.handleViewAction = function (action) {
		this.dispatch({
			source: 'VIEW_ACTION',
			action: action // <<< this is an object, not a string: { actionType: FOO_CONSTANT, data: {} }
		});
	};

	AppDispatcher.handleServerAction = function (action) {
		this.dispatch({
			source: 'SERVER_ACTION',
			action: action // <<< this is an object, not a string: { actionType: FOO_CONSTANT, data: {} }
		});
	};

	module.exports = AppDispatcher;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _index = __webpack_require__(5);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Big = new _BigLogger2.default('SocketAPI');

	if (_index.isClient) {

		// uncomment below to see verbose Socket.io logs
		// to turn it off, you have to manually set localStorage.debug = false, not just comment this back out
		//localStorage.debug = '*';

		/* set up websocket connection */
		var io = __webpack_require__(316),
		    socket_connected = false
		//	, debug = true
		,
		    websocket,
		    queue = [],
		    ActionHandlers = {} // see registerActionHandler() below
		,
		    SocketHandler = {},
		    webhook_token;

		var websocket = io.connect();

		websocket.on('connect', function () {
			Big.log(' +++++++++++++ WEBSOCKET connected ');
			socket_connected = true;
			if (queue.length) {
				queue.forEach(function (Q) {
					Big.log('[WS] emit Q command: ' + Q.command);
					Big.log(Q.data);
					websocket.emit(Q.command, Q.data);
				});
			}
		});

		websocket.on('message', function (response) {
			Big.log('general message from server:');
			Big.log(response);
		});

		websocket.on('set-webhook-token', function (token) {
			Big.log('webhook token from server:');
			Big.log(token);
			webhook_token = token;
		});

		// just a tester:
		window.onbeforeunload = function () {
			websocket.emit('beforeDisconnect', { msg: 'client is about to disconnect!', some: 'data' });
		};

		// allows binding one handler to all custom (i.e., not connect or disconnect etc) events:
		var onevent = websocket.onevent;
		websocket.onevent = function (packet) {
			var args = packet.data || [];
			onevent.call(this, packet); // original call
			packet.data = ["*"].concat(args);
			onevent.call(this, packet); // additional call to catch-all
		};

		websocket.on("*", function (event, data) {
			/*
	  Big.log(' -----------------------------------------------------------------');
	  Big.log('[ >>>>> SOCKET catch-all <<<<<< ] ... event, then data');
	  Big.log(event);
	  Big.log(data);
	  Big.log(' -----------------------------------------------------------------');
	  //*/
			var handle = event;
			//if (data && data.actionToken) { handle += ':' + actionToken }

			if (ActionHandlers[handle] && typeof ActionHandlers[handle] == 'function') {
				ActionHandlers[handle](data);
			} else {
				Big.log(' -----------------------------------------------------------------');
				Big.log('[ >>>>> SOCKET catch-all, nobody was registered to handle this <<<<<< ] ... event, then data');
				Big.log(handle);
				Big.log(data);
				Big.log(' -----------------------------------------------------------------');
			}
		});

		module.exports = {

			// pass in action="receive-foo-data" (server emitted action name) and the appropriate bound method from the ActionHandler
			// removes need for defining websocket.on('foo', function), also removes need to include all actions and processing logic here.
			// explore using PubSub for handling multiple listeners per socket pingback events
			// see: utils/PubSub.js

			registerActionHandler: function registerActionHandler(action, handler, actionToken) {
				var handle = action;
				//if (actionToken) { handle += ':' + actionToken }
				Big.log('registering action handler for: ' + handle);
				ActionHandlers[handle] = handler;
			},
			unregisterActionHandler: function unregisterActionHandler(action, handler, actionToken) {
				Big.throw('unfinished function ... depends on PubSub / multiple listeners per action');
				var handle = action;
				//if (actionToken) { handle += ':' + actionToken }
				if (!handler) {
					// remove all
				} else {
						// remove single
						ActionHandlers[handle] = handler;
					}
			},
			testSocketConnection: function testSocketConnection(TD) {
				TD = TD || { some: 'test_data' }; // Test Data to ping with
				SocketHandler.socket.emit('testResponse', TD);
			},
			socketSendCommand: function socketSendCommand(cmd, data, handler, actionToken) {
				// optional auto-link up to ActionHandler
				if (handler && typeof handler == 'function') {
					this.registerActionHandler(cmd, handler, actionToken);
				}
				//data.actionToken = actionToken;
				SocketHandler.emit(cmd, data);
			},
			getWebhookToken: function getWebhookToken() {
				return webhook_token;
			}
		};

		// aliases:
		module.exports.subscribe = module.exports.registerActionHandler;
		module.exports.unsubscribe = module.exports.unregisterActionHandler;
		module.exports.sub = module.exports.registerActionHandler;
		module.exports.unsub = module.exports.unregisterActionHandler;
		module.exports.send = module.exports.socketSendCommand;

		SocketHandler.socket = websocket;
		SocketHandler.isReady = function () {
			return socket_connected;
		};
		// alias:
		SocketHandler.emit = function (command, data) {
			if (socket_connected) {
				websocket.emit(command, data);
			} else {
				queue.push({ command: command, data: data });
			}
		};

		//window.SH = { SocketHandler, expo: module.exports };
	} else {
			module.exports = false;
		}

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = ["activate", "addProductAndPriceByProductId", "addStock", "addToCartByCoil", "addToCartByProductID", "addToCartBySelection", "adminValidateProductByCoil", "authorizeCreditCard", "cashlessBeginSession", "cashlessEndSession", "changeShopperPassword", "checkActivation", "clearMachineFaults", "clockAdmin", "closeAdmin", "createShopper", "debug", "disableAgeVerification", "disableLoginDevices", "disablePaymentDevice", "emptyCart", "enableAgeVerification", "enableLoginDevices", "enablePaymentDevice", "endUserLogging", "enumerateComponents", "fetchAllCustomSettings", "fetchAllMachineSettings", "fetchCoilProductIDMap", "fetchConfig", "fetchCreditBalance", "fetchCustomMachineSetting", "fetchFlashConfig", "fetchMachineCoilProductIDMap", "fetchMachineIds", "fetchProduct", "fetchProductByCategory", "fetchProductCategories", "fetchProductCategoriesByParentCategoryID", "fetchProductQuick", "fetchShoppingCart2", "fetchValidCoils", "fetchValidTrays", "fillCoil", "fillMachine", "getFaultCodes", "getShopperInfo", "heartbeatNow", "kickLoginWatchdog", "lastHeartbeatTime", "loginShopper", "logoutShopper", "payout", "printReceipt", "refresh", "refundRequest", "registerComponent", "removeFromCartByCoilNo", "removeFromCartByProductID", "removeStock", "resetCoupon", "resetCreditBalance", "resetVendProperties", "restart", "runAutoMap", "saveFlashSettings", "searchProduct", "setCardSecurityBillingZip", "setCardSecurityCvv2", "setCardSecurityInfo", "setCustomMachineSetting", "setDropShipInfo", "setEmailReceiptInfo", "setLights", "setMachineSetting", "setPromoInfo", "setShippingAmount", "setVendProperty", "shutdown", "startUserLogging", "startVend", "triggerDataDownloader", "tsvVersionNumber", "updateItemPrice", "updateShopper", "validateAdminPassword", "validateAllCoils", "validateCoupon", "validateProductByCoil", "validateProductByProductId", "vendProduct", "vendSingleItem"];

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _session;

	var _AppDispatcher = __webpack_require__(126);

	var _AppDispatcher2 = _interopRequireDefault(_AppDispatcher);

	var _appConstants = __webpack_require__(77);

	var _appConstants2 = _interopRequireDefault(_appConstants);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _Object = __webpack_require__(113);

	var _Object2 = _interopRequireDefault(_Object);

	var _events = __webpack_require__(178);

	var _muDB = __webpack_require__(125);

	var _muDB2 = _interopRequireDefault(_muDB);

	var _TsvUtils = __webpack_require__(67);

	var _utils = __webpack_require__(5);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('RootscopeStore');

	var CHANGE_EVENT = 'change'

	// example state vars:
	,
	    _store = {

		appConfig: {
			name: 'SDK-Vending-Gui',
			version: '0.0.1',
			date: '2016-03-22'
		},

		session: (_session = {
			cashMsg: Translate.translate("CashVending", "HintMessageInsertCash"),
			cardMsg: Translate.translate("CardVending", "InstructionMessage"),
			bVendedOldCredit: false,
			bVendingInProcess: false,
			vendErrorMsg1: "vendErrorMsg1",
			vendErrorMsg2: "vendErrorMsg2",
			vendSettleTotal: 0,
			creditBalance: 0,
			discount: 0,
			bRunningAutoMap: false,
			machineID: 0
		}, _defineProperty(_session, 'bVendedOldCredit', false), _defineProperty(_session, 'products', null), _session),

		cache: {
			shoppingCart: {},
			productList: {},
			planogram: {},
			machineSettings: {},
			// pre-setting this from the actual settings for testing:
			custommachinesettings: {
				paymentPageTimeout: 65000
			},
			machineList: {},
			prdHashTable: {}
		},

		config: {
			currencyType: 'currency',
			failing: true,
			failCount: 0,
			eventSubscriptions: {},
			bShowLanguageFlag: false,
			bShowLanguage: false,
			bShowCredit: false,
			bCashless: false,
			bDualMachine: false,
			itemsInCart: 0,
			bInsufficientFunds: false,
			bDisplayCgryNavigation: false,
			bDisplayCgryNavigation2: false,
			categories: []
		}
	},
	    _storeDB = new _muDB2.default();

	_storeDB.setDB(_store);

	// example updater functions (triggered by Dispatch + appConstant listeners)
	function setFoo(data) {
		_store.foo = data;
	}

	function addToFoo(data) {
		_store.foo.push(data);
	}

	function setBar(data) {
		_store.bar = data;
	}

	function updateBar(path, data) {
		_store.bar[path] = data;
	}

	// example getter functions (no direct setting in stores!)
	var RootscopeStore = (0, _Object2.default)({}, _events.EventEmitter.prototype, {
		addChangeListener: function addChangeListener(cb) {
			this.on(CHANGE_EVENT, cb);
		},

		removeChangeListener: function removeChangeListener(cb) {
			this.removeListener(CHANGE_EVENT, cb);
		},

		emitChange: function emitChange() {
			var args = Array.prototype.slice.call(arguments);
			args.unshift(CHANGE_EVENT);
			this.emit.apply(this, args);
		},

		getConfig: function getConfig(path, dflt) {
			path = path ? 'config.' + path : 'config';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getCache: function getCache(path, dflt) {
			path = path ? 'cache.' + path : 'cache';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getSession: function getSession(path, dflt) {
			path = path ? 'session.' + path : 'session';
			var result = _storeDB.get(path);
			if (typeof result !== 'undefined' && result !== null) {
				return result;
			}
			return dflt;
		},

		getAppConfig: function getAppConfig() {
			return _storeDB.get('appConfig');
		},

		getDB: function getDB() {
			return _storeDB.getDB();
		}

	});

	RootscopeStore.dispatch = _AppDispatcher2.default.register(function (payload) {
		var action = payload.action;
		switch (action.actionType) {

			case _appConstants2.default.UPDATE_ROOT_CONFIG:
				if (!action.data.value && action.data.path && _typeof(action.data.path) === 'object') {
					Object.keys(action.data.path).forEach(function (KEY) {
						_storeDB.set('config.' + KEY, action.data.path[KEY]);
					});
					action.data.path = '__multiple__';
				} else {
					_storeDB.set('config.' + action.data.path, action.data.value);
				}
				TsvSettingsStore.emitChange({ type: 'config', path: action.data.path });
				break;

			case _appConstants2.default.UPDATE_ROOT_CACHE:
				if (!action.data.value && action.data.path && _typeof(action.data.path) === 'object') {
					Object.keys(action.data.path).forEach(function (KEY) {
						_storeDB.set('cache.' + KEY, action.data.path[KEY]);
					});
					action.data.path = '__multiple__';
				} else {
					_storeDB.set('cache.' + action.data.path, action.data.value);
				}
				TsvSettingsStore.emitChange({ type: 'cache', path: action.data.path });
				//Big.warn(' someone updated CACHE, args:');
				//Big.log(action.data);
				break;

			case _appConstants2.default.UPDATE_ROOT_SESSION:
				if (!action.data.value && action.data.path && _typeof(action.data.path) === 'object') {
					Object.keys(action.data.path).forEach(function (KEY) {
						_storeDB.set('session.' + KEY, action.data.path[KEY]);
					});
					action.data.path = '__multiple__';
				} else {
					_storeDB.set('session.' + action.data.path, action.data.value);
				}
				TsvSettingsStore.emitChange({ type: 'session', path: action.data.path });
				break;

			default:
				return true;
				break;
		}
	});

	//*
	//Big.warn("\n\n -------------------------------------------------------\n\n RootscopeStore loaded!\n\n -------------------------------------------------------\n\n");
	if (_utils.isClient) {
		window.RSS = RootscopeStore;
	}
	//*/

	module.exports = RootscopeStore;

	/*
	function intersect(a, b) {
	    var t;
	    if (b.length > a.length) t = b, b = a, a = t; // indexOf to loop over shorter
		return a
			.filter(function(e) { return (b.indexOf(e) !== -1) }) // same as before
			.filter(function (e, i, c) { // extra step to remove duplicates
				return c.indexOf(e) === i;
			});
	}
	*/
	function intersect(a, b) {
		var t;if (b.length > a.length) t = b, b = a, a = t;return a.filter(function (e) {
			return b.indexOf(e) !== -1;
		}).filter(function (e, i, c) {
			return c.indexOf(e) === i;
		});
	}

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(245);

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    "CreditLabel": "Credit",
	    "BalanceLabel": "Balance",

	    "View0": {
	        "Resetting": "Resetting",
	        "PleaseWait": "Please Wait"
	    },

	    "View1": {
	        "MakeASelection": "Please Make A Selection",
	        "Unavailable": "Unavailable",
	        "OutOfStock": "Out Of Stock",
	        "InvalidProduct": "Invalid Product",
	        "MaxItemsExceeded": "Too Many Items",
	        "MaxValueExceeded": "Value Too High",
	        "HELLO_WORLD": "hello"
	    },

	    "View2": {
	        "InstructionMessage": "Swipe Card or Insert Cash",
	        "InsufficientFunds": "Insufficient Funds"
	    },

	    "CashCard": {
	        "InstructionMessage": "Select A Payment Method"
	    },

	    "CashVending": {
	        "TotalAmountLabel": "Total: ",
	        "InsertedAmountLabel": "Inserted: ",
	        "HintMessageInsertCash": "Insert Cash Now....",
	        "HintMessageVending": "Vending..."
	    },

	    "CardVending": {
	        "InstructionMessage": "Please Swipe Card...",
	        "CardAccepted": "Payment is complete!",
	        "ProcessingMessage": "Processing...",
	        "CardInvalidMessage": "Failed To Read Card",
	        "CardDeclinedMessage": "Card Declined",
	        "CardConnectionErrorMessage": "Card Connection Error",
	        "CardUnknownErrorMessage": "Card Unknown Error",
	        "ErrorMessage": "Error...",
	        "TotalPriceLabel": "Total Price: "
	    },

	    "Vending": {
	        "Vending": "Vending...",
	        "PartialVendFailure": "Sorry, not all items vended successfully.",
	        "TotalVendFailure": "Sorry, we could not dispense your products.",
	        "YouWereNotCharged": "You were not charged.",
	        "YouHaveBeenCharged": "You have been charged "
	    },

	    "Cashless_Vending": {
	        "Status": "Vending...",
	        "TotalPriceLabel": "Total Price: "
	    },

	    "AdminLogin": {
	        "LoginMsg": "Login to view the admin functions",
	        "Password": "Password",
	        "InvalidPassword": "Invalid Password",
	        "BackToStore": "Return to Storefront"
	    },

	    "AdminBillAcceptor": {
	        "BillOn": "Turn Bill Acceptor On",
	        "BillOff": "Turn Bill Acceptor Off"
	    },

	    "AdminHome": {
	        "Home": "Home",
	        "Inventory": "Inventory",
	        "SystemInfo": "System Info",
	        "JofemarExerciser": "Jofemar Exerciser",
	        "MachineSettings": "Machine Settings",
	        "Vms": "VMS",
	        "AutoMap": "Auto Map",
	        "CheckFaults": "Check Faults",
	        "Restart": "Restart",
	        "ShutDown": "Shut Down",
	        "Activate": "Activate",
	        "ComponentControl": "Heartbeats",
	        "PrintReaderTest": "Test Print Reader",
	        "BillAcceptor": "Test Bill Acceptor"
	    },

	    "SystemInfo": {
	        "SystemInfo": "System Information"
	    },

	    "CheckFaults": {
	        "FaultCode": "Fault Code",
	        "EventID": "VMS EVENT ID",
	        "Description": "Description",
	        "Clear": "Clear",
	        "Machine": "Machine"
	    },

	    "Activate": {
	        "CallToActivate1": "Call AVT, Inc",
	        "CallToActivate2": "1-877-424-3663",
	        "CallToActivate3": "For Your Activation Code",
	        "WrongActivationCode": "Wrong Code!",
	        "ActivationKey": "Activation Key"
	    },

	    "AutoMap": {
	        "Map1": "Map #1",
	        "Map2": "Map #2"
	    },

	    "AdminVms": {
	        "HeartBeatNow": "Heart Beat Now",
	        "LastHeartBeatTime": "Last Heart Beat Time",
	        "HeartBeatTime": "HeartBeatTime"
	    },

	    "AdminInventory": {
	        "EnterCoil": "Enter Slot",
	        "EnterStockAmount": "Enter Stock Amount",
	        "InvalidProduct": "Invalid Product",
	        "UnknownProduct": "Unknown Product",
	        "FillMachine": "Fill Machine",
	        "FillCoil": "Fill Slot",
	        "FillAllCoilsForMachine": "Fill All Slots For Machine ",
	        "Coil": "Coil",
	        "ProductName": "Product Name",
	        "StockCount": "Stock Count",
	        "Machine": "Machine"
	    },

	    "AdminJofemarExerciser": {
	        "LightOn": "Light On",
	        "LightOff": "Light Off",
	        "Machine1": "Machine 1",
	        "Machine2": "Machine 2",
	        "Machine": "Machine"
	    },

	    "AdminSettings": {
	        "MachineSettings": "MACHINE SETTINGS",
	        "LabelDefaultLanguage": "Default Language",
	        "LabelSupportLanguages": "Supported Languages",
	        "LabelCardProcessorMode": "Card Processor Mode",
	        "LabelMachineSerialNumber": "Machine Serial Number",
	        "LabelMerchantKey": "Merchant Key",
	        "LabelMerchantID": "Merchant ID",
	        "LabelDropSensorAttached": "Drop Sensor Attached",
	        "LabelCardReaderType": "Card Reader Type",
	        "LabelVMCPlatform": "VMC Platform",
	        "LabelMachineCount": "Machine Count",
	        "LabelCOMPort": "COM Port",
	        "LabelSalesTaxRate": "Sales Tax Rate",
	        "LabelShoppingCartMaxItemCount": "Shopping Cart Max Item Count",
	        "LabelHasShoppingCart": "Has ShoppingCart",
	        "LabelSingleProductDonation": "Single Product Donation",
	        "LabelMinimumDonationAmount": "Minimum Donation Amount"
	    },

	    "ShoppingCart": {
	        "ShoppingCart": "Your Cart",
	        "Price": "Price",
	        "Qty": "Qty",
	        "Tax": "Tax",
	        "Cancel": "Empty your cart",
	        "TotalPrice": "Total Price",
	        "SelectCategory": "Select A Category",
	        "Shop_More": "Keep On Shoppin'",
	        "Checkout": "Pay Up",
	        "Coupon": "Have a coupon?",
	        "Get_Some_Help": "Need a little help?"
	    },

	    "MakeDonation": {
	        "EnterDonationAmount": "Enter Donation Amount",
	        "ConfirmDonationAmount": "Confirm Donation Amount",
	        "MinimumDonationAmount": "Minimum Donation Amount: $"
	    },

	    "ConfirmDonation": {
	        "ConfirmDonation": "Confirm Donation Amount"
	    },

	    "Keyboard": {
	        "EnterEmailTitle": "Get your receipt via email",
	        "EnterCouponCode": "Enter Coupon Code",
	        "EnterEmail": "Enter Your Email Address"
	    },

	    "CategorySearch": {
	        "WelcomeMsg": "",
	        "SelectCategory": "Select A Category"
	    },

	    "ProductSearch": {
	        "WelcomeMsg": "",
	        "SelectProduct": "Select A Product"
	    },

	    "Customer": {
	        "TryAgainButtonText": "Try again",
	        "LoginButtonText": "Login to purchase products",
	        "SignupButtonText": "Register your account to purchase products"
	    }
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(246);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(133);
	var FallbackCompositionState = __webpack_require__(249);
	var SyntheticCompositionEvent = __webpack_require__(250);
	var SyntheticInputEvent = __webpack_require__(251);

	var keyOf = __webpack_require__(252);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPluginHub = __webpack_require__(253);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(133);
	var ReactUpdates = __webpack_require__(108);
	var SyntheticEvent = __webpack_require__(254);

	var getEventTarget = __webpack_require__(255);
	var isEventSupported = __webpack_require__(256);
	var isTextInputElement = __webpack_require__(257);
	var keyOf = __webpack_require__(252);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(252);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPropagators = __webpack_require__(248);
	var SyntheticMouseEvent = __webpack_require__(258);

	var ReactMount = __webpack_require__(105);
	var keyOf = __webpack_require__(252);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);
	var ExecutionEnvironment = __webpack_require__(133);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(170);

	var findDOMNode = __webpack_require__(109);
	var warning = __webpack_require__(132);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(259);
	var ReactMount = __webpack_require__(105);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(108);
	var Transaction = __webpack_require__(177);

	var assign = __webpack_require__(113);
	var emptyFunction = __webpack_require__(246);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(260);
	var CSSPropertyOperations = __webpack_require__(261);
	var DOMProperty = __webpack_require__(166);
	var DOMPropertyOperations = __webpack_require__(160);
	var EventConstants = __webpack_require__(247);
	var ReactBrowserEventEmitter = __webpack_require__(167);
	var ReactComponentBrowserEnvironment = __webpack_require__(141);
	var ReactDOMButton = __webpack_require__(262);
	var ReactDOMInput = __webpack_require__(263);
	var ReactDOMOption = __webpack_require__(264);
	var ReactDOMSelect = __webpack_require__(265);
	var ReactDOMTextarea = __webpack_require__(266);
	var ReactMount = __webpack_require__(105);
	var ReactMultiChild = __webpack_require__(267);
	var ReactPerf = __webpack_require__(106);
	var ReactUpdateQueue = __webpack_require__(171);

	var assign = __webpack_require__(113);
	var canDefineProperty = __webpack_require__(268);
	var escapeTextContentForBrowser = __webpack_require__(161);
	var invariant = __webpack_require__(158);
	var isEventSupported = __webpack_require__(256);
	var keyOf = __webpack_require__(252);
	var setInnerHTML = __webpack_require__(173);
	var setTextContent = __webpack_require__(162);
	var shallowEqual = __webpack_require__(269);
	var validateDOMNesting = __webpack_require__(163);
	var warning = __webpack_require__(132);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	        true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(273);
	var ExecutionEnvironment = __webpack_require__(133);
	var PooledClass = __webpack_require__(176);
	var ReactInstanceHandles = __webpack_require__(104);
	var ReactMount = __webpack_require__(105);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var getEventTarget = __webpack_require__(255);
	var getUnboundedScrollPosition = __webpack_require__(274);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);
	var EventPluginHub = __webpack_require__(253);
	var ReactComponentEnvironment = __webpack_require__(270);
	var ReactClass = __webpack_require__(196);
	var ReactEmptyComponent = __webpack_require__(271);
	var ReactBrowserEventEmitter = __webpack_require__(167);
	var ReactNativeComponent = __webpack_require__(272);
	var ReactPerf = __webpack_require__(106);
	var ReactRootIndex = __webpack_require__(164);
	var ReactUpdates = __webpack_require__(108);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(175);
	var PooledClass = __webpack_require__(176);
	var ReactBrowserEventEmitter = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactInputSelection = __webpack_require__(275);
	var Transaction = __webpack_require__(177);

	var assign = __webpack_require__(113);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPropagators = __webpack_require__(248);
	var ExecutionEnvironment = __webpack_require__(133);
	var ReactInputSelection = __webpack_require__(275);
	var SyntheticEvent = __webpack_require__(254);

	var getActiveElement = __webpack_require__(276);
	var isTextInputElement = __webpack_require__(257);
	var keyOf = __webpack_require__(252);
	var shallowEqual = __webpack_require__(269);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventListener = __webpack_require__(273);
	var EventPropagators = __webpack_require__(248);
	var ReactMount = __webpack_require__(105);
	var SyntheticClipboardEvent = __webpack_require__(277);
	var SyntheticEvent = __webpack_require__(254);
	var SyntheticFocusEvent = __webpack_require__(278);
	var SyntheticKeyboardEvent = __webpack_require__(279);
	var SyntheticMouseEvent = __webpack_require__(258);
	var SyntheticDragEvent = __webpack_require__(280);
	var SyntheticTouchEvent = __webpack_require__(281);
	var SyntheticUIEvent = __webpack_require__(282);
	var SyntheticWheelEvent = __webpack_require__(283);

	var emptyFunction = __webpack_require__(246);
	var getEventCharCode = __webpack_require__(284);
	var invariant = __webpack_require__(158);
	var keyOf = __webpack_require__(252);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);
	var ReactDefaultPerfAnalysis = __webpack_require__(285);
	var ReactMount = __webpack_require__(105);
	var ReactPerf = __webpack_require__(106);

	var performanceNow = __webpack_require__(286);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(102);

	var assign = __webpack_require__(113);
	var canDefineProperty = __webpack_require__(268);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(287);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(176);
	var CallbackQueue = __webpack_require__(175);
	var Transaction = __webpack_require__(177);

	var assign = __webpack_require__(113);
	var emptyFunction = __webpack_require__(246);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(288);
	var ReactEmptyComponent = __webpack_require__(271);
	var ReactNativeComponent = __webpack_require__(272);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(289);
	var ReactMultiChildUpdateTypes = __webpack_require__(290);
	var ReactPerf = __webpack_require__(106);

	var setInnerHTML = __webpack_require__(173);
	var setTextContent = __webpack_require__(162);
	var invariant = __webpack_require__(158);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(166);
	var ReactPerf = __webpack_require__(106);

	var quoteAttributeValueForBrowser = __webpack_require__(291);
	var warning = __webpack_require__(132);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);
	var escapeTextContentForBrowser = __webpack_require__(161);
	var setInnerHTML = __webpack_require__(173);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(113);
	var emptyFunction = __webpack_require__(246);
	var warning = __webpack_require__(132);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(292);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPluginHub = __webpack_require__(253);
	var EventPluginRegistry = __webpack_require__(293);
	var ReactEventEmitterMixin = __webpack_require__(294);
	var ReactPerf = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(295);

	var assign = __webpack_require__(113);
	var isEventSupported = __webpack_require__(256);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(102);
	var ReactElement = __webpack_require__(152);
	var ReactInstanceMap = __webpack_require__(170);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(296);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(176);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	var PROTECTION_PREFIX = /^\)\]\}',?\n/;
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	module.exports = {
	  transformRequest: [function transformResponseJSON(data, headers) {
	    if (utils.isFormData(data)) {
	      return data;
	    }
	    if (utils.isArrayBuffer(data)) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {
	      // Set application/json if no Content-Type has been specified
	      if (!utils.isUndefined(headers)) {
	        utils.forEach(headers, function processContentTypeHeader(val, key) {
	          if (key.toLowerCase() === 'content-type') {
	            headers['Content-Type'] = val;
	          }
	        });

	        if (utils.isUndefined(headers['Content-Type'])) {
	          headers['Content-Type'] = 'application/json;charset=utf-8';
	        }
	      }
	      return JSON.stringify(data);
	    }
	    return data;
	  }],

	  transformResponse: [function transformResponseJSON(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      data = data.replace(PROTECTION_PREFIX, '');
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*'
	    },
	    patch: utils.merge(DEFAULT_CONTENT_TYPE),
	    post: utils.merge(DEFAULT_CONTENT_TYPE),
	    put: utils.merge(DEFAULT_CONTENT_TYPE)
	  },

	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN'
	};


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/*global toString:true*/

	// utils is a library of generic helper functions non-specific to axios

	var toString = Object.prototype.toString;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return toString.call(val) === '[object FormData]';
	}

	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}

	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}

	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}

	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}

	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}

	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  typeof document.createElement -> undefined
	 */
	function isStandardBrowserEnv() {
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined' &&
	    typeof document.createElement === 'function'
	  );
	}

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object' && !isArray(obj)) {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  trim: trim
	};


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	 * Dispatch a request to the server using whichever adapter
	 * is supported by the current environment.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  return new Promise(function executor(resolve, reject) {
	    try {
	      var adapter;

	      if (typeof config.adapter === 'function') {
	        // For custom adapter support
	        adapter = config.adapter;
	      } else if (typeof XMLHttpRequest !== 'undefined') {
	        // For browsers use XHR adapter
	        adapter = __webpack_require__(298);
	      } else if (typeof process !== 'undefined') {
	        // For node use HTTP adapter
	        adapter = __webpack_require__(298);
	      }

	      if (typeof adapter === 'function') {
	        adapter(resolve, reject, config);
	      }
	    } catch (e) {
	      reject(e);
	    }
	  });
	};


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	function InterceptorManager() {
	  this.handlers = [];
	}

	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};

	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};

	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	module.exports = InterceptorManager;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
	};


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });

	  return data;
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(201);

	var _PathUtils = __webpack_require__(300);

	var _ExecutionEnvironment = __webpack_require__(302);

	var _DOMUtils = __webpack_require__(303);

	var _DOMStateStorage = __webpack_require__(304);

	var _createDOMHistory = __webpack_require__(305);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(322);

	var _runTransitionHook = __webpack_require__(299);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _PathUtils = __webpack_require__(300);

	var _deprecate = __webpack_require__(301);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p) && typeof object[p] === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }

	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }

	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;

	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;

	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ExecutionEnvironment = __webpack_require__(302);

	var _PathUtils = __webpack_require__(300);

	var _runTransitionHook = __webpack_require__(299);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(301);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var history = createHistory(options);

	    var basename = options.basename;

	    // Automatically use the value of <base href> in HTML
	    // documents as basename if it's not explicitly given.
	    if (basename == null && _ExecutionEnvironment.canUseDOM) {
	      var base = document.getElementsByTagName('base')[0];

	      if (base) basename = _PathUtils.extractPath(base.href);
	    }

	    function addBasename(location) {
	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      if (!basename) return location;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(201);

	var _PathUtils = __webpack_require__(300);

	var _ExecutionEnvironment = __webpack_require__(302);

	var _DOMUtils = __webpack_require__(303);

	var _DOMStateStorage = __webpack_require__(304);

	var _createDOMHistory = __webpack_require__(305);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    historyState = historyState || window.history.state || {};

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };

	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));

	  var listenerCount = 0,
	      stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _PathUtils = __webpack_require__(300);

	var _Actions = __webpack_require__(201);

	var _createHistory = __webpack_require__(306);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));

	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if (typeof entry === 'object' && entry) return _extends({}, entry, { key: key });

	    true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }

	    var location = _PathUtils.parsePath(path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(176);
	var ReactElement = __webpack_require__(152);

	var emptyFunction = __webpack_require__(246);
	var traverseAllChildren = __webpack_require__(308);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(311);

	var canDefineProperty = __webpack_require__(268);
	var emptyObject = __webpack_require__(156);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(195);
	var ReactElement = __webpack_require__(152);
	var ReactPropTypeLocations = __webpack_require__(309);
	var ReactPropTypeLocationNames = __webpack_require__(310);
	var ReactNoopUpdateQueue = __webpack_require__(311);

	var assign = __webpack_require__(113);
	var emptyObject = __webpack_require__(156);
	var invariant = __webpack_require__(158);
	var keyMirror = __webpack_require__(312);
	var keyOf = __webpack_require__(252);
	var warning = __webpack_require__(132);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(152);
	var ReactElementValidator = __webpack_require__(198);

	var mapObject = __webpack_require__(313);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(152);
	var ReactPropTypeLocations = __webpack_require__(309);
	var ReactPropTypeLocationNames = __webpack_require__(310);
	var ReactCurrentOwner = __webpack_require__(102);

	var canDefineProperty = __webpack_require__(268);
	var getIteratorFn = __webpack_require__(314);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(152);
	var ReactPropTypeLocationNames = __webpack_require__(310);

	var emptyFunction = __webpack_require__(246);
	var getIteratorFn = __webpack_require__(314);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(152);

	var invariant = __webpack_require__(158);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(63);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	 * Returns an object of { leaveRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = undefined,
	      enterRoutes = undefined;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });

	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();

	      enterRoutes = nextRoutes.filter(function (route) {
	        return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    enterRoutes: enterRoutes
	  };
	}

	exports['default'] = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runLeaveHooks = runLeaveHooks;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _AsyncUtils = __webpack_require__(315);

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	function createEnterHook(hook, route) {
	  return function (a, b, callback) {
	    hook.apply(route, arguments);

	    if (hook.length < 3) {
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));

	    return hooks;
	  }, []);
	}

	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */

	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);

	  if (!hooks.length) {
	    callback();
	    return;
	  }

	  var redirectInfo = undefined;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };

	      return;
	    }

	    redirectInfo = location;
	  }

	  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
	    hooks[index](nextState, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	          next();
	        }
	    });
	  }, callback);
	}

	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */

	function runLeaveHooks(routes) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = isActive;

	var _PatternUtils = __webpack_require__(63);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if (typeof a === 'object') {
	    for (var p in a) {
	      if (!a.hasOwnProperty(p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!b.hasOwnProperty(p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	function paramsAreActive(paramNames, paramValues, activeParams) {
	  // FIXME: This doesn't work on repeated params in activeParams.
	  return paramNames.every(function (paramName, index) {
	    return String(paramValues[index]) === String(activeParams[paramName]);
	  });
	}

	function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];

	  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
	    var route = activeRoutes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null) {
	      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	      remainingPathname = matched.remainingPathname;
	      paramNames = [].concat(paramNames, matched.paramNames);
	      paramValues = [].concat(paramValues, matched.paramValues);
	    }

	    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
	  }

	  return null;
	}

	/**
	 * Returns true if the given pathname matches the active routes
	 * and params.
	 */
	function routeIsActive(pathname, routes, params, indexOnly) {
	  var i = getMatchingRouteIndex(pathname, routes, params);

	  if (i === null) {
	    // No match.
	    return false;
	  } else if (!indexOnly) {
	    // Any match is good enough.
	    return true;
	  }

	  // If any remaining routes past the match index have paths, then we can't
	  // be on the index route.
	  return routes.slice(i + 1).every(function (route) {
	    return !route.path;
	  });
	}

	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */

	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;

	  if (currentLocation == null) return false;

	  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;

	  return queryIsActive(query, currentLocation.query);
	}

	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(315);

	function getComponentsForRoute(location, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	  } else if (route.getComponent) {
	    route.getComponent(location, callback);
	  } else if (route.getComponents) {
	    route.getComponents(location, callback);
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState.location, route, callback);
	  }, callback);
	}

	exports['default'] = getComponents;
	module.exports = exports['default'];

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _routerWarning = __webpack_require__(117);

	var _routerWarning2 = _interopRequireDefault(_routerWarning);

	var _AsyncUtils = __webpack_require__(315);

	var _PatternUtils = __webpack_require__(63);

	var _RouteUtils = __webpack_require__(57);

	function getChildRoutes(route, location, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }

	  var sync = true,
	      result = undefined;

	  route.getChildRoutes(location, function (error, childRoutes) {
	    childRoutes = !error && _RouteUtils.createRoutes(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }

	    callback(error, childRoutes);
	  });

	  sync = false;
	  return result; // Might be undefined.
	}

	function getIndexRoute(route, location, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    route.getIndexRoute(location, function (error, indexRoute) {
	      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (obj) {
	        return !obj.hasOwnProperty('path');
	      });

	      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  if (remainingPathname !== null) {
	    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	    remainingPathname = matched.remainingPathname;
	    paramNames = [].concat(paramNames, matched.paramNames);
	    paramValues = [].concat(paramValues, matched.paramValues);

	    if (remainingPathname === '' && route.path) {
	      var _ret2 = (function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };

	        getIndexRoute(route, location, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : undefined;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });
	        return {
	          v: undefined
	        };
	      })();

	      if (typeof _ret2 === 'object') return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };

	    var result = getChildRoutes(route, location, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}

	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback) {
	  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
	  return (function () {
	    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
	      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	        if (error || match) {
	          done(error, match);
	        } else {
	          next();
	        }
	      });
	    }, callback);
	  })();
	}

	exports['default'] = matchRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	var ALERT_TYPES = ['danger', 'error', // alias for danger
	'info', 'primary', 'success', 'warning'];

	module.exports = React.createClass({
		displayName: 'ElementalAlert',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			className: React.PropTypes.string,
			type: React.PropTypes.oneOf(ALERT_TYPES).isRequired
		},
		render: function render() {
			var componentClass = classNames('Alert', 'Alert--' + this.props.type, this.props.className);

			return React.createElement(
				'div',
				{ className: componentClass },
				this.props.children
			);
		}
	});

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'BlankState',
		propTypes: {
			children: React.PropTypes.node.isRequired
		},
		render: function render() {
			return React.createElement('div', _extends({ className: 'BlankState' }, this.props));
		}
	});

	module.exports.Heading = React.createClass({
		displayName: 'BlankStateHeading',
		propTypes: {
			children: React.PropTypes.node.isRequired
		},
		render: function render() {
			return React.createElement('h2', _extends({ className: 'BlankState__heading' }, this.props));
		}
	});

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);
	var blacklist = __webpack_require__(324);

	var BUTTON_SIZES = ['lg', 'sm', 'xs'];

	var BUTTON_TYPES = ['default', 'default-primary', 'default-success', 'default-warning', 'default-danger', 'hollow-primary', 'hollow-success', 'hollow-warning', 'hollow-danger', 'primary', 'success', 'warning', 'danger', 'link', 'link-text', 'link-cancel', 'link-delete'];

	module.exports = React.createClass({
		displayName: 'Button',
		propTypes: {
			block: React.PropTypes.bool,
			className: React.PropTypes.string,
			component: React.PropTypes.element,
			href: React.PropTypes.string,
			isActive: React.PropTypes.bool,
			size: React.PropTypes.oneOf(BUTTON_SIZES),
			submit: React.PropTypes.bool,
			type: React.PropTypes.oneOf(BUTTON_TYPES)
		},
		getDefaultProps: function getDefaultProps() {
			return {
				type: 'default'
			};
		},
		render: function render() {
			// classes
			var componentClass = classNames('Button', 'Button--' + this.props.type, this.props.size ? 'Button--' + this.props.size : null, {
				'Button--block': this.props.block,
				'is-active': this.props.isActive
			}, this.props.className);

			// props
			var props = blacklist(this.props, 'type', 'size', 'component', 'className');
			props.className = componentClass;

			if (this.props.component) {
				return React.cloneElement(this.props.component, props);
			}

			var tag = 'button';
			props.type = this.props.submit ? 'submit' : 'button';

			if (props.href) {
				tag = 'a';
				delete props.type;
			}

			return React.createElement(tag, props, this.props.children);
		}
	});

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var classnames = __webpack_require__(323);
	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'ButtonGroup',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			className: React.PropTypes.string
		},
		render: function render() {
			var className = classnames('ButtonGroup', this.props.className);
			return React.createElement('div', _extends({}, this.props, { className: className }));
		}
	});

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);
	var React = __webpack_require__(8);

	var Checkbox = React.createClass({
		displayName: 'Checkbox',

		propTypes: {
			autofocus: React.PropTypes.bool,
			className: React.PropTypes.string,
			disabled: React.PropTypes.bool,
			indeterminate: React.PropTypes.bool,
			inline: React.PropTypes.bool,
			label: React.PropTypes.string,
			style: React.PropTypes.object,
			title: React.PropTypes.string
		},
		componentDidMount: function componentDidMount() {
			if (this.props.autofocus) {
				this.refs.target.focus();
			}
			this.setIndeterminate(this.props.indeterminate);
		},
		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			this.setIndeterminate(nextProps.indeterminate);
		},
		setIndeterminate: function setIndeterminate(value) {
			this.refs.target.indeterminate = value;
		},
		render: function render() {
			var componentClass = classNames('Checkbox', {
				'Checkbox--disabled': this.props.disabled,
				'Checkbox--inline': this.props.inline
			}, this.props.className);
			var props = blacklist(this.props, 'className', 'label', 'style', 'title');
			return React.createElement(
				'label',
				{ className: componentClass, style: this.props.style, title: this.props.title },
				React.createElement('input', _extends({ ref: 'target', type: 'checkbox', className: 'Checkbox__input' }, props)),
				this.props.label && React.createElement(
					'span',
					{ className: 'Checkbox__label' },
					this.props.label
				)
			);
		}
	});

	module.exports = Checkbox;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _constants = __webpack_require__(317);

	var _constants2 = _interopRequireDefault(_constants);

	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'Card',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			style: React.PropTypes.object
		},
		render: function render() {
			var style = {
				backgroundColor: 'white',
				borderRadius: _constants2['default'].borderRadius.sm,
				boxShadow: '0 2px 3px rgba(0, 0, 0, 0.075), 0 0 0 1px rgba(0,0,0,0.1)',
				marginBottom: _constants2['default'].spacing.md,
				padding: _constants2['default'].spacing.md
			};
			return React.createElement('div', _extends({}, this.props, { style: _extends(style, this.props.style) }));
		}
	});

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _constants = __webpack_require__(317);

	var _constants2 = _interopRequireDefault(_constants);

	module.exports = _react2['default'].createClass({
		displayName: 'Col',
		propTypes: {
			/* eslint-disable react/jsx-sort-prop-types */
			basis: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, // allow pixels
			_react2['default'].PropTypes.string]),
			// allow percentage
			children: _react2['default'].PropTypes.node,
			gutter: _react2['default'].PropTypes.number,
			style: _react2['default'].PropTypes.object,
			lg: _react2['default'].PropTypes.string, // width as a percentage or fraction
			md: _react2['default'].PropTypes.string, // width as a percentage or fraction
			sm: _react2['default'].PropTypes.string, // width as a percentage or fraction
			xs: _react2['default'].PropTypes.string },
		// width as a percentage or fraction
		/* eslint-enable */
		getDefaultProps: function getDefaultProps() {
			return {
				gutter: _constants2['default'].width.gutter
			};
		},
		getInitialState: function getInitialState() {
			return {
				windowWidth: typeof window !== 'undefined' ? window.innerWidth : 0
			};
		},
		componentDidMount: function componentDidMount() {
			if (typeof window !== 'undefined') window.addEventListener('resize', this.handleResize);
		},
		componentWillUnmount: function componentWillUnmount() {
			if (typeof window !== 'undefined') window.removeEventListener('resize', this.handleResize);
		},
		handleResize: function handleResize() {
			this.setState({
				windowWidth: typeof window !== 'undefined' ? window.innerWidth : 0
			});
		},
		render: function render() {
			var _props = this.props;
			var basis = _props.basis;
			var gutter = _props.gutter;
			var xs = _props.xs;
			var sm = _props.sm;
			var md = _props.md;
			var lg = _props.lg;
			var windowWidth = this.state.windowWidth;

			var columnStyle = {
				minHeight: 1,
				paddingLeft: gutter / 2,
				paddingRight: gutter / 2
			};

			// if no width control is provided fill available space
			if (!basis && !xs && !sm && !md && !lg) {
				columnStyle.flex = '1 1 auto';
				columnStyle.msFlex = '1 1 auto';
				columnStyle.WebkitFlex = '1 1 auto';
			}

			// set widths / flex-basis
			if (basis) {
				columnStyle.flex = '1 0 ' + basis;
				columnStyle.msFlex = '1 0 ' + basis;
				columnStyle.WebkitFlex = '1 0 ' + basis;
			} else if (windowWidth < _constants2['default'].breakpoint.xs) {
				columnStyle.width = xs;
			} else if (windowWidth < _constants2['default'].breakpoint.sm) {
				columnStyle.width = sm || xs;
			} else if (windowWidth < _constants2['default'].breakpoint.md) {
				columnStyle.width = md || sm || xs;
			} else {
				columnStyle.width = lg || md || sm || xs;
			}

			if (!columnStyle.width) {
				columnStyle.width = '100%';
			}

			if (columnStyle.width in _constants2['default'].fractions) {
				columnStyle.width = _constants2['default'].fractions[columnStyle.width];
			}

			var props = (0, _blacklist2['default'])(this.props, 'basis', 'gutter', 'style', 'xs', 'sm', 'md', 'lg');

			return _react2['default'].createElement('div', _extends({ style: _extends(columnStyle, this.props.style) }, props));
		}
	});

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _constants = __webpack_require__(317);

	var _constants2 = _interopRequireDefault(_constants);

	module.exports = _react2['default'].createClass({
		displayName: 'Container',
		propTypes: {
			children: _react2['default'].PropTypes.node.isRequired,
			clearfix: _react2['default'].PropTypes.bool,
			gutter: _react2['default'].PropTypes.number,
			maxWidth: _react2['default'].PropTypes.number,
			style: _react2['default'].PropTypes.object
		},
		getDefaultProps: function getDefaultProps() {
			return {
				gutter: _constants2['default'].width.gutter,
				maxWidth: _constants2['default'].width.container
			};
		},
		render: function render() {
			var _props = this.props;
			var gutter = _props.gutter;
			var maxWidth = _props.maxWidth;

			var containerStyle = {
				marginLeft: 'auto',
				marginRight: 'auto',
				paddingLeft: gutter,
				paddingRight: gutter,
				maxWidth: maxWidth
			};
			var clearfixStyle = { clear: 'both', display: 'table' };
			var props = (0, _blacklist2['default'])(this.props, 'gutter', 'maxWidth', 'style');

			return this.props.clearfix ? _react2['default'].createElement(
				'div',
				_extends({ style: _extends(containerStyle, this.props.style) }, props),
				_react2['default'].createElement('span', { style: clearfixStyle }),
				this.props.children,
				_react2['default'].createElement('span', { style: clearfixStyle })
			) : _react2['default'].createElement('div', _extends({ style: _extends(containerStyle, this.props.style) }, props));
		}
	});

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var Transition = __webpack_require__(325);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);
	var Button = __webpack_require__(209);

	var ESC_KEYCODE = 27;
	var NO_OP = function NO_OP() {
		return undefined;
	};

	module.exports = React.createClass({
		displayName: 'Dropdown',
		propTypes: {
			alignRight: React.PropTypes.bool,
			buttonHasDisclosureArrow: React.PropTypes.bool,
			buttonLabel: React.PropTypes.string,
			buttonType: React.PropTypes.string,
			children: React.PropTypes.element,
			className: React.PropTypes.string,
			isOpen: React.PropTypes.bool,
			items: React.PropTypes.array.isRequired,
			onSelect: React.PropTypes.func
		},
		getDefaultProps: function getDefaultProps() {
			return {
				buttonHasDisclosureArrow: true,
				onSelect: NO_OP
			};
		},
		getInitialState: function getInitialState() {
			return {
				isOpen: this.props.isOpen || false
			};
		},
		componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
			if (typeof window === 'undefined') return;
			if (nextState.isOpen) {
				window.addEventListener('keydown', this.handleKeyDown);
			} else {
				window.removeEventListener('keydown', this.handleKeyDown);
			}
		},
		openDropdown: function openDropdown() {
			this.setState({ isOpen: true });
		},
		closeDropdown: function closeDropdown() {
			this.setState({ isOpen: false });
		},
		handleKeyDown: function handleKeyDown(e) {
			if (e.keyCode === ESC_KEYCODE) {
				this.closeDropdown();
			}
		},
		renderChildren: function renderChildren() {
			var _this = this;

			return React.Children.map(this.props.children, function (child) {
				return React.cloneElement(child, {
					onClick: _this.state.isOpen ? _this.closeDropdown : _this.openDropdown,
					className: classNames(child.props.className, 'Dropdown-toggle')
				});
			});
		},
		renderButton: function renderButton() {
			var disclosureArrow = this.props.buttonHasDisclosureArrow ? React.createElement('span', { className: 'disclosure-arrow' }) : null;

			return React.createElement(
				Button,
				{ type: this.props.buttonType, onClick: this.state.isOpen ? this.closeDropdown : this.openDropdown, className: 'Dropdown-toggle' },
				this.props.buttonLabel,
				disclosureArrow
			);
		},
		onClick: function onClick(selectedItem) {
			this.setState({
				isOpen: !this.state.isOpen
			});
			this.props.onSelect(selectedItem);
		},
		renderDropdownMenu: function renderDropdownMenu() {
			var self = this;
			if (!this.state.isOpen) return null;

			var dropdownMenuItems = this.props.items.map(function (item, i) {
				var menuItem;
				if (item.type === 'header') {
					menuItem = React.createElement(
						'li',
						{ key: 'item-' + i, className: 'Dropdown-menu__header' },
						item.label
					);
				} else if (item.type === 'divider') {
					menuItem = React.createElement('li', { key: 'item-' + i, className: 'Dropdown-menu__divider' });
				} else {
					menuItem = React.createElement(
						'li',
						{ key: 'item-' + i, className: 'Dropdown-menu__item' },
						React.createElement(
							'span',
							{ className: 'Dropdown-menu__action', onClick: self.onClick.bind(self, item.value) },
							item.label
						)
					);
				}
				return menuItem;
			});

			return React.createElement(
				'ul',
				{ key: 'Dropdown-menu', className: 'Dropdown-menu', role: 'menu' },
				dropdownMenuItems
			);
		},
		renderDropdownMenuBackground: function renderDropdownMenuBackground() {
			if (!this.state.isOpen) return null;
			return React.createElement('div', { className: 'Dropdown-menu-backdrop', onClick: this.closeDropdown });
		},
		render: function render() {
			// classes
			var dropdownClass = classNames('Dropdown', {
				'is-open': this.state.isOpen,
				'align-right': this.props.alignRight
			}, this.props.className);

			// props
			var props = blacklist(this.props, 'alignRight', 'buttonHasDisclosureArrow', 'buttonLabel', 'buttonType', 'className', 'isOpen', 'items');

			return React.createElement(
				'span',
				_extends({ className: dropdownClass }, props),
				React.Children.count(this.props.children) ? this.renderChildren() : this.renderButton(),
				React.createElement(
					Transition,
					{ transitionName: 'Dropdown-menu', transitionEnterTimeout: 100, transitionLeaveTimeout: 100 },
					this.renderDropdownMenu()
				),
				this.renderDropdownMenuBackground()
			);
		}
	});

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	var REGEXP_EMAIL = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

	function validateEmail(value) {
		return REGEXP_EMAIL.test(value);
	}

	module.exports = React.createClass({
		displayName: 'EmailInputGroup',
		propTypes: {
			alwaysValidate: React.PropTypes.bool,
			className: React.PropTypes.string,
			invalidMessage: React.PropTypes.string,
			label: React.PropTypes.string,
			onChange: React.PropTypes.func,
			required: React.PropTypes.bool,
			requiredMessage: React.PropTypes.string,
			value: React.PropTypes.string
		},
		getDefaultProps: function getDefaultProps() {
			return {
				requiredMessage: 'Email address is required',
				invalidMessage: 'Please enter a valid email address'
			};
		},
		getInitialState: function getInitialState() {
			return {
				isValid: true,
				validationIsActive: this.props.alwaysValidate
			};
		},
		componentDidMount: function componentDidMount() {
			if (this.state.validationIsActive) {
				this.validateInput(this.props.value);
			}
		},
		componentWillReceiveProps: function componentWillReceiveProps(newProps) {
			if (this.state.validationIsActive) {
				if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {
					// reset validation state if the value was changed outside the component
					return this.setState({
						isValid: true,
						validationIsActive: false
					});
				}
				this.validateInput(newProps.value);
			}
		},
		handleChange: function handleChange(e) {
			this._lastChangeValue = e.target.value;
			if (this.props.onChange) this.props.onChange(e);
		},
		handleBlur: function handleBlur() {
			if (!this.props.alwaysValidate) {
				this.setState({ validationIsActive: false });
			}
			this.validateInput(this.props.value);
		},
		validateInput: function validateInput(value) {
			var newState = {
				isValid: true
			};
			if (value.length && !validateEmail(value) || !value.length && this.props.required) {
				newState.isValid = false;
			}
			if (!newState.isValid) {
				newState.validationIsActive = true;
			}
			this.setState(newState);
		},
		render: function render() {
			var validationMessage;
			if (!this.state.isValid) {
				validationMessage = React.createElement(
					'div',
					{ className: 'form-validation is-invalid' },
					this.props.value.length ? this.props.invalidMessage : this.props.requiredMessage
				);
			}
			var formGroupClass = classNames('FormField', {
				'is-invalid': !this.state.isValid
			}, this.props.className);

			var componentLabel = this.props.label ? React.createElement(
				'label',
				{ className: 'FormLabel', htmlFor: 'inputEmail' },
				this.props.label
			) : null;

			return React.createElement(
				'div',
				{ className: formGroupClass },
				componentLabel,
				React.createElement('input', { onChange: this.handleChange, onBlur: this.handleBlur, value: this.props.value, type: 'email', className: 'FormInput', placeholder: 'Enter email', id: 'inputEmail' }),
				validationMessage
			);
		}
	});

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	/*
		Based on: https://github.com/paramaggarwal/react-dropzone
	*/

	var Dropzone = React.createClass({
		displayName: 'Dropzone',

		propTypes: {
			className: React.PropTypes.string,
			label: React.PropTypes.string,
			labelActive: React.PropTypes.string,
			onDrop: React.PropTypes.func.isRequired
		},
		getDefaultProps: function getDefaultProps() {
			return {
				label: 'Drag Files Here',
				labelActive: 'Drop to Upload'
			};
		},
		getInitialState: function getInitialState() {
			return {
				isDragActive: false
			};
		},
		onDragLeave: function onDragLeave() {
			this.setState({
				isDragActive: false
			});
		},
		onDragOver: function onDragOver(e) {
			e.preventDefault();
			e.dataTransfer.dropEffect = 'copy';
			this.setState({
				isDragActive: true
			});
		},
		onDrop: function onDrop(e) {
			e.preventDefault();

			this.setState({
				isDragActive: false
			});

			var files;
			if (e.dataTransfer) {
				files = e.dataTransfer.files;
			} else if (e.target) {
				files = e.target.files;
			}

			if (this.props.onDrop) {
				files = Array.prototype.slice.call(files);
				this.props.onDrop(files);
			}
		},
		onClick: function onClick() {
			this.refs.fileInput.click();
		},
		render: function render() {
			var className = classNames('FileDragAndDrop', {
				'active': this.state.isDragActive
			}, this.props.className);
			return React.createElement(
				'button',
				{ className: className, onClick: this.onClick, onDragLeave: this.onDragLeave, onDragOver: this.onDragOver, onDrop: this.onDrop },
				React.createElement('input', { style: { display: 'none' }, type: 'file', multiple: true, ref: 'fileInput', onChange: this.onDrop }),
				React.createElement(
					'div',
					{ className: 'FileDragAndDrop__label' },
					this.state.isDragActive ? this.props.labelActive : this.props.label
				),
				this.props.children
			);
		}
	});

	module.exports = Dropzone;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);

	var Button = __webpack_require__(209);
	var Spinner = __webpack_require__(243);

	module.exports = React.createClass({
		displayName: 'FileUpload',
		propTypes: {
			buttonLabelChange: React.PropTypes.string,
			buttonLabelInitial: React.PropTypes.string,
			disabled: React.PropTypes.bool,
			file: React.PropTypes.object, // https://developer.mozilla.org/en/docs/Using_files_from_web_applications
			onChange: React.PropTypes.func
		},
		getDefaultProps: function getDefaultProps() {
			return {
				buttonLabelInitial: 'Upload File',
				buttonLabelChange: 'Change File'
			};
		},
		getInitialState: function getInitialState() {
			return {
				dataURI: null,
				file: {},
				loading: false
			};
		},
		componentDidMount: function componentDidMount() {
			this.refs.fileInput.addEventListener('click', function () {
				this.value = '';
			}, false);
		},
		triggerFileBrowser: function triggerFileBrowser() {
			this.refs.fileInput.click();
		},
		handleChange: function handleChange(e) {
			var _this = this;

			var reader = new FileReader();
			var file = e.target.files[0];

			reader.readAsDataURL(file);

			reader.onloadstart = function () {
				_this.setState({
					loading: true
				});
			};
			reader.onloadend = function (upload) {
				_this.setState({
					loading: false,
					file: file,
					dataURI: upload.target.result
				});
				if (typeof _this.props.onChange === 'function') {
					_this.props.onChange(e, {
						file: file,
						dataURI: upload.target.result
					});
				}
			};
		},
		cancelUpload: function cancelUpload(e) {
			this.setState({
				dataURI: null,
				file: {}
			});
			this.props.onChange(e, null);
		},
		render: function render() {
			var _state = this.state;
			var dataURI = _state.dataURI;
			var file = _state.file;

			// props
			var props = blacklist(this.props, 'buttonClassChange', 'buttonClassInitial', 'buttonLabelChange', 'buttonLabelInitial', 'disabled', 'file', 'onChange');
			// elements
			var component = dataURI ? React.createElement(
				'div',
				{ className: 'FileUpload' },
				React.createElement(
					'div',
					{ className: 'FileUpload__image' },
					React.createElement('img', { className: 'FileUpload__image-src', src: dataURI })
				),
				React.createElement(
					'div',
					{ className: 'FileUpload__content' },
					React.createElement(
						'div',
						{ className: 'FileUpload__message' },
						file.name,
						' (',
						Math.round(file.size / 1024),
						'Kb)'
					),
					React.createElement(
						'div',
						{ className: 'FileUpload__buttons' },
						React.createElement(
							Button,
							{ onClick: this.triggerFileBrowser, disabled: this.state.loading },
							this.state.loading && React.createElement(Spinner, null),
							this.props.buttonLabelChange
						),
						React.createElement(
							Button,
							{ onClick: this.cancelUpload, type: 'link-cancel', disabled: this.state.loading },
							'Cancel'
						)
					)
				)
			) : React.createElement(
				Button,
				{ onClick: this.triggerFileBrowser, disabled: this.props.disabled || this.state.loading },
				this.state.loading ? React.createElement(Spinner, null) : null,
				this.props.buttonLabelInitial
			);

			return React.createElement(
				'div',
				null,
				component,
				React.createElement('input', _extends({ style: { display: 'none' }, type: 'file', ref: 'fileInput', onChange: this.handleChange }, props))
			);
		}
	});

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var blacklist = __webpack_require__(324);
	var classnames = __webpack_require__(323);
	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'Form',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			className: React.PropTypes.string,
			component: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
			type: React.PropTypes.oneOf(['basic', 'horizontal', 'inline'])
		},
		getDefaultProps: function getDefaultProps() {
			return {
				component: 'form',
				type: 'basic'
			};
		},
		render: function render() {
			var props = blacklist(this.props, 'children', 'type');
			props.className = classnames('Form', 'Form--' + this.props.type, this.props.className);

			return React.createElement(this.props.component, props, this.props.children);
		}
	});

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'FormField',
		propTypes: {
			className: React.PropTypes.string,
			htmlFor: React.PropTypes.string,
			id: React.PropTypes.string,
			label: React.PropTypes.string,
			offsetAbsentLabel: React.PropTypes.bool,
			width: React.PropTypes.oneOf(['one-half', 'two-quarters', 'three-sixths', 'one-quarter', 'three-quarters', 'one-third', 'two-sixths', 'two-thirds', 'four-sixths', 'one-fifth', 'two-fifths', 'three-fifths', 'four-fifths', 'one-sixth', 'five-sixths'])
		},
		render: function render() {
			// classes
			var componentClass = classNames('FormField', {
				'offset-absent-label': this.props.offsetAbsentLabel
			}, this.props.width, this.props.className);

			// props
			var props = blacklist(this.props, 'className', 'label', 'offsetAbsentLabel', 'width');

			// elements
			var componentLabel = this.props.label ? React.createElement(
				'label',
				{ className: 'FormLabel', htmlFor: this.props.id || this.props.htmlFor },
				this.props.label
			) : null;

			return React.createElement(
				'div',
				_extends({ className: componentClass }, props),
				componentLabel,
				this.props.children
			);
		}
	});

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);
	var Spinner = __webpack_require__(243);

	var icons = __webpack_require__(318).map;

	module.exports = React.createClass({
		displayName: 'FormIcon',
		propTypes: {
			className: React.PropTypes.string,
			color: React.PropTypes.oneOf(['danger', 'default', 'muted', 'primary', 'success', 'warning']),
			fill: React.PropTypes.oneOf(['danger', 'default', 'muted', 'primary', 'success', 'warning']),
			icon: React.PropTypes.string,
			isLoading: React.PropTypes.bool,
			type: React.PropTypes.string
		},
		render: function render() {
			// classes
			var className = classNames('IconField__icon', icons[this.props.icon].className, this.props.fill ? 'IconField__icon-fill--' + this.props.fill : null, this.props.type ? 'IconField__icon-color--' + this.props.type : null, this.props.className);
			var component = this.props.isLoading ? React.createElement(Spinner, { size: 'sm' }) : React.createElement('div', { className: className });
			return component;
		}
	});

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	var FormField = __webpack_require__(220);
	var Spinner = __webpack_require__(243);

	var ICON_MAP = __webpack_require__(318).map;
	var ICON_KEYS = __webpack_require__(318).keys;
	var COLOR_VARIANTS = ['danger', 'default', 'primary', 'success', 'warning'];

	module.exports = React.createClass({
		displayName: 'FormIconField',
		propTypes: {
			className: React.PropTypes.string,
			iconColor: React.PropTypes.oneOf(COLOR_VARIANTS),
			iconFill: React.PropTypes.oneOf(COLOR_VARIANTS),
			iconIsLoading: React.PropTypes.bool,
			iconKey: React.PropTypes.oneOf(ICON_KEYS).isRequired,
			iconPosition: React.PropTypes.oneOf(['left', 'right'])
		},
		getDefaultProps: function getDefaultProps() {
			return {
				iconPosition: 'left'
			};
		},
		render: function render() {
			// props
			var props = blacklist(this.props, 'children', 'iconPosition', 'iconKey', 'iconFill', 'iconColor', 'iconIsLoading');

			// classes
			var fieldClass = classNames('IconField', {
				'has-fill-icon': this.props.iconFill,
				'is-loading-icon': this.props.iconIsLoading
			}, this.props.iconFill ? 'field-context-' + this.props.iconFill : null, this.props.iconColor ? 'field-context-' + this.props.iconColor : null, this.props.iconPosition);

			var iconClass = classNames('IconField__icon', this.props.iconFill ? 'IconField__icon-fill--' + this.props.iconFill : null, this.props.iconColor ? 'IconField__icon-color--' + this.props.iconColor : null, ICON_MAP[this.props.iconKey].className);

			var icon = this.props.iconIsLoading ? React.createElement(Spinner, { size: 'sm' }) : React.createElement('span', { className: iconClass });

			return React.createElement(
				FormField,
				props,
				React.createElement(
					'div',
					{ className: fieldClass },
					this.props.children,
					icon
				)
			);
		}
	});

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'FormInput',
		propTypes: {
			autofocus: React.PropTypes.bool,
			className: React.PropTypes.string,
			disabled: React.PropTypes.bool,
			href: React.PropTypes.string,
			id: React.PropTypes.string,
			multiline: React.PropTypes.bool,
			name: React.PropTypes.string,
			noedit: React.PropTypes.bool,
			onChange: React.PropTypes.func,
			size: React.PropTypes.oneOf(['lg', 'sm', 'xs']),
			type: React.PropTypes.string,
			value: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string])
		},

		getDefaultProps: function getDefaultProps() {
			return {
				type: 'text'
			};
		},

		componentDidMount: function componentDidMount() {
			if (this.props.autofocus) {
				this.focus();
			}
		},

		focus: function focus() {
			this.refs.input.focus();
		},

		render: function render() {
			// classes
			var className = classNames({
				'FormInput-noedit': this.props.noedit,
				'FormInput-noedit--multiline': this.props.noedit && this.props.multiline,
				'FormInput': !this.props.noedit
			}, this.props.size ? 'FormInput--' + this.props.size : null, this.props.className);
			var props = _extends({}, this.props, { className: className, ref: 'input' });
			var Element = 'input';
			if (this.props.noedit && this.props.href) {
				Element = 'a';
				props.type = null;
				props.children = props.children || props.value;
			} else if (this.props.noedit) {
				Element = 'div';
				props.type = null;
				props.children = props.children || props.value;
			} else if (this.props.multiline) {
				Element = 'textarea';
			}

			return React.createElement(Element, props);
		}
	});

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'FormLabel',
		propTypes: {
			className: React.PropTypes.string,
			htmlFor: React.PropTypes.string,
			id: React.PropTypes.string,
			style: React.PropTypes.object,
			verticalAlign: React.PropTypes.oneOf(['baseline', 'bottom', 'inherit', 'initial', 'middle', 'sub', 'super', 'text-bottom', 'text-top', 'top'])
		},
		render: function render() {
			// classes
			var className = classNames('FormLabel', this.props.className);
			// props
			var props = blacklist(this.props, 'htmlFor', 'id', 'className', 'style');
			// style
			var style;
			if (this.props.verticalAlign) {
				style = {
					verticalAlign: this.props.verticalAlign
				};
			}
			return React.createElement(
				'label',
				_extends({ className: className, htmlFor: this.props.htmlFor || this.props.id, style: style || this.props.style }, props),
				this.props.children
			);
		}
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	var NOTE_TYPES = ['default', 'primary', 'success', 'warning', 'danger'];

	module.exports = React.createClass({
		displayName: 'FormNote',
		propTypes: {
			className: React.PropTypes.string,
			note: React.PropTypes.string,
			type: React.PropTypes.oneOf(NOTE_TYPES)
		},
		getDefaultProps: function getDefaultProps() {
			return {
				type: 'default'
			};
		},
		render: function render() {
			// classes
			var componentClass = classNames('FormNote', this.props.type ? 'FormNote--' + this.props.type : null, this.props.className);

			// props
			var props = blacklist(this.props, 'className', 'note', 'type');

			// allow users to pass through the note as an attribute or as children
			return React.createElement(
				'div',
				_extends({ className: componentClass, dangerouslySetInnerHTML: this.props.note ? { __html: this.props.note } : null }, props),
				this.props.children
			);
		}
	});

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'FormRow',
		propTypes: {
			className: React.PropTypes.string
		},
		render: function render() {
			var className = classNames('FormRow', this.props.className);

			return React.createElement(
				'div',
				{ className: className },
				this.props.children
			);
		}
	});

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _icons = __webpack_require__(319);

	var _icons2 = _interopRequireDefault(_icons);

	module.exports = _react2['default'].createClass({
		displayName: 'FormSelect',
		propTypes: {
			alwaysValidate: _react2['default'].PropTypes.bool,
			className: _react2['default'].PropTypes.string,
			disabled: _react2['default'].PropTypes.bool,
			firstOption: _react2['default'].PropTypes.string,
			htmlFor: _react2['default'].PropTypes.string,
			id: _react2['default'].PropTypes.string,
			label: _react2['default'].PropTypes.string,
			onChange: _react2['default'].PropTypes.func.isRequired,
			options: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.shape({
				label: _react2['default'].PropTypes.string,
				value: _react2['default'].PropTypes.string
			})).isRequired,
			prependEmptyOption: _react2['default'].PropTypes.bool,
			required: _react2['default'].PropTypes.bool,
			requiredMessage: _react2['default'].PropTypes.string,
			value: _react2['default'].PropTypes.string
		},
		getDefaultProps: function getDefaultProps() {
			return {
				requiredMessage: 'This field is required'
			};
		},
		getInitialState: function getInitialState() {
			return {
				isValid: true,
				validationIsActive: this.props.alwaysValidate
			};
		},
		componentDidMount: function componentDidMount() {
			if (this.state.validationIsActive) {
				this.validateInput(this.props.value);
			}
		},
		componentWillReceiveProps: function componentWillReceiveProps(newProps) {
			if (this.state.validationIsActive) {
				if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {
					// reset validation state if the value was changed outside the component
					return this.setState({
						isValid: true,
						validationIsActive: false
					});
				}
				this.validateInput(newProps.value);
			}
		},
		handleChange: function handleChange(e) {
			this._lastChangeValue = e.target.value;
			if (this.props.onChange) this.props.onChange(e.target.value);
		},
		handleBlur: function handleBlur() {
			if (!this.props.alwaysValidate) {
				this.setState({
					validationIsActive: false
				});
			}
			this.validateInput(this.props.value);
		},
		validateInput: function validateInput(value) {
			var newState = {
				isValid: true
			};
			if (this.props.required && (!value || value && !value.length)) {
				newState.isValid = false;
			}
			if (!newState.isValid) {
				newState.validationIsActive = true;
			}
			this.setState(newState);
		},
		renderIcon: function renderIcon(icon) {
			var iconClassname = (0, _classnames2['default'])('FormSelect__arrows', {
				'FormSelect__arrows--disabled': this.props.disabled
			});
			return _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: icon }, className: iconClassname });
		},
		render: function render() {
			// props
			var props = (0, _blacklist2['default'])(this.props, 'prependEmptyOption', 'firstOption', 'alwaysValidate', 'htmlFor', 'id', 'label', 'onChange', 'options', 'required', 'requiredMessage', 'className');

			// classes
			var componentClass = (0, _classnames2['default'])('FormField', {
				'is-invalid': !this.state.isValid
			}, this.props.className);

			// validation message
			var validationMessage = undefined;
			if (!this.state.isValid) {
				validationMessage = _react2['default'].createElement(
					'div',
					{ className: 'form-validation is-invalid' },
					this.props.requiredMessage
				);
			}

			// dynamic elements
			var forAndID = this.props.htmlFor || this.props.id;
			var componentLabel = this.props.label ? _react2['default'].createElement(
				'label',
				{ className: 'FormLabel', htmlFor: forAndID },
				this.props.label
			) : null;

			// options
			var options = this.props.options.map(function (opt, i) {
				return _react2['default'].createElement(
					'option',
					{ key: 'option-' + i, value: opt.value },
					opt.label
				);
			});
			if (this.props.prependEmptyOption || this.props.firstOption) {
				options.unshift(_react2['default'].createElement(
					'option',
					{ key: 'option-blank', value: '' },
					this.props.firstOption ? this.props.firstOption : 'Select...'
				));
			}

			return _react2['default'].createElement(
				'div',
				{ className: componentClass },
				componentLabel,
				_react2['default'].createElement(
					'div',
					{ className: 'u-pos-relative' },
					_react2['default'].createElement(
						'select',
						_extends({ className: 'FormInput FormSelect', id: forAndID, onChange: this.handleChange, onBlur: this.handleBlur }, props),
						options
					),
					this.renderIcon(_icons2['default'].selectArrows)
				),
				validationMessage
			);
		}
	});

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	var icons = __webpack_require__(318).map;
	var validNames = __webpack_require__(318).keys;

	var Glyph = React.createClass({
		displayName: 'Glyph',
		propTypes: {
			className: React.PropTypes.string,
			icon: React.PropTypes.oneOf(validNames),
			type: React.PropTypes.oneOf(['danger', 'default', 'muted', 'primary', 'success', 'warning'])
		},
		render: function render() {
			// classes
			var className = classNames('Glyph__icon', icons[this.props.icon].className, this.props.type ? 'IconField__icon-color--' + this.props.type : null, this.props.className);
			return React.createElement('i', { className: className });
		}
	});

	module.exports = Glyph;
	module.exports.names = validNames;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'InputGroup',
		propTypes: {
			className: React.PropTypes.string,
			contiguous: React.PropTypes.bool
		},
		render: function render() {
			// classes
			var className = classNames('InputGroup', {
				'InputGroup--contiguous': this.props.contiguous
			}, this.props.className);

			return React.createElement('div', _extends({}, this.props, { className: className }));
		}
	});

	// expose the child to the top level export
	module.exports.Section = __webpack_require__(230);

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'InputGroupSection',
		propTypes: {
			className: React.PropTypes.string,
			grow: React.PropTypes.bool
		},
		render: function render() {
			// classes
			var className = classNames('InputGroup_section', {
				'InputGroup_section--grow': this.props.grow
			}, this.props.className);

			return React.createElement('div', _extends({}, this.props, { className: className }));
		}
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(6);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactAddonsCssTransitionGroup = __webpack_require__(325);

	var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _constants = __webpack_require__(317);

	var TransitionPortal = _react2['default'].createClass({
		displayName: 'TransitionPortal',
		componentDidMount: function componentDidMount() {
			if (!_constants.canUseDOM) return;
			var p = document.createElement('div');
			document.body.appendChild(p);
			this.portalElement = p;
			this.componentDidUpdate();
		},
		componentDidUpdate: function componentDidUpdate() {
			if (!_constants.canUseDOM) return;
			_reactDom2['default'].render(_react2['default'].createElement(
				_reactAddonsCssTransitionGroup2['default'],
				this.props,
				this.props.children
			), this.portalElement);
		},
		componentWillUnmount: function componentWillUnmount() {
			if (!_constants.canUseDOM) return;
			document.body.removeChild(this.portalElement);
		},
		portalElement: null,
		render: function render() {
			return null;
		}
	});

	module.exports = _react2['default'].createClass({
		displayName: 'Modal',
		propTypes: {
			autofocusFirstElement: _react2['default'].PropTypes.bool,
			backdropClosesModal: _react2['default'].PropTypes.bool,
			className: _react2['default'].PropTypes.string,
			isOpen: _react2['default'].PropTypes.bool,
			onCancel: _react2['default'].PropTypes.func,
			width: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['small', 'medium', 'large']), _react2['default'].PropTypes.number])
		},
		getDefaultProps: function getDefaultProps() {
			return {
				width: 'medium'
			};
		},
		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			if (!_constants.canUseDOM) return;
			if (!this.props.isOpen && nextProps.isOpen) {
				// setTimeout(() => this.handleAccessibility());
				document.body.style.overflow = 'hidden';
			} else if (this.props.isOpen && !nextProps.isOpen) {
				// setTimeout(() => this.removeAccessibilityHandlers());
				document.body.style.overflow = null;
			}
		},
		/*
	 handleAccessibility () {
	 	// Remember the element that was focused before we opened the modal
	 	// so we can return focus to it once we close the modal.
	 	this.focusedElementBeforeModalOpened = document.activeElement;
	 		// We're using a transition to reveal the modal,
	 	// so wait until the element is visible, before
	 	// finding the first keyboard focusable element
	 	// and passing focus to it, otherwise the browser
	 	// might scroll the document to reveal the element
	 	// receiving focus
	 	if (this.props.autofocusFirstElement) {
	 		ally.when.visibleArea({
	 			context: this.modalElement,
	 			callback: function(context) {
	 				// the modal is visible on screen, so find the first
	 				// keyboard focusable element (giving any element with
	 				// autofocus attribute precendence). If the modal does
	 				// not contain any keyboard focusabe elements, focus will
	 				// be given to the modal itself.
	 				var element = ally.query.firstTabbable({
	 					context: context,
	 					defaultToContext: true,
	 				});
	 				element.focus();
	 			},
	 		});
	 	}
	 		// Make sure that no element outside of the modal
	 	// can be interacted with while the modal is visible.
	 	this.disabledHandle = ally.maintain.disabled({
	 		filter: this.modalElement,
	 	});
	 		// Make sure that no element outside of the modal
	 	// is exposed via the Accessibility Tree, to prevent
	 	// screen readers from navigating to content it shouldn't
	 	// be seeing while the modal is open.
	 	this.hiddenHandle = ally.maintain.hidden({
	 		filter: this.modalElement,
	 	});
	 		// React to escape keys as mandated by ARIA Practices
	 	this.keyHandle = ally.when.key({
	 		escape: this.handleClose,
	 	});
	 },
	 removeAccessibilityHandlers () {
	 	// undo listening to keyboard
	 	this.keyHandle && this.keyHandle.disengage();
	 		// undo hiding elements outside of the modal
	 	this.hiddenHandle && this.hiddenHandle.disengage();
	 		// undo disabling elements outside of the modal
	 	this.disabledHandle && this.disabledHandle.disengage();
	 		// return focus to where it was before we opened the modal
	 	this.focusedElementBeforeModalOpened && this.focusedElementBeforeModalOpened.focus();
	 },
	 handleModalClick (event) {
	 	if (event.target.dataset.modal) this.handleClose();
	 },
	 */
		handleClose: function handleClose() {
			this.props.onCancel();
		},
		renderDialog: function renderDialog() {
			var _this = this;

			if (!this.props.isOpen) return;
			var dialogClassname = (0, _classnames2['default'])('Modal-dialog', this.props.width && isNaN(this.props.width) ? 'Modal-dialog--' + this.props.width : null);
			return _react2['default'].createElement(
				'div',
				{ className: dialogClassname, style: this.props.width && !isNaN(this.props.width) ? { width: this.props.width + 20 } : null },
				_react2['default'].createElement(
					'div',
					{ ref: function (ref) {
							_this.modalElement = ref;
						}, className: 'Modal-content' },
					this.props.children
				)
			);
		},
		renderBackdrop: function renderBackdrop() {
			if (!this.props.isOpen) return;
			return _react2['default'].createElement('div', { className: 'Modal-backdrop', onClick: this.props.backdropClosesModal ? this.handleClose : null });
		},
		render: function render() {
			var className = (0, _classnames2['default'])('Modal', {
				'is-open': this.props.isOpen
			}, this.props.className);
			var props = (0, _blacklist2['default'])(this.props, 'backdropClosesModal', 'className', 'isOpen', 'onCancel');
			return _react2['default'].createElement(
				'div',
				null,
				_react2['default'].createElement(
					TransitionPortal,
					_extends({}, props, { 'data-modal': 'true', className: className, /*onClick={this.handleModalClick}*/transitionName: 'Modal-dialog', transitionEnterTimeout: 260, transitionLeaveTimeout: 140, component: 'div' }),
					this.renderDialog()
				),
				_react2['default'].createElement(
					TransitionPortal,
					{ transitionName: 'Modal-background', transitionEnterTimeout: 140, transitionLeaveTimeout: 240, component: 'div' },
					this.renderBackdrop()
				)
			);
		}
	});

	// expose the children to the top level export
	module.exports.Body = __webpack_require__(232);
	module.exports.Footer = __webpack_require__(233);
	module.exports.Header = __webpack_require__(234);

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var classnames = __webpack_require__(323);
	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'ModalBody',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			className: React.PropTypes.string
		},
		render: function render() {
			var className = classnames('Modal__body', this.props.className);
			return React.createElement('div', _extends({}, this.props, { className: className }));
		}
	});

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var classnames = __webpack_require__(323);
	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'ModalFooter',
		propTypes: {
			children: React.PropTypes.node.isRequired,
			className: React.PropTypes.string
		},
		render: function render() {
			var className = classnames('Modal__footer', this.props.className);
			return React.createElement('div', _extends({}, this.props, { className: className }));
		}
	});

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var classnames = __webpack_require__(323);
	var React = __webpack_require__(8);

	module.exports = React.createClass({
		displayName: 'ModalHeader',
		propTypes: {
			children: React.PropTypes.node,
			className: React.PropTypes.string,
			onClose: React.PropTypes.func,
			showCloseButton: React.PropTypes.bool,
			text: React.PropTypes.string
		},
		handleClose: function handleClose() {
			document.body.style.overflow = null;
			this.props.onClose();
		},
		render: function render() {

			// elements
			var className = classnames('Modal__header', this.props.className);
			var close = this.props.showCloseButton ? React.createElement('button', { type: 'button', onClick: this.handleClose, className: 'Modal__header__close' }) : null;
			var text = this.props.text ? React.createElement(
				'h4',
				{ className: 'Modal__header__text' },
				this.props.text
			) : null;
			return React.createElement(
				'div',
				_extends({}, this.props, { className: className }),
				close,
				text,
				this.props.children
			);
		}
	});

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	var Page = React.createClass({
		displayName: 'Page',
		propTypes: {
			children: React.PropTypes.node,
			label: React.PropTypes.string,
			onSelect: React.PropTypes.func,
			page: React.PropTypes.number,
			selected: React.PropTypes.bool
		},
		onSelect: function onSelect() {
			this.props.onSelect(this.props.page);
		},
		render: function render() {
			var _props = this.props;
			var children = _props.children;
			var selected = _props.selected;
			var label = _props.label;

			var className = classNames('Pagination__list__item', {
				'is-selected': selected
			});
			return React.createElement(
				'button',
				{ className: className, onClick: this.onSelect },
				children
			);
		}
	});

	module.exports = React.createClass({
		displayName: 'Pagination',
		propTypes: {
			className: React.PropTypes.string,
			currentPage: React.PropTypes.number.isRequired,
			limit: React.PropTypes.number,
			onPageSelect: React.PropTypes.func,
			pageSize: React.PropTypes.number.isRequired,
			plural: React.PropTypes.string,
			singular: React.PropTypes.string,
			style: React.PropTypes.object,
			total: React.PropTypes.number.isRequired
		},
		renderCount: function renderCount() {
			var count = '';
			var _props2 = this.props;
			var currentPage = _props2.currentPage;
			var pageSize = _props2.pageSize;
			var plural = _props2.plural;
			var singular = _props2.singular;
			var total = _props2.total;

			if (!total) {
				count = 'No ' + (plural || 'records');
			} else if (total > pageSize) {
				var start = pageSize * (currentPage - 1) + 1;
				var end = Math.min(start + pageSize - 1, total);
				count = 'Showing ' + start + ' to ' + end + ' of ' + total;
			} else {
				count = 'Showing ' + total;
				if (total > 1 && plural) {
					count += ' ' + plural;
				} else if (total === 1 && singular) {
					count += ' ' + singular;
				}
			}
			return React.createElement(
				'div',
				{ className: 'Pagination__count' },
				count
			);
		},
		onPageSelect: function onPageSelect(page) {
			if (this.props.onPageSelect) {
				this.props.onPageSelect(page);
			}
		},
		renderPages: function renderPages() {
			if (this.props.total <= this.props.pageSize) return null;

			var pages = [];
			var _props3 = this.props;
			var currentPage = _props3.currentPage;
			var pageSize = _props3.pageSize;
			var total = _props3.total;
			var limit = _props3.limit;

			var totalPages = Math.ceil(total / pageSize);
			var minPage = 1;
			var maxPage = totalPages;

			if (limit && limit < totalPages) {
				var rightLimit = Math.floor(limit / 2);
				var leftLimit = rightLimit + limit % 2 - 1;
				minPage = currentPage - leftLimit;
				maxPage = currentPage + rightLimit;

				if (minPage < 1) {
					maxPage = limit;
					minPage = 1;
				}
				if (maxPage > totalPages) {
					minPage = totalPages - limit + 1;
					maxPage = totalPages;
				}
			}
			if (minPage > 1) {
				pages.push(React.createElement(
					Page,
					{ key: 'page_start', onSelect: this.onPageSelect },
					'...'
				));
			}
			for (var page = minPage; page <= maxPage; page++) {
				var selected = page === currentPage;
				/* eslint-disable no-loop-func */
				pages.push(React.createElement(
					Page,
					{ key: 'page_' + page, selected: selected, onSelect: this.onPageSelect, page: page },
					page
				));
				/* eslint-enable */
			}
			if (maxPage < totalPages) {
				pages.push(React.createElement(
					Page,
					{ key: 'page_end', onSelect: this.onPageSelect, page: totalPages },
					'...'
				));
			}
			return React.createElement(
				'div',
				{ className: 'Pagination__list' },
				pages
			);
		},
		render: function render() {
			var className = classNames('Pagination', this.props.className);
			return React.createElement(
				'div',
				{ className: className, style: this.props.style },
				this.renderCount(),
				this.renderPages()
			);
		}
	});

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	function validatePassword(value) {
		return value.length >= 8;
	}

	module.exports = React.createClass({
		displayName: 'PasswordInputGroup',
		propTypes: {
			alwaysValidate: React.PropTypes.bool,
			className: React.PropTypes.string,
			invalidMessage: React.PropTypes.string,
			label: React.PropTypes.string,
			onChange: React.PropTypes.func,
			required: React.PropTypes.bool,
			requiredMessage: React.PropTypes.string,
			validatePassword: React.PropTypes.func,
			value: React.PropTypes.string
		},
		getDefaultProps: function getDefaultProps() {
			return {
				validatePassword: validatePassword,
				requiredMessage: 'Password is required',
				invalidMessage: 'Password must be at least 8 characters in length'
			};
		},
		getInitialState: function getInitialState() {
			return {
				isValid: true,
				validationIsActive: this.props.alwaysValidate
			};
		},
		componentDidMount: function componentDidMount() {
			if (this.state.validationIsActive) {
				this.validateInput(this.props.value);
			}
		},
		componentWillReceiveProps: function componentWillReceiveProps(newProps) {
			if (this.state.validationIsActive) {
				if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {
					// reset validation state if the value was changed outside the component
					return this.setState({
						isValid: true,
						validationIsActive: false
					});
				}
				this.validateInput(newProps.value);
			}
		},
		handleChange: function handleChange(e) {
			this._lastChangeValue = e.target.value;
			if (this.props.onChange) this.props.onChange(e);
		},
		handleBlur: function handleBlur() {
			if (!this.props.alwaysValidate) {
				this.setState({ validationIsActive: false });
			}
			this.validateInput(this.props.value);
		},
		validateInput: function validateInput(value) {
			var newState = {
				isValid: true
			};
			if (value.length && !this.props.validatePassword(value) || !value.length && this.props.required) {
				newState.isValid = false;
			}
			if (!newState.isValid) {
				newState.validationIsActive = true;
			}
			this.setState(newState);
		},
		render: function render() {
			var validationMessage;
			if (!this.state.isValid) {
				validationMessage = React.createElement(
					'div',
					{ className: 'form-validation is-invalid' },
					this.props.value.length ? this.props.invalidMessage : this.props.requiredMessage
				);
			}
			var formGroupClass = classNames('FormField', {
				'is-invalid': !this.state.isValid
			}, this.props.className);

			var componentLabel = this.props.label ? React.createElement(
				'label',
				{ className: 'FormLabel', htmlFor: 'inputPassword' },
				this.props.label
			) : null;

			return React.createElement(
				'div',
				{ className: formGroupClass },
				componentLabel,
				React.createElement('input', { onChange: this.handleChange, onBlur: this.handleBlur, value: this.props.value, type: 'password', className: 'FormInput', placeholder: 'Enter password', id: 'inputPassword' }),
				validationMessage
			);
		}
	});

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	var ALERT_TYPES = ['danger', 'default', 'info', 'primary', 'success', 'warning', 'danger-inverted', 'default-inverted', 'info-inverted', 'primary-inverted', 'success-inverted', 'warning-inverted'];

	module.exports = React.createClass({
		displayName: 'Pill',
		propTypes: {
			className: React.PropTypes.string,
			label: React.PropTypes.string.isRequired,
			onClear: React.PropTypes.func,
			onClick: React.PropTypes.func,
			type: React.PropTypes.oneOf(ALERT_TYPES)
		},
		getDefaultProps: function getDefaultProps() {
			return {
				type: 'default'
			};
		},
		renderClearButton: function renderClearButton() {
			if (!this.props.onClear) return null;
			return React.createElement(
				'button',
				{ type: 'button', onClick: this.props.onClear, className: 'Pill__clear' },
				'×'
			);
		},
		render: function render() {
			var componentClass = classNames('Pill', 'Pill--' + this.props.type, this.props.className);

			var props = blacklist(this.props, 'className', 'label', 'onClear', 'onClick', 'type');
			props.className = componentClass;

			return React.createElement(
				'div',
				props,
				React.createElement(
					'button',
					{ type: 'button', onClick: this.props.onClick, className: 'Pill__label' },
					this.props.label
				),
				this.renderClearButton()
			);
		}
	});

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);
	var React = __webpack_require__(8);

	var Radio = React.createClass({
		displayName: 'Radio',

		propTypes: {
			className: React.PropTypes.string,
			disabled: React.PropTypes.bool,
			inline: React.PropTypes.bool,
			label: React.PropTypes.string
		},
		render: function render() {
			var componentClass = classNames('Radio', {
				'Radio--disabled': this.props.disabled,
				'Radio--inline': this.props.inline
			}, this.props.className);
			var props = blacklist(this.props, 'className', 'label');

			return React.createElement(
				'label',
				{ className: componentClass },
				React.createElement('input', _extends({ type: 'radio', className: 'Radio__input' }, props)),
				this.props.label && React.createElement(
					'span',
					{ className: 'Radio__label' },
					this.props.label
				)
			);
		}
	});

	module.exports = Radio;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _constants = __webpack_require__(317);

	var _constants2 = _interopRequireDefault(_constants);

	module.exports = _react2['default'].createClass({
		displayName: 'ResponsiveText',
		propTypes: {
			hiddenLG: _react2['default'].PropTypes.string,
			hiddenMD: _react2['default'].PropTypes.string,
			hiddenSM: _react2['default'].PropTypes.string,
			hiddenXS: _react2['default'].PropTypes.string,
			visibleLG: _react2['default'].PropTypes.string,
			visibleMD: _react2['default'].PropTypes.string,
			visibleSM: _react2['default'].PropTypes.string,
			visibleXS: _react2['default'].PropTypes.string
		},
		getInitialState: function getInitialState() {
			return {
				windowWidth: typeof window !== 'undefined' ? window.innerWidth : 0
			};
		},
		componentDidMount: function componentDidMount() {
			if (typeof window !== 'undefined') window.addEventListener('resize', this.handleResize);
		},
		componentWillUnmount: function componentWillUnmount() {
			if (typeof window !== 'undefined') window.removeEventListener('resize', this.handleResize);
		},
		handleResize: function handleResize() {
			this.setState({
				windowWidth: typeof window !== 'undefined' ? window.innerWidth : 0
			});
		},
		render: function render() {
			var _props = this.props;
			var hiddenXS = _props.hiddenXS;
			var hiddenSM = _props.hiddenSM;
			var hiddenMD = _props.hiddenMD;
			var hiddenLG = _props.hiddenLG;
			var visibleXS = _props.visibleXS;
			var visibleSM = _props.visibleSM;
			var visibleMD = _props.visibleMD;
			var visibleLG = _props.visibleLG;
			var windowWidth = this.state.windowWidth;

			var text = undefined;

			// set widths / flex-basis
			if (windowWidth < _constants2['default'].breakpoint.xs) {
				text = visibleXS || hiddenSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _constants2['default'].breakpoint.sm) {
				text = hiddenXS || visibleSM || hiddenMD || hiddenLG;
			} else if (windowWidth < _constants2['default'].breakpoint.md) {
				text = hiddenXS || hiddenSM || visibleMD || hiddenLG;
			} else {
				text = hiddenXS || hiddenSM || hiddenMD || visibleLG;
			}

			var props = (0, _blacklist2['default'])(this.props, {
				'hiddenXS': true,
				'hiddenSM': true,
				'hiddenMD': true,
				'hiddenLG': true,
				'visibleXS': true,
				'visibleSM': true,
				'visibleMD': true,
				'visibleLG': true
			});

			return _react2['default'].createElement(
				'span',
				props,
				text
			);
		}
	});

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _blacklist = __webpack_require__(324);

	var _blacklist2 = _interopRequireDefault(_blacklist);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _constants = __webpack_require__(317);

	var _constants2 = _interopRequireDefault(_constants);

	module.exports = _react2['default'].createClass({
		displayName: 'Row',
		propTypes: {
			children: _react2['default'].PropTypes.node.isRequired,
			className: _react2['default'].PropTypes.string,
			gutter: _react2['default'].PropTypes.number,
			style: _react2['default'].PropTypes.object
		},
		getDefaultProps: function getDefaultProps() {
			return {
				gutter: _constants2['default'].width.gutter
			};
		},
		render: function render() {
			var gutter = this.props.gutter;

			var rowStyle = {
				display: 'flex',
				flexWrap: 'wrap',
				msFlexWrap: 'wrap',
				WebkitFlexWrap: 'wrap',
				marginLeft: gutter / -2,
				marginRight: gutter / -2
			};
			var className = (0, _classnames2['default'])('Row', this.props.className);
			var props = (0, _blacklist2['default'])(this.props, 'className', 'gutter', 'style');

			return _react2['default'].createElement('div', _extends({}, props, { style: _extends(rowStyle, this.props.style), className: className }));
		}
	});

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var React = __webpack_require__(8);
	var blacklist = __webpack_require__(324);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'RadioGroup',
		propTypes: {
			alwaysValidate: React.PropTypes.bool,
			className: React.PropTypes.string,
			inline: React.PropTypes.bool,
			label: React.PropTypes.string,
			onChange: React.PropTypes.func.isRequired,
			options: React.PropTypes.array.isRequired,
			required: React.PropTypes.bool,
			requiredMessage: React.PropTypes.string,
			value: React.PropTypes.string
		},
		getDefaultProps: function getDefaultProps() {
			return {
				requiredMessage: 'This field is required'
			};
		},
		getInitialState: function getInitialState() {
			return {
				isValid: true,
				validationIsActive: this.props.alwaysValidate
			};
		},
		componentDidMount: function componentDidMount() {
			if (this.state.validationIsActive) {
				this.validateInput(this.props.value);
			}
		},
		componentWillReceiveProps: function componentWillReceiveProps(newProps) {
			if (this.state.validationIsActive) {
				if (newProps.value !== this.props.value && newProps.value !== this._lastChangeValue && !newProps.alwaysValidate) {
					// reset validation state if the value was changed outside the component
					return this.setState({
						isValid: true,
						validationIsActive: false
					});
				}
				this.validateInput(newProps.value);
			}
		},
		handleChange: function handleChange(e) {
			this._lastChangeValue = e.target.value;
			if (this.props.onChange) this.props.onChange(e.target.value);
		},
		handleBlur: function handleBlur() {
			if (!this.props.alwaysValidate) {
				this.setState({ validationIsActive: false });
			}
			this.validateInput(this.props.value);
		},
		validateInput: function validateInput(value) {
			var newState = {
				isValid: true
			};
			if (this.props.required && (!value || value && !value.length)) {
				newState.isValid = false;
			}
			if (!newState.isValid) {
				newState.validationIsActive = true;
			}
			this.setState(newState);
		},
		render: function render() {
			var self = this;

			// props
			var props = blacklist(this.props, 'alwaysValidate', 'label', 'onChange', 'options', 'required', 'requiredMessage', 'value');

			// classes
			var componentClass = classNames('FormField', {
				'is-invalid': !this.state.isValid
			}, this.props.className);

			// validation message
			var validationMessage;
			if (!this.state.isValid) {
				validationMessage = React.createElement(
					'div',
					{ className: 'form-validation is-invalid' },
					this.props.requiredMessage
				);
			}

			// dynamic elements
			var componentLabel = this.props.label ? React.createElement(
				'label',
				{ className: 'FormLabel' },
				this.props.label
			) : null;

			// options
			var radios = this.props.options.map(function (radio, i) {
				return React.createElement(
					'label',
					{ key: 'radio-' + i, className: 'Radio' },
					React.createElement('input', { value: radio.value, type: 'radio', onChange: self.handleChange, onBlur: self.handleBlur, name: self.props.name, className: 'Radio__input' }),
					React.createElement(
						'span',
						{ className: 'Radio__label' },
						radio.label
					)
				);
			});
			if (this.props.inline) {
				radios = React.createElement(
					'div',
					{ className: 'inline-controls' },
					radios
				);
			}

			return React.createElement(
				'div',
				_extends({ className: componentClass }, props),
				componentLabel,
				radios,
				validationMessage
			);
		}
	});

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	module.exports = _react2['default'].createClass({
		displayName: 'SegmentedControl',

		propTypes: {
			className: _react2['default'].PropTypes.string,
			equalWidthSegments: _react2['default'].PropTypes.bool,
			onChange: _react2['default'].PropTypes.func.isRequired,
			options: _react2['default'].PropTypes.array.isRequired,
			type: _react2['default'].PropTypes.oneOf(['default', 'muted', 'danger', 'info', 'primary', 'success', 'warning']),
			value: _react2['default'].PropTypes.string
		},

		getDefaultProps: function getDefaultProps() {
			return {
				type: 'default'
			};
		},

		onChange: function onChange(value) {
			this.props.onChange(value);
		},

		render: function render() {
			var _this = this;

			var componentClassName = (0, _classnames2['default'])('SegmentedControl', 'SegmentedControl--' + this.props.type, {
				'SegmentedControl--equal-widths': this.props.equalWidthSegments
			}, this.props.className);

			var options = this.props.options.map(function (op) {

				var buttonClassName = (0, _classnames2['default'])('SegmentedControl__button', {
					'is-selected': op.value === _this.props.value
				});

				return _react2['default'].createElement(
					'span',
					{ key: 'option-' + op.value, className: 'SegmentedControl__item' },
					_react2['default'].createElement(
						'button',
						{ type: 'button', onClick: _this.onChange.bind(_this, op.value), className: buttonClassName },
						op.label
					)
				);
			});

			return _react2['default'].createElement(
				'div',
				{ className: componentClassName },
				options
			);
		}
	});

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(8);
	var classNames = __webpack_require__(323);

	module.exports = React.createClass({
		displayName: 'Spinner',
		propTypes: {
			className: React.PropTypes.string,
			size: React.PropTypes.oneOf(['sm', 'md', 'lg']),
			type: React.PropTypes.oneOf(['default', 'primary', 'inverted'])
		},
		getDefaultProps: function getDefaultProps() {
			return {
				type: 'default',
				size: 'sm'
			};
		},
		render: function render() {
			var componentClass = classNames('Spinner', 'Spinner--' + this.props.type, 'Spinner--' + this.props.size, this.props.className);

			return React.createElement(
				'div',
				{ className: componentClass },
				React.createElement('span', { className: 'Spinner_dot Spinner_dot--first' }),
				React.createElement('span', { className: 'Spinner_dot Spinner_dot--second' }),
				React.createElement('span', { className: 'Spinner_dot Spinner_dot--third' })
			);
		}
	});

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	module.exports = _react2['default'].createClass({
		displayName: 'Table',

		propTypes: {
			children: _react2['default'].PropTypes.any,
			className: _react2['default'].PropTypes.string
		},

		render: function render() {
			// classes
			var className = (0, _classnames2['default'])('Table', this.props.className);

			// render table element
			return _react2['default'].createElement('table', _extends({}, this.props, { className: className }));
		}
	});

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _innerSlider = __webpack_require__(320);

	var _objectAssign = __webpack_require__(357);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _json2mq = __webpack_require__(353);

	var _json2mq2 = _interopRequireDefault(_json2mq);

	var _reactResponsiveMixin = __webpack_require__(354);

	var _reactResponsiveMixin2 = _interopRequireDefault(_reactResponsiveMixin);

	var _defaultProps = __webpack_require__(321);

	var _defaultProps2 = _interopRequireDefault(_defaultProps);

	var Slider = _react2['default'].createClass({
	  displayName: 'Slider',

	  mixins: [_reactResponsiveMixin2['default']],
	  getInitialState: function getInitialState() {
	    return {
	      breakpoint: null
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    if (this.props.responsive) {
	      var breakpoints = this.props.responsive.map(function (breakpt) {
	        return breakpt.breakpoint;
	      });
	      breakpoints.sort(function (x, y) {
	        return x - y;
	      });

	      breakpoints.forEach(function (breakpoint, index) {
	        var bQuery;
	        if (index === 0) {
	          bQuery = (0, _json2mq2['default'])({ minWidth: 0, maxWidth: breakpoint });
	        } else {
	          bQuery = (0, _json2mq2['default'])({ minWidth: breakpoints[index - 1], maxWidth: breakpoint });
	        }
	        _this.media(bQuery, function () {
	          _this.setState({ breakpoint: breakpoint });
	        });
	      });

	      // Register media query for full screen. Need to support resize from small to large
	      var query = (0, _json2mq2['default'])({ minWidth: breakpoints.slice(-1)[0] });

	      this.media(query, function () {
	        _this.setState({ breakpoint: null });
	      });
	    }
	  },
	  render: function render() {
	    var _this2 = this;

	    var settings;
	    var newProps;
	    if (this.state.breakpoint) {
	      newProps = this.props.responsive.filter(function (resp) {
	        return resp.breakpoint === _this2.state.breakpoint;
	      });
	      settings = newProps[0].settings === 'unslick' ? 'unslick' : (0, _objectAssign2['default'])({}, this.props, newProps[0].settings);
	    } else {
	      settings = (0, _objectAssign2['default'])({}, _defaultProps2['default'], this.props);
	    }
	    if (settings === 'unslick') {
	      // if 'unslick' responsive breakpoint setting used, just return the <Slider> tag nested HTML
	      return _react2['default'].createElement(
	        'div',
	        null,
	        this.props.children
	      );
	    } else {
	      return _react2['default'].createElement(
	        _innerSlider.InnerSlider,
	        settings,
	        this.props.children
	      );
	    }
	  }
	});

	module.exports = Slider;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(312);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var EventPluginHub = __webpack_require__(253);

	var warning = __webpack_require__(132);

	var accumulateInto = __webpack_require__(326);
	var forEachAccumulated = __webpack_require__(327);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(176);

	var assign = __webpack_require__(113);
	var getTextContentAccessor = __webpack_require__(328);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(254);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(254);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(293);
	var EventPluginUtils = __webpack_require__(329);
	var ReactErrorUtils = __webpack_require__(330);

	var accumulateInto = __webpack_require__(326);
	var forEachAccumulated = __webpack_require__(327);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(176);

	var assign = __webpack_require__(113);
	var emptyFunction = __webpack_require__(246);
	var warning = __webpack_require__(132);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(282);
	var ViewportMetrics = __webpack_require__(295);

	var getEventModifierState = __webpack_require__(331);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(159);
	var DOMPropertyOperations = __webpack_require__(160);
	var ReactMount = __webpack_require__(105);
	var ReactPerf = __webpack_require__(106);

	var invariant = __webpack_require__(158);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(105);

	var findDOMNode = __webpack_require__(109);
	var focusNode = __webpack_require__(337);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(332);
	var ExecutionEnvironment = __webpack_require__(133);
	var ReactPerf = __webpack_require__(106);

	var camelizeStyleName = __webpack_require__(333);
	var dangerousStyleValue = __webpack_require__(334);
	var hyphenateStyleName = __webpack_require__(335);
	var memoizeStringOnly = __webpack_require__(336);
	var warning = __webpack_require__(132);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(259);
	var LinkedValueUtils = __webpack_require__(338);
	var ReactMount = __webpack_require__(105);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(194);
	var ReactDOMSelect = __webpack_require__(265);

	var assign = __webpack_require__(113);
	var warning = __webpack_require__(132);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(338);
	var ReactMount = __webpack_require__(105);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var warning = __webpack_require__(132);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(338);
	var ReactDOMIDOperations = __webpack_require__(259);
	var ReactUpdates = __webpack_require__(108);

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(270);
	var ReactMultiChildUpdateTypes = __webpack_require__(290);

	var ReactCurrentOwner = __webpack_require__(102);
	var ReactReconciler = __webpack_require__(107);
	var ReactChildReconciler = __webpack_require__(339);

	var flattenChildren = __webpack_require__(340);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(152);
	var ReactEmptyComponentRegistry = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(107);

	var assign = __webpack_require__(113);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(113);
	var invariant = __webpack_require__(158);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(246);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(341);

	var containsNode = __webpack_require__(172);
	var focusNode = __webpack_require__(337);
	var getActiveElement = __webpack_require__(276);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(254);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(282);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(282);

	var getEventCharCode = __webpack_require__(284);
	var getEventKey = __webpack_require__(342);
	var getEventModifierState = __webpack_require__(331);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(258);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(282);

	var getEventModifierState = __webpack_require__(331);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(254);

	var getEventTarget = __webpack_require__(255);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(258);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(113);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(343);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(270);
	var ReactCurrentOwner = __webpack_require__(102);
	var ReactElement = __webpack_require__(152);
	var ReactInstanceMap = __webpack_require__(170);
	var ReactPerf = __webpack_require__(106);
	var ReactPropTypeLocations = __webpack_require__(309);
	var ReactPropTypeLocationNames = __webpack_require__(310);
	var ReactReconciler = __webpack_require__(107);
	var ReactUpdateQueue = __webpack_require__(171);

	var assign = __webpack_require__(113);
	var emptyObject = __webpack_require__(156);
	var invariant = __webpack_require__(158);
	var shouldUpdateReactComponent = __webpack_require__(174);
	var warning = __webpack_require__(132);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var createNodesFromMarkup = __webpack_require__(344);
	var emptyFunction = __webpack_require__(246);
	var getMarkupWrap = __webpack_require__(345);
	var invariant = __webpack_require__(158);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(312);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(161);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(253);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(346);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(347);


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);
	var buildURL = __webpack_require__(348);
	var parseHeaders = __webpack_require__(349);
	var transformData = __webpack_require__(186);
	var isURLSameOrigin = __webpack_require__(350);
	var btoa = window.btoa || __webpack_require__(351);

	module.exports = function xhrAdapter(resolve, reject, config) {
	  var requestData = config.data;
	  var requestHeaders = config.headers;

	  if (utils.isFormData(requestData)) {
	    delete requestHeaders['Content-Type']; // Let the browser set it
	  }

	  var request = new XMLHttpRequest();

	  // For IE 8/9 CORS support
	  // Only supports POST and GET calls and doesn't returns the response headers.
	  if (window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
	    request = new window.XDomainRequest();
	  }

	  // HTTP basic authentication
	  if (config.auth) {
	    var username = config.auth.username || '';
	    var password = config.auth.password || '';
	    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	  }

	  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

	  // Set the request timeout in MS
	  request.timeout = config.timeout;

	  // Listen for ready state
	  request.onload = function handleLoad() {
	    if (!request) {
	      return;
	    }
	    // Prepare the response
	    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	    var responseData = ['text', ''].indexOf(config.responseType || '') !== -1 ? request.responseText : request.response;
	    var response = {
	      data: transformData(
	        responseData,
	        responseHeaders,
	        config.transformResponse
	      ),
	      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
	      status: request.status === 1223 ? 204 : request.status,
	      statusText: request.status === 1223 ? 'No Content' : request.statusText,
	      headers: responseHeaders,
	      config: config
	    };

	    // Resolve or reject the Promise based on the status
	    ((response.status >= 200 && response.status < 300) ||
	     (!('status' in request) && response.responseText) ?
	      resolve :
	      reject)(response);

	    // Clean up request
	    request = null;
	  };

	  // Handle low level network errors
	  request.onerror = function handleError() {
	    // Real errors are hidden from us by the browser
	    // onerror should only fire if it's a network error
	    reject(new Error('Network Error'));

	    // Clean up request
	    request = null;
	  };

	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.
	  if (utils.isStandardBrowserEnv()) {
	    var cookies = __webpack_require__(352);

	    // Add xsrf header
	    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;

	    if (xsrfValue) {
	      requestHeaders[config.xsrfHeaderName] = xsrfValue;
	    }
	  }

	  // Add headers to the request
	  if ('setRequestHeader' in request) {
	    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	        // Remove Content-Type if data is undefined
	        delete requestHeaders[key];
	      } else {
	        // Otherwise add header to the request
	        request.setRequestHeader(key, val);
	      }
	    });
	  }

	  // Add withCredentials to request if needed
	  if (config.withCredentials) {
	    request.withCredentials = true;
	  }

	  // Add responseType to request if needed
	  if (config.responseType) {
	    try {
	      request.responseType = config.responseType;
	    } catch (e) {
	      if (request.responseType !== 'json') {
	        throw e;
	      }
	    }
	  }

	  if (utils.isArrayBuffer(requestData)) {
	    requestData = new DataView(requestData);
	  }

	  // Send the request
	  request.send(requestData);
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	function deprecate(fn, message) {
	  return function () {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}

	exports['default'] = deprecate;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'use strict';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];

	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _invariant = __webpack_require__(193);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(302);

	var _DOMUtils = __webpack_require__(303);

	var _createHistory = __webpack_require__(306);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));

	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen
	  });
	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var _deepEqual = __webpack_require__(368);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _PathUtils = __webpack_require__(300);

	var _AsyncUtils = __webpack_require__(355);

	var _Actions = __webpack_require__(201);

	var _createLocation2 = __webpack_require__(356);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(299);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _deprecate = __webpack_require__(301);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if (typeof action === 'object') {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	      if (typeof location === 'string') location = _PathUtils.parsePath(location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}

	exports['default'] = createHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(102);
	var ReactElement = __webpack_require__(152);
	var ReactInstanceHandles = __webpack_require__(104);

	var getIteratorFn = __webpack_require__(314);
	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	      true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(312);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(132);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	      doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var url = __webpack_require__(358);
	var parser = __webpack_require__(369);
	var Manager = __webpack_require__(359);
	var debug = __webpack_require__(376)('socket.io-client');

	/**
	 * Module exports.
	 */

	module.exports = exports = lookup;

	/**
	 * Managers cache.
	 */

	var cache = exports.managers = {};

	/**
	 * Looks up an existing `Manager` for multiplexing.
	 * If the user summons:
	 *
	 *   `io('http://localhost/a');`
	 *   `io('http://localhost/b');`
	 *
	 * We reuse the existing instance based on same scheme/port/host,
	 * and we initialize sockets for each namespace.
	 *
	 * @api public
	 */

	function lookup(uri, opts) {
	  if (typeof uri == 'object') {
	    opts = uri;
	    uri = undefined;
	  }

	  opts = opts || {};

	  var parsed = url(uri);
	  var source = parsed.source;
	  var id = parsed.id;
	  var path = parsed.path;
	  var sameNamespace = cache[id] && path in cache[id].nsps;
	  var newConnection = opts.forceNew || opts['force new connection'] ||
	                      false === opts.multiplex || sameNamespace;

	  var io;

	  if (newConnection) {
	    debug('ignoring socket cache for %s', source);
	    io = Manager(source, opts);
	  } else {
	    if (!cache[id]) {
	      debug('new io instance for %s', source);
	      cache[id] = Manager(source, opts);
	    }
	    io = cache[id];
	  }

	  return io.socket(parsed.path);
	}

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = parser.protocol;

	/**
	 * `connect`.
	 *
	 * @param {String} uri
	 * @api public
	 */

	exports.connect = lookup;

	/**
	 * Expose constructors for standalone build.
	 *
	 * @api public
	 */

	exports.Manager = __webpack_require__(359);
	exports.Socket = __webpack_require__(360);


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	exports.canUseDOM = canUseDOM;

	// breakpoints
	exports.breakpoint = {
		xs: 480,
		sm: 768,
		md: 992,
		lg: 1200
	};

	// border radii
	exports.borderRadius = {
		xs: 2,
		sm: 4,
		md: 8,
		lg: 16,
		xl: 32
	};

	// color
	exports.color = {
		appDanger: '#d64242',
		appInfo: '#56cdfc',
		appPrimary: '#1385e5',
		appSuccess: '#34c240',
		appWarning: '#fa9f47',
		brandPrimary: '#31adb8'
	};

	// spacing
	exports.spacing = {
		xs: 5,
		sm: 10,
		md: 20,
		lg: 40,
		xl: 80
	};

	// widths
	exports.width = {
		container: 1170,
		gutter: 20
	};

	// fractions (for col widths)

	function perc(n) {
		return n * 100 + '%';
	}

	function denominators(n) {
		for (var d = 2; d <= 20; d++) {
			if (n < d) {
				exports.fractions[n + '/' + d] = perc(n / d);
			}
		}
	}

	exports.fractions = {
		'1': '100%'
	};

	for (var numerator = 1; numerator <= 19; numerator++) {
		denominators(numerator);
	}

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var list = [{ label: 'Alert', value: 'alert', className: 'octicon octicon-alert' }, { label: 'Arrow Down', value: 'arrow-down', className: 'octicon octicon-arrow-down' }, { label: 'Arrow Left', value: 'arrow-left', className: 'octicon octicon-arrow-left' }, { label: 'Arrow Right', value: 'arrow-right', className: 'octicon octicon-arrow-right' }, { label: 'Arrow Small-down', value: 'arrow-small-down', className: 'octicon octicon-arrow-small-down' }, { label: 'Arrow Small-left', value: 'arrow-small-left', className: 'octicon octicon-arrow-small-left' }, { label: 'Arrow Small-right', value: 'arrow-small-right', className: 'octicon octicon-arrow-small-right' }, { label: 'Arrow Small-up', value: 'arrow-small-up', className: 'octicon octicon-arrow-small-up' }, { label: 'Arrow Up', value: 'arrow-up', className: 'octicon octicon-arrow-up' }, { label: 'Microscope', value: 'microscope', className: 'octicon octicon-microscope' }, { label: 'Beaker', value: 'beaker', className: 'octicon octicon-beaker' }, { label: 'Bell', value: 'bell', className: 'octicon octicon-bell' }, { label: 'Book', value: 'book', className: 'octicon octicon-book' }, { label: 'Bookmark', value: 'bookmark', className: 'octicon octicon-bookmark' }, { label: 'Briefcase', value: 'briefcase', className: 'octicon octicon-briefcase' }, { label: 'Broadcast', value: 'broadcast', className: 'octicon octicon-broadcast' }, { label: 'Browser', value: 'browser', className: 'octicon octicon-browser' }, { label: 'Bug', value: 'bug', className: 'octicon octicon-bug' }, { label: 'Calendar', value: 'calendar', className: 'octicon octicon-calendar' }, { label: 'Check', value: 'check', className: 'octicon octicon-check' }, { label: 'Checklist', value: 'checklist', className: 'octicon octicon-checklist' }, { label: 'Chevron Down', value: 'chevron-down', className: 'octicon octicon-chevron-down' }, { label: 'Chevron Left', value: 'chevron-left', className: 'octicon octicon-chevron-left' }, { label: 'Chevron Right', value: 'chevron-right', className: 'octicon octicon-chevron-right' }, { label: 'Chevron Up', value: 'chevron-up', className: 'octicon octicon-chevron-up' }, { label: 'Circle Slash', value: 'circle-slash', className: 'octicon octicon-circle-slash' }, { label: 'Circuit Board', value: 'circuit-board', className: 'octicon octicon-circuit-board' }, { label: 'Clippy', value: 'clippy', className: 'octicon octicon-clippy' }, { label: 'Clock', value: 'clock', className: 'octicon octicon-clock' }, { label: 'Cloud Download', value: 'cloud-download', className: 'octicon octicon-cloud-download' }, { label: 'Cloud Upload', value: 'cloud-upload', className: 'octicon octicon-cloud-upload' }, { label: 'Code', value: 'code', className: 'octicon octicon-code' }, { label: 'Color Mode', value: 'color-mode', className: 'octicon octicon-color-mode' }, { label: 'Comment Add', value: 'comment-add', className: 'octicon octicon-comment-add' }, { label: 'Comment', value: 'comment', className: 'octicon octicon-comment' }, { label: 'Comment Discussion', value: 'comment-discussion', className: 'octicon octicon-comment-discussion' }, { label: 'Credit Card', value: 'credit-card', className: 'octicon octicon-credit-card' }, { label: 'Dash', value: 'dash', className: 'octicon octicon-dash' }, { label: 'Dashboard', value: 'dashboard', className: 'octicon octicon-dashboard' }, { label: 'Database', value: 'database', className: 'octicon octicon-database' }, { label: 'Clone', value: 'clone', className: 'octicon octicon-clone' }, { label: 'Desktop Download', value: 'desktop-download', className: 'octicon octicon-desktop-download' }, { label: 'Device Camera', value: 'device-camera', className: 'octicon octicon-device-camera' }, { label: 'Device Camera-video', value: 'device-camera-video', className: 'octicon octicon-device-camera-video' }, { label: 'Device Desktop', value: 'device-desktop', className: 'octicon octicon-device-desktop' }, { label: 'Device Mobile', value: 'device-mobile', className: 'octicon octicon-device-mobile' }, { label: 'Diff', value: 'diff', className: 'octicon octicon-diff' }, { label: 'Diff Added', value: 'diff-added', className: 'octicon octicon-diff-added' }, { label: 'Diff Ignored', value: 'diff-ignored', className: 'octicon octicon-diff-ignored' }, { label: 'Diff Modified', value: 'diff-modified', className: 'octicon octicon-diff-modified' }, { label: 'Diff Removed', value: 'diff-removed', className: 'octicon octicon-diff-removed' }, { label: 'Diff Renamed', value: 'diff-renamed', className: 'octicon octicon-diff-renamed' }, { label: 'Ellipsis', value: 'ellipsis', className: 'octicon octicon-ellipsis' }, { label: 'Eye Unwatch', value: 'eye-unwatch', className: 'octicon octicon-eye-unwatch' }, { label: 'Eye Watch', value: 'eye-watch', className: 'octicon octicon-eye-watch' }, { label: 'Eye', value: 'eye', className: 'octicon octicon-eye' }, { label: 'File Binary', value: 'file-binary', className: 'octicon octicon-file-binary' }, { label: 'File Code', value: 'file-code', className: 'octicon octicon-file-code' }, { label: 'File Directory', value: 'file-directory', className: 'octicon octicon-file-directory' }, { label: 'File Media', value: 'file-media', className: 'octicon octicon-file-media' }, { label: 'File Pdf', value: 'file-pdf', className: 'octicon octicon-file-pdf' }, { label: 'File Submodule', value: 'file-submodule', className: 'octicon octicon-file-submodule' }, { label: 'File Symlink-directory', value: 'file-symlink-directory', className: 'octicon octicon-file-symlink-directory' }, { label: 'File Symlink-file', value: 'file-symlink-file', className: 'octicon octicon-file-symlink-file' }, { label: 'File Text', value: 'file-text', className: 'octicon octicon-file-text' }, { label: 'File Zip', value: 'file-zip', className: 'octicon octicon-file-zip' }, { label: 'Flame', value: 'flame', className: 'octicon octicon-flame' }, { label: 'Fold', value: 'fold', className: 'octicon octicon-fold' }, { label: 'Gear', value: 'gear', className: 'octicon octicon-gear' }, { label: 'Gift', value: 'gift', className: 'octicon octicon-gift' }, { label: 'Gist', value: 'gist', className: 'octicon octicon-gist' }, { label: 'Gist Secret', value: 'gist-secret', className: 'octicon octicon-gist-secret' }, { label: 'Git Branch-create', value: 'git-branch-create', className: 'octicon octicon-git-branch-create' }, { label: 'Git Branch-delete', value: 'git-branch-delete', className: 'octicon octicon-git-branch-delete' }, { label: 'Git Branch', value: 'git-branch', className: 'octicon octicon-git-branch' }, { label: 'Git Commit', value: 'git-commit', className: 'octicon octicon-git-commit' }, { label: 'Git Compare', value: 'git-compare', className: 'octicon octicon-git-compare' }, { label: 'Git Merge', value: 'git-merge', className: 'octicon octicon-git-merge' }, { label: 'Git Pull-request-abandoned', value: 'git-pull-request-abandoned', className: 'octicon octicon-git-pull-request-abandoned' }, { label: 'Git Pull-request', value: 'git-pull-request', className: 'octicon octicon-git-pull-request' }, { label: 'Globe', value: 'globe', className: 'octicon octicon-globe' }, { label: 'Graph', value: 'graph', className: 'octicon octicon-graph' }, { label: 'Heart', value: 'heart', className: 'octicon octicon-heart' }, { label: 'History', value: 'history', className: 'octicon octicon-history' }, { label: 'Home', value: 'home', className: 'octicon octicon-home' }, { label: 'Horizontal Rule', value: 'horizontal-rule', className: 'octicon octicon-horizontal-rule' }, { label: 'Hubot', value: 'hubot', className: 'octicon octicon-hubot' }, { label: 'Inbox', value: 'inbox', className: 'octicon octicon-inbox' }, { label: 'Info', value: 'info', className: 'octicon octicon-info' }, { label: 'Issue Closed', value: 'issue-closed', className: 'octicon octicon-issue-closed' }, { label: 'Issue Opened', value: 'issue-opened', className: 'octicon octicon-issue-opened' }, { label: 'Issue Reopened', value: 'issue-reopened', className: 'octicon octicon-issue-reopened' }, { label: 'Jersey', value: 'jersey', className: 'octicon octicon-jersey' }, { label: 'Key', value: 'key', className: 'octicon octicon-key' }, { label: 'Keyboard', value: 'keyboard', className: 'octicon octicon-keyboard' }, { label: 'Law', value: 'law', className: 'octicon octicon-law' }, { label: 'Light Bulb', value: 'light-bulb', className: 'octicon octicon-light-bulb' }, { label: 'Link', value: 'link', className: 'octicon octicon-link' }, { label: 'Link External', value: 'link-external', className: 'octicon octicon-link-external' }, { label: 'List Ordered', value: 'list-ordered', className: 'octicon octicon-list-ordered' }, { label: 'List Unordered', value: 'list-unordered', className: 'octicon octicon-list-unordered' }, { label: 'Location', value: 'location', className: 'octicon octicon-location' }, { label: 'Gist Private', value: 'gist-private', className: 'octicon octicon-gist-private' }, { label: 'Mirror Private', value: 'mirror-private', className: 'octicon octicon-mirror-private' }, { label: 'Git Fork-private', value: 'git-fork-private', className: 'octicon octicon-git-fork-private' }, { label: 'Lock', value: 'lock', className: 'octicon octicon-lock' }, { label: 'Logo Github', value: 'logo-github', className: 'octicon octicon-logo-github' }, { label: 'Mail', value: 'mail', className: 'octicon octicon-mail' }, { label: 'Mail Read', value: 'mail-read', className: 'octicon octicon-mail-read' }, { label: 'Mail Reply', value: 'mail-reply', className: 'octicon octicon-mail-reply' }, { label: 'Mark Github', value: 'mark-github', className: 'octicon octicon-mark-github' }, { label: 'Markdown', value: 'markdown', className: 'octicon octicon-markdown' }, { label: 'Megaphone', value: 'megaphone', className: 'octicon octicon-megaphone' }, { label: 'Mention', value: 'mention', className: 'octicon octicon-mention' }, { label: 'Milestone', value: 'milestone', className: 'octicon octicon-milestone' }, { label: 'Mirror Public', value: 'mirror-public', className: 'octicon octicon-mirror-public' }, { label: 'Mirror', value: 'mirror', className: 'octicon octicon-mirror' }, { label: 'Mortar Board', value: 'mortar-board', className: 'octicon octicon-mortar-board' }, { label: 'Mute', value: 'mute', className: 'octicon octicon-mute' }, { label: 'No Newline', value: 'no-newline', className: 'octicon octicon-no-newline' }, { label: 'Octoface', value: 'octoface', className: 'octicon octicon-octoface' }, { label: 'Organization', value: 'organization', className: 'octicon octicon-organization' }, { label: 'Package', value: 'package', className: 'octicon octicon-package' }, { label: 'Paintcan', value: 'paintcan', className: 'octicon octicon-paintcan' }, { label: 'Pencil', value: 'pencil', className: 'octicon octicon-pencil' }, { label: 'Person Add', value: 'person-add', className: 'octicon octicon-person-add' }, { label: 'Person Follow', value: 'person-follow', className: 'octicon octicon-person-follow' }, { label: 'Person', value: 'person', className: 'octicon octicon-person' }, { label: 'Pin', value: 'pin', className: 'octicon octicon-pin' }, { label: 'Plug', value: 'plug', className: 'octicon octicon-plug' }, { label: 'Repo Create', value: 'repo-create', className: 'octicon octicon-repo-create' }, { label: 'Gist New', value: 'gist-new', className: 'octicon octicon-gist-new' }, { label: 'File Directory-create', value: 'file-directory-create', className: 'octicon octicon-file-directory-create' }, { label: 'File Add', value: 'file-add', className: 'octicon octicon-file-add' }, { label: 'Plus', value: 'plus', className: 'octicon octicon-plus' }, { label: 'Primitive Dot', value: 'primitive-dot', className: 'octicon octicon-primitive-dot' }, { label: 'Primitive Square', value: 'primitive-square', className: 'octicon octicon-primitive-square' }, { label: 'Pulse', value: 'pulse', className: 'octicon octicon-pulse' }, { label: 'Question', value: 'question', className: 'octicon octicon-question' }, { label: 'Quote', value: 'quote', className: 'octicon octicon-quote' }, { label: 'Radio Tower', value: 'radio-tower', className: 'octicon octicon-radio-tower' }, { label: 'Repo Delete', value: 'repo-delete', className: 'octicon octicon-repo-delete' }, { label: 'Repo', value: 'repo', className: 'octicon octicon-repo' }, { label: 'Repo Clone', value: 'repo-clone', className: 'octicon octicon-repo-clone' }, { label: 'Repo Force-push', value: 'repo-force-push', className: 'octicon octicon-repo-force-push' }, { label: 'Gist Fork', value: 'gist-fork', className: 'octicon octicon-gist-fork' }, { label: 'Repo Forked', value: 'repo-forked', className: 'octicon octicon-repo-forked' }, { label: 'Repo Pull', value: 'repo-pull', className: 'octicon octicon-repo-pull' }, { label: 'Repo Push', value: 'repo-push', className: 'octicon octicon-repo-push' }, { label: 'Rocket', value: 'rocket', className: 'octicon octicon-rocket' }, { label: 'Rss', value: 'rss', className: 'octicon octicon-rss' }, { label: 'Ruby', value: 'ruby', className: 'octicon octicon-ruby' }, { label: 'Screen Full', value: 'screen-full', className: 'octicon octicon-screen-full' }, { label: 'Screen Normal', value: 'screen-normal', className: 'octicon octicon-screen-normal' }, { label: 'Search Save', value: 'search-save', className: 'octicon octicon-search-save' }, { label: 'Search', value: 'search', className: 'octicon octicon-search' }, { label: 'Server', value: 'server', className: 'octicon octicon-server' }, { label: 'Settings', value: 'settings', className: 'octicon octicon-settings' }, { label: 'Shield', value: 'shield', className: 'octicon octicon-shield' }, { label: 'Log In', value: 'log-in', className: 'octicon octicon-log-in' }, { label: 'Sign In', value: 'sign-in', className: 'octicon octicon-sign-in' }, { label: 'Log Out', value: 'log-out', className: 'octicon octicon-log-out' }, { label: 'Sign Out', value: 'sign-out', className: 'octicon octicon-sign-out' }, { label: 'Squirrel', value: 'squirrel', className: 'octicon octicon-squirrel' }, { label: 'Star Add', value: 'star-add', className: 'octicon octicon-star-add' }, { label: 'Star Delete', value: 'star-delete', className: 'octicon octicon-star-delete' }, { label: 'Star', value: 'star', className: 'octicon octicon-star' }, { label: 'Stop', value: 'stop', className: 'octicon octicon-stop' }, { label: 'Repo Sync', value: 'repo-sync', className: 'octicon octicon-repo-sync' }, { label: 'Sync', value: 'sync', className: 'octicon octicon-sync' }, { label: 'Tag Remove', value: 'tag-remove', className: 'octicon octicon-tag-remove' }, { label: 'Tag Add', value: 'tag-add', className: 'octicon octicon-tag-add' }, { label: 'Tag', value: 'tag', className: 'octicon octicon-tag' }, { label: 'Telescope', value: 'telescope', className: 'octicon octicon-telescope' }, { label: 'Terminal', value: 'terminal', className: 'octicon octicon-terminal' }, { label: 'Three Bars', value: 'three-bars', className: 'octicon octicon-three-bars' }, { label: 'Thumbsdown', value: 'thumbsdown', className: 'octicon octicon-thumbsdown' }, { label: 'Thumbsup', value: 'thumbsup', className: 'octicon octicon-thumbsup' }, { label: 'Tools', value: 'tools', className: 'octicon octicon-tools' }, { label: 'Trashcan', value: 'trashcan', className: 'octicon octicon-trashcan' }, { label: 'Triangle Down', value: 'triangle-down', className: 'octicon octicon-triangle-down' }, { label: 'Triangle Left', value: 'triangle-left', className: 'octicon octicon-triangle-left' }, { label: 'Triangle Right', value: 'triangle-right', className: 'octicon octicon-triangle-right' }, { label: 'Triangle Up', value: 'triangle-up', className: 'octicon octicon-triangle-up' }, { label: 'Unfold', value: 'unfold', className: 'octicon octicon-unfold' }, { label: 'Unmute', value: 'unmute', className: 'octicon octicon-unmute' }, { label: 'Versions', value: 'versions', className: 'octicon octicon-versions' }, { label: 'Watch', value: 'watch', className: 'octicon octicon-watch' }, { label: 'Remove Close', value: 'remove-close', className: 'octicon octicon-remove-close' }, { label: 'X', value: 'x', className: 'octicon octicon-x' }, { label: 'Zap', value: 'zap', className: 'octicon octicon-zap' }];

	var map = {};
	list.forEach(function (icon) {
		map[icon.value] = icon;
	});
	function pluck(arr, key) {
		return arr.map(function (obj) {
			return obj[key];
		});
	}

	module.exports = {
		list: list,
		keys: pluck(list, 'value'),
		map: map
	};

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
		selectArrows: __webpack_require__(361)
	};

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _mixinsEventHandlers = __webpack_require__(362);

	var _mixinsEventHandlers2 = _interopRequireDefault(_mixinsEventHandlers);

	var _mixinsHelpers = __webpack_require__(363);

	var _mixinsHelpers2 = _interopRequireDefault(_mixinsHelpers);

	var _initialState = __webpack_require__(364);

	var _initialState2 = _interopRequireDefault(_initialState);

	var _defaultProps = __webpack_require__(321);

	var _defaultProps2 = _interopRequireDefault(_defaultProps);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _track = __webpack_require__(365);

	var _dots = __webpack_require__(366);

	var _arrows = __webpack_require__(367);

	var InnerSlider = _react2['default'].createClass({
	  displayName: 'InnerSlider',

	  mixins: [_mixinsHelpers2['default'], _mixinsEventHandlers2['default']],
	  getInitialState: function getInitialState() {
	    return _initialState2['default'];
	  },
	  getDefaultProps: function getDefaultProps() {
	    return _defaultProps2['default'];
	  },
	  componentWillMount: function componentWillMount() {
	    if (this.props.init) {
	      this.props.init();
	    }
	    this.setState({
	      mounted: true
	    });
	    var lazyLoadedList = [];
	    for (var i = 0; i < _react2['default'].Children.count(this.props.children); i++) {
	      if (i >= this.state.currentSlide && i < this.state.currentSlide + this.props.slidesToShow) {
	        lazyLoadedList.push(i);
	      }
	    }

	    if (this.props.lazyLoad && this.state.lazyLoadedList.length === 0) {
	      this.setState({
	        lazyLoadedList: lazyLoadedList
	      });
	    }
	  },
	  componentDidMount: function componentDidMount() {
	    // Hack for autoplay -- Inspect Later
	    this.initialize(this.props);
	    this.adaptHeight();
	    if (window.addEventListener) {
	      window.addEventListener('resize', this.onWindowResized);
	    } else {
	      window.attachEvent('onresize', this.onWindowResized);
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (window.addEventListener) {
	      window.removeEventListener('resize', this.onWindowResized);
	    } else {
	      window.detachEvent('onresize', this.onWindowResized);
	    }
	    if (this.state.autoPlayTimer) {
	      window.clearInterval(this.state.autoPlayTimer);
	    }
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.slickGoTo != nextProps.slickGoTo) {
	      this.changeSlide({
	        message: 'index',
	        index: nextProps.slickGoTo,
	        currentSlide: this.state.currentSlide
	      });
	    } else {
	      this.update(nextProps);
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    this.adaptHeight();
	  },
	  onWindowResized: function onWindowResized() {
	    this.update(this.props);
	  },
	  render: function render() {
	    var className = (0, _classnames2['default'])('slick-initialized', 'slick-slider', this.props.className);

	    var trackProps = {
	      fade: this.props.fade,
	      cssEase: this.props.cssEase,
	      speed: this.props.speed,
	      infinite: this.props.infinite,
	      centerMode: this.props.centerMode,
	      currentSlide: this.state.currentSlide,
	      lazyLoad: this.props.lazyLoad,
	      lazyLoadedList: this.state.lazyLoadedList,
	      rtl: this.props.rtl,
	      slideWidth: this.state.slideWidth,
	      slidesToShow: this.props.slidesToShow,
	      slideCount: this.state.slideCount,
	      trackStyle: this.state.trackStyle,
	      variableWidth: this.props.variableWidth
	    };

	    var dots;

	    if (this.props.dots === true && this.state.slideCount > this.props.slidesToShow) {
	      var dotProps = {
	        dotsClass: this.props.dotsClass,
	        slideCount: this.state.slideCount,
	        slidesToShow: this.props.slidesToShow,
	        currentSlide: this.state.currentSlide,
	        slidesToScroll: this.props.slidesToScroll,
	        clickHandler: this.changeSlide
	      };

	      dots = _react2['default'].createElement(_dots.Dots, dotProps);
	    }

	    var prevArrow, nextArrow;

	    var arrowProps = {
	      infinite: this.props.infinite,
	      centerMode: this.props.centerMode,
	      currentSlide: this.state.currentSlide,
	      slideCount: this.state.slideCount,
	      slidesToShow: this.props.slidesToShow,
	      prevArrow: this.props.prevArrow,
	      nextArrow: this.props.nextArrow,
	      clickHandler: this.changeSlide
	    };

	    if (this.props.arrows) {
	      prevArrow = _react2['default'].createElement(_arrows.PrevArrow, arrowProps);
	      nextArrow = _react2['default'].createElement(_arrows.NextArrow, arrowProps);
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: className, onMouseEnter: this.onInnerSliderEnter, onMouseLeave: this.onInnerSliderLeave },
	      _react2['default'].createElement(
	        'div',
	        {
	          ref: 'list',
	          className: 'slick-list',
	          onMouseDown: this.swipeStart,
	          onMouseMove: this.state.dragging ? this.swipeMove : null,
	          onMouseUp: this.swipeEnd,
	          onMouseLeave: this.state.dragging ? this.swipeEnd : null,
	          onTouchStart: this.swipeStart,
	          onTouchMove: this.state.dragging ? this.swipeMove : null,
	          onTouchEnd: this.swipeEnd,
	          onTouchCancel: this.state.dragging ? this.swipeEnd : null },
	        _react2['default'].createElement(
	          _track.Track,
	          _extends({ ref: 'track' }, trackProps),
	          this.props.children
	        )
	      ),
	      prevArrow,
	      nextArrow,
	      dots
	    );
	  }
	});
	exports.InnerSlider = InnerSlider;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var defaultProps = {
	    className: '',
	    // accessibility: true,
	    adaptiveHeight: false,
	    arrows: true,
	    autoplay: false,
	    autoplaySpeed: 3000,
	    centerMode: false,
	    centerPadding: '50px',
	    cssEase: 'ease',
	    dots: false,
	    dotsClass: 'slick-dots',
	    draggable: true,
	    easing: 'linear',
	    edgeFriction: 0.35,
	    fade: false,
	    focusOnSelect: false,
	    infinite: true,
	    initialSlide: 0,
	    lazyLoad: false,
	    pauseOnHover: false,
	    responsive: null,
	    rtl: false,
	    slide: 'div',
	    slidesToShow: 1,
	    slidesToScroll: 1,
	    speed: 500,
	    swipe: true,
	    swipeToSlide: false,
	    touchMove: true,
	    touchThreshold: 5,
	    useCSS: true,
	    variableWidth: false,
	    vertical: false,
	    waitForAnimate: true,
	    afterChange: null,
	    beforeChange: null,
	    edgeEvent: null,
	    init: null,
	    swipeEvent: null,
	    // nextArrow, prevArrow are react componets
	    nextArrow: null,
	    prevArrow: null
	};

	module.exports = defaultProps;

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(375);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function blacklist (src) {
	  var copy = {}, filter = arguments[1]

	  if (typeof filter === 'string') {
	    filter = {}
	    for (var i = 1; i < arguments.length; i++) {
	      filter[arguments[i]] = true
	    }
	  }

	  for (var key in src) {
	    // blacklist?
	    if (filter[key]) continue

	    copy[key] = src[key]
	  }

	  return copy
	}


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(370);

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(247);
	var ReactErrorUtils = __webpack_require__(330);

	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(372);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(332);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(371);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(199);
	var ReactPropTypeLocations = __webpack_require__(309);

	var invariant = __webpack_require__(158);
	var warning = __webpack_require__(132);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(107);

	var instantiateReactComponent = __webpack_require__(157);
	var shouldUpdateReactComponent = __webpack_require__(174);
	var traverseAllChildren = __webpack_require__(308);
	var warning = __webpack_require__(132);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(308);
	var warning = __webpack_require__(132);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var getNodeForCharacterOffset = __webpack_require__(373);
	var getTextContentAccessor = __webpack_require__(328);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(284);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var createArrayFromMixed = __webpack_require__(374);
	var getMarkupWrap = __webpack_require__(345);
	var invariant = __webpack_require__(158);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	var invariant = __webpack_require__(158);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * 
	 * @preventMunge
	 */

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var invariant = __webpack_require__(400);

	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *         case 'city-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	var Dispatcher = (function () {
	  function Dispatcher() {
	    _classCallCheck(this, Dispatcher);

	    this._callbacks = {};
	    this._isDispatching = false;
	    this._isHandled = {};
	    this._isPending = {};
	    this._lastID = 1;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   */

	  Dispatcher.prototype.register = function register(callback) {
	    var id = _prefix + this._lastID++;
	    this._callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   */

	  Dispatcher.prototype.unregister = function unregister(id) {
	    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	    delete this._callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   */

	  Dispatcher.prototype.waitFor = function waitFor(ids) {
	    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this._isPending[id]) {
	        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
	        continue;
	      }
	      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	      this._invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   */

	  Dispatcher.prototype.dispatch = function dispatch(payload) {
	    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
	    this._startDispatching(payload);
	    try {
	      for (var id in this._callbacks) {
	        if (this._isPending[id]) {
	          continue;
	        }
	        this._invokeCallback(id);
	      }
	    } finally {
	      this._stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   */

	  Dispatcher.prototype.isDispatching = function isDispatching() {
	    return this._isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
	    this._isPending[id] = true;
	    this._callbacks[id](this._pendingPayload);
	    this._isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
	    for (var id in this._callbacks) {
	      this._isPending[id] = false;
	      this._isHandled[id] = false;
	    }
	    this._pendingPayload = payload;
	    this._isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
	    delete this._pendingPayload;
	    this._isDispatching = false;
	  };

	  return Dispatcher;
	})();

	module.exports = Dispatcher;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else {
	    var parts = [];

	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      }

	      if (!utils.isArray(val)) {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });

	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};



/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) { return parsed; }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    var msie = /(msie|trident)/i.test(navigator.userAgent);
	    var urlParsingNode = document.createElement('a');
	    var originURL;

	    /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      var href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	                  urlParsingNode.pathname :
	                  '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })()
	);


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	function InvalidCharacterError(message) {
	  this.message = message;
	}
	InvalidCharacterError.prototype = new Error;
	InvalidCharacterError.prototype.code = 5;
	InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	function btoa(input) {
	  var str = String(input);
	  var output = '';
	  for (
	    // initialize result and counter
	    var block, charCode, idx = 0, map = chars;
	    // if the next str index does not exist:
	    //   change the mapping table to "="
	    //   check if d has no fractional digits
	    str.charAt(idx | 0) || (map = '=', idx % 1);
	    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	  ) {
	    charCode = str.charCodeAt(idx += 3 / 4);
	    if (charCode > 0xFF) {
	      throw new InvalidCharacterError('INVALID_CHARACTER_ERR: DOM Exception 5');
	    }
	    block = block << 8 | charCode;
	  }
	  return output;
	}

	module.exports = btoa;


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var utils = __webpack_require__(180);

	module.exports = (
	  utils.isStandardBrowserEnv() ?

	  // Standard browser envs support document.cookie
	  (function standardBrowserEnv() {
	    return {
	      write: function write(name, value, expires, path, domain, secure) {
	        var cookie = [];
	        cookie.push(name + '=' + encodeURIComponent(value));

	        if (utils.isNumber(expires)) {
	          cookie.push('expires=' + new Date(expires).toGMTString());
	        }

	        if (utils.isString(path)) {
	          cookie.push('path=' + path);
	        }

	        if (utils.isString(domain)) {
	          cookie.push('domain=' + domain);
	        }

	        if (secure === true) {
	          cookie.push('secure');
	        }

	        document.cookie = cookie.join('; ');
	      },

	      read: function read(name) {
	        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	        return (match ? decodeURIComponent(match[3]) : null);
	      },

	      remove: function remove(name) {
	        this.write(name, '', Date.now() - 86400000);
	      }
	    };
	  })() :

	  // Non standard browser env (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return {
	      write: function write() {},
	      read: function read() { return null; },
	      remove: function remove() {}
	    };
	  })()
	);


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var camel2hyphen = __webpack_require__(382);

	var isDimension = function (feature) {
	  var re = /[height|width]$/;
	  return re.test(feature);
	};

	var obj2mq = function (obj) {
	  var mq = '';
	  var features = Object.keys(obj);
	  features.forEach(function (feature, index) {
	    var value = obj[feature];
	    feature = camel2hyphen(feature);
	    // Add px to dimension features
	    if (isDimension(feature) && typeof value === 'number') {
	      value = value + 'px';
	    }
	    if (value === true) {
	      mq += feature;
	    } else if (value === false) {
	      mq += 'not ' + feature;
	    } else {
	      mq += '(' + feature + ': ' + value + ')';
	    }
	    if (index < features.length-1) {
	      mq += ' and '
	    }
	  });
	  return mq;
	};

	var json2mq = function (query) {
	  var mq = '';
	  if (typeof query === 'string') {
	    return query;
	  }
	  // Handling array of media queries
	  if (query instanceof Array) {
	    query.forEach(function (q, index) {
	      mq += obj2mq(q);
	      if (index < query.length-1) {
	        mq += ', '
	      }
	    });
	    return mq;
	  }
	  // Handling single media query
	  return obj2mq(query);
	};

	module.exports = json2mq;

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var canUseDOM = __webpack_require__(378);
	var enquire = canUseDOM && __webpack_require__(399);
	var json2mq = __webpack_require__(353);

	var ResponsiveMixin = {
	  media: function (query, handler) {
	    query = json2mq(query);
	    if (typeof handler === 'function') {
	      handler = {
	        match: handler
	      };
	    }
	    enquire.register(query, handler);

	    // Queue the handlers to unregister them at unmount  
	    if (! this._responsiveMediaHandlers) {
	      this._responsiveMediaHandlers = [];
	    }
	    this._responsiveMediaHandlers.push({query: query, handler: handler});
	  },
	  componentWillUnmount: function () {
	    if (this._responsiveMediaHandlers) {
	      this._responsiveMediaHandlers.forEach(function(obj) {
	        enquire.unregister(obj.query, obj.handler);
	      });
	    }
	  }
	};

	module.exports = ResponsiveMixin;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;

	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }

	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) {
	      return;
	    }

	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }

	    sync = true;

	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }

	    sync = false;

	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }

	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }

	  next();
	}

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _warning = __webpack_require__(307);

	var _warning2 = _interopRequireDefault(_warning);

	var _Actions = __webpack_require__(201);

	var _PathUtils = __webpack_require__(300);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _PathUtils.parsePath(location);

	  if (typeof action === 'object') {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}

	exports['default'] = createLocation;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module dependencies.
	 */

	var parseuri = __webpack_require__(385);
	var debug = __webpack_require__(376)('socket.io-client:url');

	/**
	 * Module exports.
	 */

	module.exports = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url(uri, loc){
	  var obj = uri;

	  // default to window.location
	  var loc = loc || global.location;
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' == typeof uri) {
	    if ('/' == uri.charAt(0)) {
	      if ('/' == uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug('protocol-less url %s', uri);
	      if ('undefined' != typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug('parse %s', uri);
	    obj = parseuri(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    }
	    else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

	  return obj;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var eio = __webpack_require__(387);
	var Socket = __webpack_require__(360);
	var Emitter = __webpack_require__(386);
	var parser = __webpack_require__(369);
	var on = __webpack_require__(377);
	var bind = __webpack_require__(388);
	var debug = __webpack_require__(376)('socket.io-client:manager');
	var indexOf = __webpack_require__(389);
	var Backoff = __webpack_require__(390);

	/**
	 * IE6+ hasOwnProperty
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	module.exports = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager(uri, opts){
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' == typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  this.encoder = new parser.Encoder();
	  this.decoder = new parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function() {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function(){
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.engine.id;
	    }
	  }
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function(v){
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function(v){
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function(v){
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function(v){
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function(v){
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function(v){
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function() {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};


	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function(fn){
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function() {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function(data){
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function(){
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function(){
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function(){
	  this.lastPing = new Date;
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function(){
	  this.emitAll('pong', new Date - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function(data){
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function(packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function(err){
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function(nsp){
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function(){
	      socket.id = self.engine.id;
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting evnet is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting() {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function(socket){
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function(packet){
	  debug('writing packet %j', packet);
	  var self = this;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function(encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function() {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function(){
	  debug('cleanup');

	  var sub;
	  while (sub = this.subs.shift()) sub.destroy();

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function(){
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' == this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function(reason){
	  debug('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function(){
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function(){
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function(err){
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function(){
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function(){
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(369);
	var Emitter = __webpack_require__(386);
	var toArray = __webpack_require__(391);
	var on = __webpack_require__(377);
	var bind = __webpack_require__(388);
	var debug = __webpack_require__(376)('socket.io-client:socket');
	var hasBin = __webpack_require__(392);

	/**
	 * Module exports.
	 */

	module.exports = exports = Socket;

	/**
	 * Internal events (blacklisted).
	 * These events can't be emitted by the user.
	 *
	 * @api private
	 */

	var events = {
	  connect: 1,
	  connect_error: 1,
	  connect_timeout: 1,
	  connecting: 1,
	  disconnect: 1,
	  error: 1,
	  reconnect: 1,
	  reconnect_attempt: 1,
	  reconnect_failed: 1,
	  reconnect_error: 1,
	  reconnecting: 1,
	  ping: 1,
	  pong: 1
	};

	/**
	 * Shortcut to `Emitter#emit`.
	 */

	var emit = Emitter.prototype.emit;

	/**
	 * `Socket` constructor.
	 *
	 * @api public
	 */

	function Socket(io, nsp){
	  this.io = io;
	  this.nsp = nsp;
	  this.json = this; // compat
	  this.ids = 0;
	  this.acks = {};
	  this.receiveBuffer = [];
	  this.sendBuffer = [];
	  this.connected = false;
	  this.disconnected = true;
	  if (this.io.autoConnect) this.open();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Subscribe to open, close and packet events
	 *
	 * @api private
	 */

	Socket.prototype.subEvents = function() {
	  if (this.subs) return;

	  var io = this.io;
	  this.subs = [
	    on(io, 'open', bind(this, 'onopen')),
	    on(io, 'packet', bind(this, 'onpacket')),
	    on(io, 'close', bind(this, 'onclose'))
	  ];
	};

	/**
	 * "Opens" the socket.
	 *
	 * @api public
	 */

	Socket.prototype.open =
	Socket.prototype.connect = function(){
	  if (this.connected) return this;

	  this.subEvents();
	  this.io.open(); // ensure open
	  if ('open' == this.io.readyState) this.onopen();
	  this.emit('connecting');
	  return this;
	};

	/**
	 * Sends a `message` event.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.send = function(){
	  var args = toArray(arguments);
	  args.unshift('message');
	  this.emit.apply(this, args);
	  return this;
	};

	/**
	 * Override `emit`.
	 * If the event is in `events`, it's emitted normally.
	 *
	 * @param {String} event name
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.emit = function(ev){
	  if (events.hasOwnProperty(ev)) {
	    emit.apply(this, arguments);
	    return this;
	  }

	  var args = toArray(arguments);
	  var parserType = parser.EVENT; // default
	  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
	  var packet = { type: parserType, data: args };

	  packet.options = {};
	  packet.options.compress = !this.flags || false !== this.flags.compress;

	  // event ack callback
	  if ('function' == typeof args[args.length - 1]) {
	    debug('emitting packet with ack id %d', this.ids);
	    this.acks[this.ids] = args.pop();
	    packet.id = this.ids++;
	  }

	  if (this.connected) {
	    this.packet(packet);
	  } else {
	    this.sendBuffer.push(packet);
	  }

	  delete this.flags;

	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.packet = function(packet){
	  packet.nsp = this.nsp;
	  this.io.packet(packet);
	};

	/**
	 * Called upon engine `open`.
	 *
	 * @api private
	 */

	Socket.prototype.onopen = function(){
	  debug('transport is open - connecting');

	  // write connect packet if necessary
	  if ('/' != this.nsp) {
	    this.packet({ type: parser.CONNECT });
	  }
	};

	/**
	 * Called upon engine `close`.
	 *
	 * @param {String} reason
	 * @api private
	 */

	Socket.prototype.onclose = function(reason){
	  debug('close (%s)', reason);
	  this.connected = false;
	  this.disconnected = true;
	  delete this.id;
	  this.emit('disconnect', reason);
	};

	/**
	 * Called with socket packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onpacket = function(packet){
	  if (packet.nsp != this.nsp) return;

	  switch (packet.type) {
	    case parser.CONNECT:
	      this.onconnect();
	      break;

	    case parser.EVENT:
	      this.onevent(packet);
	      break;

	    case parser.BINARY_EVENT:
	      this.onevent(packet);
	      break;

	    case parser.ACK:
	      this.onack(packet);
	      break;

	    case parser.BINARY_ACK:
	      this.onack(packet);
	      break;

	    case parser.DISCONNECT:
	      this.ondisconnect();
	      break;

	    case parser.ERROR:
	      this.emit('error', packet.data);
	      break;
	  }
	};

	/**
	 * Called upon a server event.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onevent = function(packet){
	  var args = packet.data || [];
	  debug('emitting event %j', args);

	  if (null != packet.id) {
	    debug('attaching ack callback to event');
	    args.push(this.ack(packet.id));
	  }

	  if (this.connected) {
	    emit.apply(this, args);
	  } else {
	    this.receiveBuffer.push(args);
	  }
	};

	/**
	 * Produces an ack callback to emit with an event.
	 *
	 * @api private
	 */

	Socket.prototype.ack = function(id){
	  var self = this;
	  var sent = false;
	  return function(){
	    // prevent double callbacks
	    if (sent) return;
	    sent = true;
	    var args = toArray(arguments);
	    debug('sending ack %j', args);

	    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
	    self.packet({
	      type: type,
	      id: id,
	      data: args
	    });
	  };
	};

	/**
	 * Called upon a server acknowlegement.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Socket.prototype.onack = function(packet){
	  var ack = this.acks[packet.id];
	  if ('function' == typeof ack) {
	    debug('calling ack %s with %j', packet.id, packet.data);
	    ack.apply(this, packet.data);
	    delete this.acks[packet.id];
	  } else {
	    debug('bad ack %s', packet.id);
	  }
	};

	/**
	 * Called upon server connect.
	 *
	 * @api private
	 */

	Socket.prototype.onconnect = function(){
	  this.connected = true;
	  this.disconnected = false;
	  this.emit('connect');
	  this.emitBuffered();
	};

	/**
	 * Emit buffered events (received and emitted).
	 *
	 * @api private
	 */

	Socket.prototype.emitBuffered = function(){
	  var i;
	  for (i = 0; i < this.receiveBuffer.length; i++) {
	    emit.apply(this, this.receiveBuffer[i]);
	  }
	  this.receiveBuffer = [];

	  for (i = 0; i < this.sendBuffer.length; i++) {
	    this.packet(this.sendBuffer[i]);
	  }
	  this.sendBuffer = [];
	};

	/**
	 * Called upon server disconnect.
	 *
	 * @api private
	 */

	Socket.prototype.ondisconnect = function(){
	  debug('server disconnect (%s)', this.nsp);
	  this.destroy();
	  this.onclose('io server disconnect');
	};

	/**
	 * Called upon forced client/server side disconnections,
	 * this method ensures the manager stops tracking us and
	 * that reconnections don't get triggered for this.
	 *
	 * @api private.
	 */

	Socket.prototype.destroy = function(){
	  if (this.subs) {
	    // clean subscriptions to avoid reconnections
	    for (var i = 0; i < this.subs.length; i++) {
	      this.subs[i].destroy();
	    }
	    this.subs = null;
	  }

	  this.io.destroy(this);
	};

	/**
	 * Disconnects the socket manually.
	 *
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.close =
	Socket.prototype.disconnect = function(){
	  if (this.connected) {
	    debug('performing disconnect (%s)', this.nsp);
	    this.packet({ type: parser.DISCONNECT });
	  }

	  // remove socket from pool
	  this.destroy();

	  if (this.connected) {
	    // fire events
	    this.onclose('io client disconnect');
	  }
	  return this;
	};

	/**
	 * Sets the compress flag.
	 *
	 * @param {Boolean} if `true`, compresses the sending data
	 * @return {Socket} self
	 * @api public
	 */

	Socket.prototype.compress = function(compress){
	  this.flags = this.flags || {};
	  this.flags.compress = compress;
	  return this;
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' + '<svg width="7px" height="11px" viewBox="0 0 7 11" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + '<path d="M3.5,0 L7,4 L0,4 L3.5,0 Z M3.5,11 L7,7 L0,7 L3.5,11 Z" />' + '</svg>';

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _trackHelper = __webpack_require__(379);

	var _helpers = __webpack_require__(363);

	var _helpers2 = _interopRequireDefault(_helpers);

	var _objectAssign = __webpack_require__(357);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var EventHandlers = {
	  // Event handler for previous and next
	  changeSlide: function changeSlide(options) {
	    var indexOffset, previousInt, slideOffset, unevenOffset, targetSlide;
	    unevenOffset = this.state.slideCount % this.props.slidesToScroll !== 0;
	    indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;

	    if (options.message === 'previous') {
	      slideOffset = indexOffset === 0 ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;
	      targetSlide = this.state.currentSlide - slideOffset;
	      if (this.props.lazyLoad) {
	        previousInt = this.state.currentSlide - slideOffset;
	        targetSlide = previousInt === -1 ? this.state.slideCount - 1 : previousInt;
	      }
	    } else if (options.message === 'next') {
	      slideOffset = indexOffset === 0 ? this.props.slidesToScroll : indexOffset;
	      targetSlide = this.state.currentSlide + slideOffset;
	    } else if (options.message === 'dots') {
	      // Click on dots
	      targetSlide = options.index * options.slidesToScroll;
	      if (targetSlide === options.currentSlide) {
	        return;
	      }
	    } else if (options.message === 'index') {
	      targetSlide = options.index;
	      if (targetSlide === options.currentSlide) {
	        return;
	      }
	    }

	    this.slideHandler(targetSlide);
	  },
	  // Accessiblity handler for previous and next
	  keyHandler: function keyHandler(e) {},
	  // Focus on selecting a slide (click handler on track)
	  selectHandler: function selectHandler(e) {},
	  swipeStart: function swipeStart(e) {
	    var touches, posX, posY;

	    if (this.props.swipe === false || 'ontouchend' in document && this.props.swipe === false) {
	      return;
	    } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {
	      return;
	    }
	    posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;
	    posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;
	    this.setState({
	      dragging: true,
	      touchObject: {
	        startX: posX,
	        startY: posY,
	        curX: posX,
	        curY: posY
	      }
	    });
	  },
	  swipeMove: function swipeMove(e) {
	    if (!this.state.dragging) {
	      return;
	    }
	    if (this.state.animating) {
	      return;
	    }
	    var swipeLeft;
	    var curLeft, positionOffset;
	    var touchObject = this.state.touchObject;

	    curLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	      slideIndex: this.state.currentSlide,
	      trackRef: this.refs.track
	    }, this.props, this.state));
	    touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
	    touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
	    touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));

	    positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);

	    var currentSlide = this.state.currentSlide;
	    var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);
	    var swipeDirection = this.swipeDirection(this.state.touchObject);
	    var touchSwipeLength = touchObject.swipeLength;

	    if (this.props.infinite === false) {
	      if (currentSlide === 0 && swipeDirection === 'right' || currentSlide + 1 >= dotCount && swipeDirection === 'left') {
	        touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;

	        if (this.state.edgeDragged === false && this.props.edgeEvent) {
	          this.props.edgeEvent(swipeDirection);
	          this.setState({ edgeDragged: true });
	        }
	      }
	    }

	    if (this.state.swiped === false && this.props.swipeEvent) {
	      this.props.swipeEvent(swipeDirection);
	      this.setState({ swiped: true });
	    }

	    swipeLeft = curLeft + touchSwipeLength * positionOffset;
	    this.setState({
	      touchObject: touchObject,
	      swipeLeft: swipeLeft,
	      trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: swipeLeft }, this.props, this.state))
	    });

	    if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
	      return;
	    }
	    if (touchObject.swipeLength > 4) {
	      e.preventDefault();
	    }
	  },
	  swipeEnd: function swipeEnd(e) {
	    if (!this.state.dragging) {
	      return;
	    }
	    var touchObject = this.state.touchObject;
	    var minSwipe = this.state.listWidth / this.props.touchThreshold;
	    var swipeDirection = this.swipeDirection(touchObject);

	    // reset the state of touch related state variables.
	    this.setState({
	      dragging: false,
	      edgeDragged: false,
	      swiped: false,
	      swipeLeft: null,
	      touchObject: {}
	    });
	    // Fix for #13
	    if (!touchObject.swipeLength) {
	      return;
	    }
	    if (touchObject.swipeLength > minSwipe) {
	      e.preventDefault();
	      if (swipeDirection === 'left') {
	        this.slideHandler(this.state.currentSlide + this.props.slidesToScroll);
	      } else if (swipeDirection === 'right') {
	        this.slideHandler(this.state.currentSlide - this.props.slidesToScroll);
	      } else {
	        this.slideHandler(this.state.currentSlide);
	      }
	    } else {
	      // Adjust the track back to it's original position.
	      var currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	        slideIndex: this.state.currentSlide,
	        trackRef: this.refs.track
	      }, this.props, this.state));

	      this.setState({
	        trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state))
	      });
	    }
	  },
	  onInnerSliderEnter: function onInnerSliderEnter(e) {
	    if (this.props.autoplay && this.props.pauseOnHover) {
	      this.pause();
	    }
	  },
	  onInnerSliderLeave: function onInnerSliderLeave(e) {
	    if (this.props.autoplay && this.props.pauseOnHover) {
	      this.autoPlay();
	    }
	  }
	};

	exports['default'] = EventHandlers;
	module.exports = exports['default'];

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _ReactDOM = __webpack_require__(380);

	var _ReactDOM2 = _interopRequireDefault(_ReactDOM);

	var _reactLibReactTransitionEvents = __webpack_require__(381);

	var _reactLibReactTransitionEvents2 = _interopRequireDefault(_reactLibReactTransitionEvents);

	var _trackHelper = __webpack_require__(379);

	var _objectAssign = __webpack_require__(357);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var helpers = {
	  initialize: function initialize(props) {
	    var slideCount = _react2['default'].Children.count(props.children);
	    var listWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this.refs.list));
	    var trackWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this.refs.track));
	    var slideWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this)) / props.slidesToShow;

	    var currentSlide = props.rtl ? slideCount - 1 - props.initialSlide : props.initialSlide;

	    this.setState({
	      slideCount: slideCount,
	      slideWidth: slideWidth,
	      listWidth: listWidth,
	      trackWidth: trackWidth,
	      currentSlide: currentSlide
	    }, function () {

	      var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	        slideIndex: this.state.currentSlide,
	        trackRef: this.refs.track
	      }, props, this.state));
	      // getCSS function needs previously set state
	      var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: targetLeft }, props, this.state));

	      this.setState({ trackStyle: trackStyle });

	      this.autoPlay(); // once we're set up, trigger the initial autoplay.
	    });
	  },
	  update: function update(props) {
	    // This method has mostly same code as initialize method.
	    // Refactor it
	    var slideCount = _react2['default'].Children.count(props.children);
	    var listWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this.refs.list));
	    var trackWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this.refs.track));
	    var slideWidth = this.getWidth(_ReactDOM2['default'].findDOMNode(this)) / props.slidesToShow;

	    this.setState({
	      slideCount: slideCount,
	      slideWidth: slideWidth,
	      listWidth: listWidth,
	      trackWidth: trackWidth
	    }, function () {

	      var targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	        slideIndex: this.state.currentSlide,
	        trackRef: this.refs.track
	      }, props, this.state));
	      // getCSS function needs previously set state
	      var trackStyle = (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: targetLeft }, props, this.state));

	      this.setState({ trackStyle: trackStyle });
	    });
	  },
	  getWidth: function getWidth(elem) {
	    return elem.getBoundingClientRect().width || elem.offsetWidth;
	  },
	  adaptHeight: function adaptHeight() {
	    if (this.props.adaptiveHeight) {
	      var selector = '[data-index="' + this.state.currentSlide + '"]';
	      if (this.refs.list) {
	        var slickList = _ReactDOM2['default'].findDOMNode(this.refs.list);
	        slickList.style.height = slickList.querySelector(selector).offsetHeight + 'px';
	      }
	    }
	  },
	  slideHandler: function slideHandler(index) {
	    var _this = this;

	    // Functionality of animateSlide and postSlide is merged into this function
	    // console.log('slideHandler', index);
	    var targetSlide, currentSlide;
	    var targetLeft, currentLeft;
	    var callback;

	    if (this.props.waitForAnimate && this.state.animating) {
	      return;
	    }

	    if (this.state.currentSlide === index) {
	      return;
	    }

	    if (this.props.fade) {
	      currentSlide = this.state.currentSlide;

	      //  Shifting targetSlide back into the range
	      if (index < 0) {
	        targetSlide = index + this.state.slideCount;
	      } else if (index >= this.state.slideCount) {
	        targetSlide = index - this.state.slideCount;
	      } else {
	        targetSlide = index;
	      }

	      if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {
	        this.setState({
	          lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)
	        });
	      }

	      callback = function () {
	        _this.setState({
	          animating: false
	        });
	        if (_this.props.afterChange) {
	          _this.props.afterChange(currentSlide);
	        }
	        _reactLibReactTransitionEvents2['default'].removeEndEventListener(_ReactDOM2['default'].findDOMNode(_this.refs.track).children[currentSlide], callback);
	      };

	      this.setState({
	        animating: true,
	        currentSlide: targetSlide
	      }, function () {
	        _reactLibReactTransitionEvents2['default'].addEndEventListener(_ReactDOM2['default'].findDOMNode(this.refs.track).children[currentSlide], callback);
	      });

	      if (this.props.beforeChange) {
	        this.props.beforeChange(this.state.currentSlide, currentSlide);
	      }

	      this.autoPlay();
	      return;
	    }

	    targetSlide = index;
	    if (targetSlide < 0) {
	      if (this.props.infinite === false) {
	        currentSlide = 0;
	      } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
	        currentSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;
	      } else {
	        currentSlide = this.state.slideCount + targetSlide;
	      }
	    } else if (targetSlide >= this.state.slideCount) {
	      if (this.props.infinite === false) {
	        currentSlide = this.state.slideCount - this.props.slidesToShow;
	      } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
	        currentSlide = 0;
	      } else {
	        currentSlide = targetSlide - this.state.slideCount;
	      }
	    } else {
	      currentSlide = targetSlide;
	    }

	    targetLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	      slideIndex: targetSlide,
	      trackRef: this.refs.track
	    }, this.props, this.state));

	    currentLeft = (0, _trackHelper.getTrackLeft)((0, _objectAssign2['default'])({
	      slideIndex: currentSlide,
	      trackRef: this.refs.track
	    }, this.props, this.state));

	    if (this.props.infinite === false) {
	      targetLeft = currentLeft;
	    }

	    if (this.props.beforeChange) {
	      this.props.beforeChange(this.state.currentSlide, currentSlide);
	    }

	    if (this.props.lazyLoad) {
	      var loaded = true;
	      var slidesToLoad = [];
	      for (var i = targetSlide; i < targetSlide + this.props.slidesToShow; i++) {
	        loaded = loaded && this.state.lazyLoadedList.indexOf(i) >= 0;
	        if (!loaded) {
	          slidesToLoad.push(i);
	        }
	      }
	      if (!loaded) {
	        this.setState({
	          lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)
	        });
	      }
	    }

	    // Slide Transition happens here.
	    // animated transition happens to target Slide and
	    // non - animated transition happens to current Slide
	    // If CSS transitions are false, directly go the current slide.

	    if (this.props.useCSS === false) {

	      this.setState({
	        currentSlide: currentSlide,
	        trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state))
	      }, function () {
	        if (this.props.afterChange) {
	          this.props.afterChange(currentSlide);
	        }
	      });
	    } else {

	      var nextStateChanges = {
	        animating: false,
	        currentSlide: currentSlide,
	        trackStyle: (0, _trackHelper.getTrackCSS)((0, _objectAssign2['default'])({ left: currentLeft }, this.props, this.state)),
	        swipeLeft: null
	      };

	      callback = function () {
	        _this.setState(nextStateChanges);
	        if (_this.props.afterChange) {
	          _this.props.afterChange(currentSlide);
	        }
	        _reactLibReactTransitionEvents2['default'].removeEndEventListener(_ReactDOM2['default'].findDOMNode(_this.refs.track), callback);
	      };

	      this.setState({
	        animating: true,
	        currentSlide: currentSlide,
	        trackStyle: (0, _trackHelper.getTrackAnimateCSS)((0, _objectAssign2['default'])({ left: targetLeft }, this.props, this.state))
	      }, function () {
	        _reactLibReactTransitionEvents2['default'].addEndEventListener(_ReactDOM2['default'].findDOMNode(this.refs.track), callback);
	      });
	    }

	    if (!this.state.autoPlayTimer) {
	      this.autoPlay();
	    }
	  },
	  swipeDirection: function swipeDirection(touchObject) {
	    var xDist, yDist, r, swipeAngle;

	    xDist = touchObject.startX - touchObject.curX;
	    yDist = touchObject.startY - touchObject.curY;
	    r = Math.atan2(yDist, xDist);

	    swipeAngle = Math.round(r * 180 / Math.PI);
	    if (swipeAngle < 0) {
	      swipeAngle = 360 - Math.abs(swipeAngle);
	    }
	    if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
	      return this.props.rtl === false ? 'left' : 'right';
	    }
	    if (swipeAngle >= 135 && swipeAngle <= 225) {
	      return this.props.rtl === false ? 'right' : 'left';
	    }

	    return 'vertical';
	  },
	  autoPlay: function autoPlay() {
	    var _this2 = this;

	    var play = function play() {
	      if (_this2.state.mounted) {
	        var nextIndex = _this2.props.rtl ? _this2.state.currentSlide - _this2.props.slidesToScroll : _this2.state.currentSlide + _this2.props.slidesToScroll;
	        _this2.slideHandler(nextIndex);
	      }
	    };
	    if (this.props.autoplay) {
	      this.setState({
	        autoPlayTimer: window.setInterval(play, this.props.autoplaySpeed)
	      });
	    }
	  },
	  pause: function pause() {
	    if (this.state.autoPlayTimer) {
	      window.clearInterval(this.state.autoPlayTimer);
	    }
	  }
	};

	exports['default'] = helpers;
	module.exports = exports['default'];

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var initialState = {
	    animating: false,
	    dragging: false,
	    autoPlayTimer: null,
	    currentDirection: 0,
	    currentLeft: null,
	    currentSlide: 0,
	    direction: 1,
	    // listWidth: null,
	    // listHeight: null,
	    // loadIndex: 0,
	    slideCount: null,
	    slideWidth: null,
	    // sliding: false,
	    // slideOffset: 0,
	    swipeLeft: null,
	    touchObject: {
	        startX: 0,
	        startY: 0,
	        curX: 0,
	        curY: 0
	    },

	    lazyLoadedList: [],

	    // added for react
	    initialized: false,
	    edgeDragged: false,
	    swiped: false, // used by swipeEvent. differentites between touch and swipe.
	    trackStyle: {},
	    trackWidth: 0

	    // Removed
	    // transformsEnabled: false,
	    // $nextArrow: null,
	    // $prevArrow: null,
	    // $dots: null,
	    // $list: null,
	    // $slideTrack: null,
	    // $slides: null,
	};

	module.exports = initialState;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(357);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var getSlideClasses = function getSlideClasses(spec) {
	  var slickActive, slickCenter, slickCloned;
	  var centerOffset, index;

	  if (spec.rtl) {
	    index = spec.slideCount - 1 - spec.index;
	  } else {
	    index = spec.index;
	  }

	  slickCloned = index < 0 || index >= spec.slideCount;
	  if (spec.centerMode) {
	    centerOffset = Math.floor(spec.slidesToShow / 2);
	    slickCenter = (index - spec.currentSlide) % spec.slideCount === 0;
	    if (index > spec.currentSlide - centerOffset - 1 && index <= spec.currentSlide + centerOffset) {
	      slickActive = true;
	    }
	  } else {
	    slickActive = spec.currentSlide <= index && index < spec.currentSlide + spec.slidesToShow;
	  }
	  return (0, _classnames2['default'])({
	    'slick-slide': true,
	    'slick-active': slickActive,
	    'slick-center': slickCenter,
	    'slick-cloned': slickCloned
	  });
	};

	var getSlideStyle = function getSlideStyle(spec) {
	  var style = {};

	  if (spec.variableWidth === undefined || spec.variableWidth === false) {
	    style.width = spec.slideWidth;
	  }

	  if (spec.fade) {
	    style.position = 'relative';
	    style.left = -spec.index * spec.slideWidth;
	    style.opacity = spec.currentSlide === spec.index ? 1 : 0;
	    style.transition = 'opacity ' + spec.speed + 'ms ' + spec.cssEase;
	    style.WebkitTransition = 'opacity ' + spec.speed + 'ms ' + spec.cssEase;
	  }

	  return style;
	};

	var renderSlides = function renderSlides(spec) {
	  var key;
	  var slides = [];
	  var preCloneSlides = [];
	  var postCloneSlides = [];
	  var count = _react2['default'].Children.count(spec.children);
	  var child;

	  _react2['default'].Children.forEach(spec.children, function (elem, index) {
	    if (!spec.lazyLoad | (spec.lazyLoad && spec.lazyLoadedList.indexOf(index) >= 0)) {
	      child = elem;
	    } else {
	      child = _react2['default'].createElement('div', null);
	    }
	    var childStyle = getSlideStyle((0, _objectAssign2['default'])({}, spec, { index: index }));
	    var slickClasses = getSlideClasses((0, _objectAssign2['default'])({ index: index }, spec));
	    var cssClasses;

	    if (child.props.className) {
	      cssClasses = (0, _classnames2['default'])(slickClasses, child.props.className);
	    } else {
	      cssClasses = slickClasses;
	    }

	    slides.push(_react2['default'].cloneElement(child, {
	      key: index,
	      'data-index': index,
	      className: cssClasses,
	      style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
	    }));

	    // variableWidth doesn't wrap properly.
	    if (spec.infinite && spec.fade === false) {
	      var infiniteCount = spec.variableWidth ? spec.slidesToShow + 1 : spec.slidesToShow;

	      if (index >= count - infiniteCount) {
	        key = -(count - index);
	        preCloneSlides.push(_react2['default'].cloneElement(child, {
	          key: key,
	          'data-index': key,
	          className: getSlideClasses((0, _objectAssign2['default'])({ index: key }, spec)),
	          style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
	        }));
	      }

	      if (index < infiniteCount) {
	        key = count + index;
	        postCloneSlides.push(_react2['default'].cloneElement(child, {
	          key: key,
	          'data-index': key,
	          className: getSlideClasses((0, _objectAssign2['default'])({ index: key }, spec)),
	          style: (0, _objectAssign2['default'])({}, child.props.style || {}, childStyle)
	        }));
	      }
	    }
	  });

	  if (spec.rtl) {
	    return preCloneSlides.concat(slides, postCloneSlides).reverse();
	  } else {
	    return preCloneSlides.concat(slides, postCloneSlides);
	  }
	};

	var Track = _react2['default'].createClass({
	  displayName: 'Track',

	  render: function render() {
	    var slides = renderSlides(this.props);
	    return _react2['default'].createElement(
	      'div',
	      { className: 'slick-track', style: this.props.trackStyle },
	      slides
	    );
	  }
	});
	exports.Track = Track;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var getDotCount = function getDotCount(spec) {
	  var dots;
	  dots = Math.ceil(spec.slideCount / spec.slidesToScroll);
	  return dots;
	};

	var Dots = _react2['default'].createClass({
	  displayName: 'Dots',

	  clickHandler: function clickHandler(options, e) {
	    // In Autoplay the focus stays on clicked button even after transition
	    // to next slide. That only goes away by click somewhere outside
	    e.preventDefault();
	    this.props.clickHandler(options);
	  },
	  render: function render() {
	    var _this = this;

	    var dotCount = getDotCount({
	      slideCount: this.props.slideCount,
	      slidesToScroll: this.props.slidesToScroll
	    });

	    // Apply join & split to Array to pre-fill it for IE8
	    //
	    // Credit: http://stackoverflow.com/a/13735425/1849458
	    var dots = Array.apply(null, Array(dotCount + 1).join('0').split('')).map(function (x, i) {

	      var className = (0, _classnames2['default'])({
	        'slick-active': _this.props.currentSlide === i * _this.props.slidesToScroll
	      });

	      var dotOptions = {
	        message: 'dots',
	        index: i,
	        slidesToScroll: _this.props.slidesToScroll,
	        currentSlide: _this.props.currentSlide
	      };

	      return _react2['default'].createElement(
	        'li',
	        { key: i, className: className },
	        _react2['default'].createElement(
	          'button',
	          { onClick: _this.clickHandler.bind(_this, dotOptions) },
	          i + 1
	        )
	      );
	    });

	    return _react2['default'].createElement(
	      'ul',
	      { className: this.props.dotsClass, style: { display: 'block' } },
	      dots
	    );
	  }
	});
	exports.Dots = Dots;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(323);

	var _classnames2 = _interopRequireDefault(_classnames);

	var PrevArrow = _react2['default'].createClass({
	  displayName: 'PrevArrow',

	  clickHandler: function clickHandler(options, e) {
	    e.preventDefault();
	    this.props.clickHandler(options, e);
	  },
	  render: function render() {
	    var prevClasses = { 'slick-prev': true };
	    var prevHandler = this.clickHandler.bind(this, { message: 'previous' });

	    if (!this.props.infinite && (this.props.currentSlide === 0 || this.props.slideCount <= this.props.slidesToShow)) {
	      prevClasses['slick-disabled'] = true;
	      prevHandler = null;
	    }

	    var prevArrowProps = {
	      key: '0',
	      ref: 'previous',
	      'data-role': 'none',
	      className: (0, _classnames2['default'])(prevClasses),
	      style: { display: 'block' },
	      onClick: prevHandler
	    };
	    var prevArrow;

	    if (this.props.prevArrow) {
	      prevArrow = _react2['default'].createElement(this.props.prevArrow, prevArrowProps);
	    } else {
	      prevArrow = _react2['default'].createElement(
	        'button',
	        _extends({ key: '0', type: 'button' }, prevArrowProps),
	        ' Previous'
	      );
	    }

	    return prevArrow;
	  }
	});

	exports.PrevArrow = PrevArrow;
	var NextArrow = _react2['default'].createClass({
	  displayName: 'NextArrow',

	  clickHandler: function clickHandler(options, e) {
	    e.preventDefault();
	    this.props.clickHandler(options, e);
	  },
	  render: function render() {
	    var nextClasses = { 'slick-next': true };
	    var nextHandler = this.clickHandler.bind(this, { message: 'next' });

	    if (!this.props.infinite) {
	      if (this.props.centerMode && this.props.currentSlide >= this.props.slideCount - 1) {
	        nextClasses['slick-disabled'] = true;
	        nextHandler = null;
	      } else {
	        if (this.props.currentSlide >= this.props.slideCount - this.props.slidesToShow) {
	          nextClasses['slick-disabled'] = true;
	          nextHandler = null;
	        }
	      }

	      if (this.props.slideCount <= this.props.slidesToShow) {
	        nextClasses['slick-disabled'] = true;
	        nextHandler = null;
	      }
	    }

	    var nextArrowProps = {
	      key: '1',
	      ref: 'next',
	      'data-role': 'none',
	      className: (0, _classnames2['default'])(nextClasses),
	      style: { display: 'block' },
	      onClick: nextHandler
	    };

	    var nextArrow;

	    if (this.props.nextArrow) {
	      nextArrow = _react2['default'].createElement(this.props.nextArrow, nextArrowProps);
	    } else {
	      nextArrow = _react2['default'].createElement(
	        'button',
	        _extends({ key: '1', type: 'button' }, nextArrowProps),
	        ' Next'
	      );
	    }

	    return nextArrow;
	  }
	});
	exports.NextArrow = NextArrow;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(383);
	var isArguments = __webpack_require__(384);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module dependencies.
	 */

	var debug = __webpack_require__(403)('socket.io-parser');
	var json = __webpack_require__(404);
	var isArray = __webpack_require__(402);
	var Emitter = __webpack_require__(393);
	var binary = __webpack_require__(394);
	var isBuf = __webpack_require__(395);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	exports.protocol = 4;

	/**
	 * Packet types.
	 *
	 * @api public
	 */

	exports.types = [
	  'CONNECT',
	  'DISCONNECT',
	  'EVENT',
	  'ACK',
	  'ERROR',
	  'BINARY_EVENT',
	  'BINARY_ACK'
	];

	/**
	 * Packet type `connect`.
	 *
	 * @api public
	 */

	exports.CONNECT = 0;

	/**
	 * Packet type `disconnect`.
	 *
	 * @api public
	 */

	exports.DISCONNECT = 1;

	/**
	 * Packet type `event`.
	 *
	 * @api public
	 */

	exports.EVENT = 2;

	/**
	 * Packet type `ack`.
	 *
	 * @api public
	 */

	exports.ACK = 3;

	/**
	 * Packet type `error`.
	 *
	 * @api public
	 */

	exports.ERROR = 4;

	/**
	 * Packet type 'binary event'
	 *
	 * @api public
	 */

	exports.BINARY_EVENT = 5;

	/**
	 * Packet type `binary ack`. For acks with binary arguments.
	 *
	 * @api public
	 */

	exports.BINARY_ACK = 6;

	/**
	 * Encoder constructor.
	 *
	 * @api public
	 */

	exports.Encoder = Encoder;

	/**
	 * Decoder constructor.
	 *
	 * @api public
	 */

	exports.Decoder = Decoder;

	/**
	 * A socket.io Encoder instance
	 *
	 * @api public
	 */

	function Encoder() {}

	/**
	 * Encode a packet as a single string if non-binary, or as a
	 * buffer sequence, depending on packet type.
	 *
	 * @param {Object} obj - packet object
	 * @param {Function} callback - function to handle encodings (likely engine.write)
	 * @return Calls callback with Array of encodings
	 * @api public
	 */

	Encoder.prototype.encode = function(obj, callback){
	  debug('encoding packet %j', obj);

	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    encodeAsBinary(obj, callback);
	  }
	  else {
	    var encoding = encodeAsString(obj);
	    callback([encoding]);
	  }
	};

	/**
	 * Encode packet as string.
	 *
	 * @param {Object} packet
	 * @return {String} encoded
	 * @api private
	 */

	function encodeAsString(obj) {
	  var str = '';
	  var nsp = false;

	  // first is type
	  str += obj.type;

	  // attachments if we have them
	  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
	    str += obj.attachments;
	    str += '-';
	  }

	  // if we have a namespace other than `/`
	  // we append it followed by a comma `,`
	  if (obj.nsp && '/' != obj.nsp) {
	    nsp = true;
	    str += obj.nsp;
	  }

	  // immediately followed by the id
	  if (null != obj.id) {
	    if (nsp) {
	      str += ',';
	      nsp = false;
	    }
	    str += obj.id;
	  }

	  // json data
	  if (null != obj.data) {
	    if (nsp) str += ',';
	    str += json.stringify(obj.data);
	  }

	  debug('encoded %j as %s', obj, str);
	  return str;
	}

	/**
	 * Encode packet as 'buffer sequence' by removing blobs, and
	 * deconstructing packet into object with placeholders and
	 * a list of buffers.
	 *
	 * @param {Object} packet
	 * @return {Buffer} encoded
	 * @api private
	 */

	function encodeAsBinary(obj, callback) {

	  function writeEncoding(bloblessData) {
	    var deconstruction = binary.deconstructPacket(bloblessData);
	    var pack = encodeAsString(deconstruction.packet);
	    var buffers = deconstruction.buffers;

	    buffers.unshift(pack); // add packet info to beginning of data list
	    callback(buffers); // write all the buffers
	  }

	  binary.removeBlobs(obj, writeEncoding);
	}

	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 * @api public
	 */

	function Decoder() {
	  this.reconstructor = null;
	}

	/**
	 * Mix in `Emitter` with Decoder.
	 */

	Emitter(Decoder.prototype);

	/**
	 * Decodes an ecoded packet string into packet JSON.
	 *
	 * @param {String} obj - encoded packet
	 * @return {Object} packet
	 * @api public
	 */

	Decoder.prototype.add = function(obj) {
	  var packet;
	  if ('string' == typeof obj) {
	    packet = decodeString(obj);
	    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
	      this.reconstructor = new BinaryReconstructor(packet);

	      // no attachments, labeled binary but no binary data to follow
	      if (this.reconstructor.reconPack.attachments === 0) {
	        this.emit('decoded', packet);
	      }
	    } else { // non-binary full packet
	      this.emit('decoded', packet);
	    }
	  }
	  else if (isBuf(obj) || obj.base64) { // raw binary data
	    if (!this.reconstructor) {
	      throw new Error('got binary data when not reconstructing a packet');
	    } else {
	      packet = this.reconstructor.takeBinaryData(obj);
	      if (packet) { // received final buffer
	        this.reconstructor = null;
	        this.emit('decoded', packet);
	      }
	    }
	  }
	  else {
	    throw new Error('Unknown type: ' + obj);
	  }
	};

	/**
	 * Decode a packet String (JSON data)
	 *
	 * @param {String} str
	 * @return {Object} packet
	 * @api private
	 */

	function decodeString(str) {
	  var p = {};
	  var i = 0;

	  // look up type
	  p.type = Number(str.charAt(0));
	  if (null == exports.types[p.type]) return error();

	  // look up attachments if type binary
	  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
	    var buf = '';
	    while (str.charAt(++i) != '-') {
	      buf += str.charAt(i);
	      if (i == str.length) break;
	    }
	    if (buf != Number(buf) || str.charAt(i) != '-') {
	      throw new Error('Illegal attachments');
	    }
	    p.attachments = Number(buf);
	  }

	  // look up namespace (if any)
	  if ('/' == str.charAt(i + 1)) {
	    p.nsp = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (',' == c) break;
	      p.nsp += c;
	      if (i == str.length) break;
	    }
	  } else {
	    p.nsp = '/';
	  }

	  // look up id
	  var next = str.charAt(i + 1);
	  if ('' !== next && Number(next) == next) {
	    p.id = '';
	    while (++i) {
	      var c = str.charAt(i);
	      if (null == c || Number(c) != c) {
	        --i;
	        break;
	      }
	      p.id += str.charAt(i);
	      if (i == str.length) break;
	    }
	    p.id = Number(p.id);
	  }

	  // look up json data
	  if (str.charAt(++i)) {
	    try {
	      p.data = json.parse(str.substr(i));
	    } catch(e){
	      return error();
	    }
	  }

	  debug('decoded %s as %j', str, p);
	  return p;
	}

	/**
	 * Deallocates a parser's resources
	 *
	 * @api public
	 */

	Decoder.prototype.destroy = function() {
	  if (this.reconstructor) {
	    this.reconstructor.finishedReconstruction();
	  }
	};

	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 * @api private
	 */

	function BinaryReconstructor(packet) {
	  this.reconPack = packet;
	  this.buffers = [];
	}

	/**
	 * Method to be called when binary data received from connection
	 * after a BINARY_EVENT packet.
	 *
	 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	 * @return {null | Object} returns null if more binary data is expected or
	 *   a reconstructed packet object if all buffers have been received.
	 * @api private
	 */

	BinaryReconstructor.prototype.takeBinaryData = function(binData) {
	  this.buffers.push(binData);
	  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
	    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
	    this.finishedReconstruction();
	    return packet;
	  }
	  return null;
	};

	/**
	 * Cleans up binary packet reconstruction variables.
	 *
	 * @api private
	 */

	BinaryReconstructor.prototype.finishedReconstruction = function() {
	  this.reconPack = null;
	  this.buffers = [];
	};

	function error(data){
	  return {
	    type: exports.ERROR,
	    data: 'parser error'
	  };
	}


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(45);

	var assign = __webpack_require__(113);

	var ReactTransitionGroup = __webpack_require__(396);
	var ReactCSSTransitionGroupChild = __webpack_require__(397);

	function createTransitionTimeoutPropValidator(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	        }
	    }
	  };
	}

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: ReactCSSTransitionGroupChild.propTypes.name,

	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool,
	    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
	    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
	    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
	  },

	  getDefaultProps: function () {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function (child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return React.createElement(ReactCSSTransitionGroupChild, {
	      name: this.props.transitionName,
	      appear: this.props.transitionAppear,
	      enter: this.props.transitionEnter,
	      leave: this.props.transitionLeave,
	      appearTimeout: this.props.transitionAppearTimeout,
	      enterTimeout: this.props.transitionEnterTimeout,
	      leaveTimeout: this.props.transitionLeaveTimeout
	    }, child);
	  },

	  render: function () {
	    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));
	  }
	});

	module.exports = ReactCSSTransitionGroup;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(398);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(401);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module exports.
	 */

	module.exports = on;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on(obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function(){
	      obj.removeListener(ev, fn);
	    }
	  };
	}


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var canUseDOM = !!(
	  typeof window !== 'undefined' &&
	  window.document &&
	  window.document.createElement
	);

	module.exports = canUseDOM;

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ReactDOM = __webpack_require__(380);

	var _ReactDOM2 = _interopRequireDefault(_ReactDOM);

	var checkSpecKeys = function checkSpecKeys(spec, keysArray) {
	  return keysArray.reduce(function (value, key) {
	    return value && spec.hasOwnProperty(key);
	  }, true) ? null : console.error('Keys Missing', spec);
	};

	var getTrackCSS = function getTrackCSS(spec) {
	  checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth']);

	  var trackWidth;

	  if (spec.variableWidth) {
	    trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
	  } else if (spec.centerMode) {
	    trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;
	  } else {
	    trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
	  }

	  var style = {
	    opacity: 1,
	    width: trackWidth,
	    WebkitTransform: 'translate3d(' + spec.left + 'px, 0px, 0px)',
	    transform: 'translate3d(' + spec.left + 'px, 0px, 0px)',
	    transition: '',
	    WebkitTransition: '',
	    msTransform: 'translateX(' + spec.left + 'px)'
	  };

	  // Fallback for IE8
	  if (!window.addEventListener && window.attachEvent) {
	    style.marginLeft = spec.left + 'px';
	  }

	  return style;
	};

	exports.getTrackCSS = getTrackCSS;
	var getTrackAnimateCSS = function getTrackAnimateCSS(spec) {
	  checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase']);

	  var style = getTrackCSS(spec);
	  // useCSS is true by default so it can be undefined
	  style.WebkitTransition = '-webkit-transform ' + spec.speed + 'ms ' + spec.cssEase;
	  style.transition = 'transform ' + spec.speed + 'ms ' + spec.cssEase;
	  return style;
	};

	exports.getTrackAnimateCSS = getTrackAnimateCSS;
	var getTrackLeft = function getTrackLeft(spec) {

	  checkSpecKeys(spec, ['slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow', 'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth']);

	  var slideOffset = 0;
	  var targetLeft;
	  var targetSlide;

	  if (spec.fade) {
	    return 0;
	  }

	  if (spec.infinite) {
	    if (spec.slideCount > spec.slidesToShow) {
	      slideOffset = spec.slideWidth * spec.slidesToShow * -1;
	    }
	    if (spec.slideCount % spec.slidesToScroll !== 0) {
	      if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {
	        if (spec.slideIndex > spec.slideCount) {
	          slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;
	        } else {
	          slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;
	        }
	      }
	    }
	  }

	  if (spec.centerMode) {
	    if (spec.infinite) {
	      slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);
	    } else {
	      slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);
	    }
	  }

	  targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;

	  if (spec.variableWidth === true) {
	    var targetSlideIndex;
	    if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {
	      targetSlide = _ReactDOM2['default'].findDOMNode(spec.trackRef).childNodes[spec.slideIndex];
	    } else {
	      targetSlideIndex = spec.slideIndex + spec.slidesToShow;
	      targetSlide = _ReactDOM2['default'].findDOMNode(spec.trackRef).childNodes[targetSlideIndex];
	    }
	    targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
	    if (spec.centerMode === true) {
	      if (spec.infinite === false) {
	        targetSlide = _ReactDOM2['default'].findDOMNode(spec.trackRef).children[spec.slideIndex];
	      } else {
	        targetSlide = _ReactDOM2['default'].findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];
	      }

	      targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
	      targetLeft += (spec.listWidth - targetSlide.offsetWidth) / 2;
	    }
	  }

	  return targetLeft;
	};
	exports.getTrackLeft = getTrackLeft;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(6);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var ReactDOM = _react2['default'].version >= '0.14.0' ? _reactDom2['default'] : _react2['default'];

	exports['default'] = ReactDOM;
	module.exports = exports['default'];

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(133);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function (node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var camel2hyphen = function (str) {
	  return str
	          .replace(/[A-Z]/g, function (match) {
	            return '-' + match.toLowerCase();
	          })
	          .toLowerCase();
	};

	module.exports = camel2hyphen;

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;

	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	module.exports = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports =  __webpack_require__(407);


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	module.exports = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Backoff`.
	 */

	module.exports = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};



/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = toArray

	function toArray(list, index) {
	    var array = []

	    index = index || 0

	    for (var i = index || 0; i < list.length; i++) {
	        array[i - index] = list[i]
	    }

	    return array
	}


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(402);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      // see: https://github.com/Automattic/has-binary/pull/4
	      if (obj.toJSON && 'function' == typeof obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = __webpack_require__(402);
	var isBuf = __webpack_require__(395);

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	exports.deconstructPacket = function(packet){
	  var buffers = [];
	  var packetData = packet.data;

	  function _deconstructPacket(data) {
	    if (!data) return data;

	    if (isBuf(data)) {
	      var placeholder = { _placeholder: true, num: buffers.length };
	      buffers.push(data);
	      return placeholder;
	    } else if (isArray(data)) {
	      var newData = new Array(data.length);
	      for (var i = 0; i < data.length; i++) {
	        newData[i] = _deconstructPacket(data[i]);
	      }
	      return newData;
	    } else if ('object' == typeof data && !(data instanceof Date)) {
	      var newData = {};
	      for (var key in data) {
	        newData[key] = _deconstructPacket(data[key]);
	      }
	      return newData;
	    }
	    return data;
	  }

	  var pack = packet;
	  pack.data = _deconstructPacket(packetData);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	exports.reconstructPacket = function(packet, buffers) {
	  var curPlaceHolder = 0;

	  function _reconstructPacket(data) {
	    if (data && data._placeholder) {
	      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
	      return buf;
	    } else if (isArray(data)) {
	      for (var i = 0; i < data.length; i++) {
	        data[i] = _reconstructPacket(data[i]);
	      }
	      return data;
	    } else if (data && 'object' == typeof data) {
	      for (var key in data) {
	        data[key] = _reconstructPacket(data[key]);
	      }
	      return data;
	    }
	    return data;
	  }

	  packet.data = _reconstructPacket(packet.data);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	exports.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((global.Blob && obj instanceof Blob) ||
	        (global.File && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	module.exports = isBuf;

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf(obj) {
	  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(45);
	var ReactTransitionChildMapping = __webpack_require__(405);

	var assign = __webpack_require__(113);
	var emptyFunction = __webpack_require__(246);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function () {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function () {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function () {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function () {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function (nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function () {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function (key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function (key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function (key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      this.setState(function (state) {
	        var newChildren = assign({}, state.children);
	        delete newChildren[key];
	        return { children: newChildren };
	      });
	    }
	  },

	  render: function () {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
	      }
	    }
	    return React.createElement(this.props.component, this.props, childrenToRender);
	  }
	});

	module.exports = ReactTransitionGroup;

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(45);
	var ReactDOM = __webpack_require__(43);

	var CSSCore = __webpack_require__(406);
	var ReactTransitionEvents = __webpack_require__(381);

	var onlyChild = __webpack_require__(200);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  propTypes: {
	    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      active: React.PropTypes.string
	    }), React.PropTypes.shape({
	      enter: React.PropTypes.string,
	      enterActive: React.PropTypes.string,
	      leave: React.PropTypes.string,
	      leaveActive: React.PropTypes.string,
	      appear: React.PropTypes.string,
	      appearActive: React.PropTypes.string
	    })]).isRequired,

	    // Once we require timeouts to be specified, we can remove the
	    // boolean flags (appear etc.) and just accept a number
	    // or a bool for the timeout flags (appearTimeout etc.)
	    appear: React.PropTypes.bool,
	    enter: React.PropTypes.bool,
	    leave: React.PropTypes.bool,
	    appearTimeout: React.PropTypes.number,
	    enterTimeout: React.PropTypes.number,
	    leaveTimeout: React.PropTypes.number
	  },

	  transition: function (animationType, finishCallback, userSpecifiedDelay) {
	    var node = ReactDOM.findDOMNode(this);

	    if (!node) {
	      if (finishCallback) {
	        finishCallback();
	      }
	      return;
	    }

	    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
	    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
	    var timeout = null;

	    var endListener = function (e) {
	      if (e && e.target !== node) {
	        return;
	      }

	      clearTimeout(timeout);

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    // If the user specified a timeout delay.
	    if (userSpecifiedDelay) {
	      // Clean-up the animation after the specified delay
	      timeout = setTimeout(endListener, userSpecifiedDelay);
	      this.transitionTimeouts.push(timeout);
	    } else {
	      // DEPRECATED: this listener will be removed in a future version of react
	      ReactTransitionEvents.addEndEventListener(node, endListener);
	    }
	  },

	  queueClass: function (className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function () {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function () {
	    this.classNameQueue = [];
	    this.transitionTimeouts = [];
	  },

	  componentWillUnmount: function () {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	    this.transitionTimeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });
	  },

	  componentWillAppear: function (done) {
	    if (this.props.appear) {
	      this.transition('appear', done, this.props.appearTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function (done) {
	    if (this.props.enter) {
	      this.transition('enter', done, this.props.enterTimeout);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function (done) {
	    if (this.props.leave) {
	      this.transition('leave', done, this.props.leaveTimeout);
	    } else {
	      done();
	    }
	  },

	  render: function () {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * enquire.js v2.1.1 - Awesome Media Queries in JavaScript
	 * Copyright (c) 2014 Nick Williams - http://wicky.nillia.ms/enquire.js
	 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	 */

	;(function (name, context, factory) {
		var matchMedia = window.matchMedia;

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = factory(matchMedia);
		}
		else if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return (context[name] = factory(matchMedia));
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}
		else {
			context[name] = factory(matchMedia);
		}
	}('enquire', this, function (matchMedia) {

		'use strict';

	    /*jshint unused:false */
	    /**
	     * Helper function for iterating over a collection
	     *
	     * @param collection
	     * @param fn
	     */
	    function each(collection, fn) {
	        var i      = 0,
	            length = collection.length,
	            cont;

	        for(i; i < length; i++) {
	            cont = fn(collection[i], i);
	            if(cont === false) {
	                break; //allow early exit
	            }
	        }
	    }

	    /**
	     * Helper function for determining whether target object is an array
	     *
	     * @param target the object under test
	     * @return {Boolean} true if array, false otherwise
	     */
	    function isArray(target) {
	        return Object.prototype.toString.apply(target) === '[object Array]';
	    }

	    /**
	     * Helper function for determining whether target object is a function
	     *
	     * @param target the object under test
	     * @return {Boolean} true if function, false otherwise
	     */
	    function isFunction(target) {
	        return typeof target === 'function';
	    }

	    /**
	     * Delegate to handle a media query being matched and unmatched.
	     *
	     * @param {object} options
	     * @param {function} options.match callback for when the media query is matched
	     * @param {function} [options.unmatch] callback for when the media query is unmatched
	     * @param {function} [options.setup] one-time callback triggered the first time a query is matched
	     * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
	     * @constructor
	     */
	    function QueryHandler(options) {
	        this.options = options;
	        !options.deferSetup && this.setup();
	    }
	    QueryHandler.prototype = {

	        /**
	         * coordinates setup of the handler
	         *
	         * @function
	         */
	        setup : function() {
	            if(this.options.setup) {
	                this.options.setup();
	            }
	            this.initialised = true;
	        },

	        /**
	         * coordinates setup and triggering of the handler
	         *
	         * @function
	         */
	        on : function() {
	            !this.initialised && this.setup();
	            this.options.match && this.options.match();
	        },

	        /**
	         * coordinates the unmatch event for the handler
	         *
	         * @function
	         */
	        off : function() {
	            this.options.unmatch && this.options.unmatch();
	        },

	        /**
	         * called when a handler is to be destroyed.
	         * delegates to the destroy or unmatch callbacks, depending on availability.
	         *
	         * @function
	         */
	        destroy : function() {
	            this.options.destroy ? this.options.destroy() : this.off();
	        },

	        /**
	         * determines equality by reference.
	         * if object is supplied compare options, if function, compare match callback
	         *
	         * @function
	         * @param {object || function} [target] the target for comparison
	         */
	        equals : function(target) {
	            return this.options === target || this.options.match === target;
	        }

	    };
	    /**
	     * Represents a single media query, manages it's state and registered handlers for this query
	     *
	     * @constructor
	     * @param {string} query the media query string
	     * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
	     */
	    function MediaQuery(query, isUnconditional) {
	        this.query = query;
	        this.isUnconditional = isUnconditional;
	        this.handlers = [];
	        this.mql = matchMedia(query);

	        var self = this;
	        this.listener = function(mql) {
	            self.mql = mql;
	            self.assess();
	        };
	        this.mql.addListener(this.listener);
	    }
	    MediaQuery.prototype = {

	        /**
	         * add a handler for this query, triggering if already active
	         *
	         * @param {object} handler
	         * @param {function} handler.match callback for when query is activated
	         * @param {function} [handler.unmatch] callback for when query is deactivated
	         * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
	         * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
	         */
	        addHandler : function(handler) {
	            var qh = new QueryHandler(handler);
	            this.handlers.push(qh);

	            this.matches() && qh.on();
	        },

	        /**
	         * removes the given handler from the collection, and calls it's destroy methods
	         * 
	         * @param {object || function} handler the handler to remove
	         */
	        removeHandler : function(handler) {
	            var handlers = this.handlers;
	            each(handlers, function(h, i) {
	                if(h.equals(handler)) {
	                    h.destroy();
	                    return !handlers.splice(i,1); //remove from array and exit each early
	                }
	            });
	        },

	        /**
	         * Determine whether the media query should be considered a match
	         * 
	         * @return {Boolean} true if media query can be considered a match, false otherwise
	         */
	        matches : function() {
	            return this.mql.matches || this.isUnconditional;
	        },

	        /**
	         * Clears all handlers and unbinds events
	         */
	        clear : function() {
	            each(this.handlers, function(handler) {
	                handler.destroy();
	            });
	            this.mql.removeListener(this.listener);
	            this.handlers.length = 0; //clear array
	        },

	        /*
	         * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
	         */
	        assess : function() {
	            var action = this.matches() ? 'on' : 'off';

	            each(this.handlers, function(handler) {
	                handler[action]();
	            });
	        }
	    };
	    /**
	     * Allows for registration of query handlers.
	     * Manages the query handler's state and is responsible for wiring up browser events
	     *
	     * @constructor
	     */
	    function MediaQueryDispatch () {
	        if(!matchMedia) {
	            throw new Error('matchMedia not present, legacy browsers require a polyfill');
	        }

	        this.queries = {};
	        this.browserIsIncapable = !matchMedia('only all').matches;
	    }

	    MediaQueryDispatch.prototype = {

	        /**
	         * Registers a handler for the given media query
	         *
	         * @param {string} q the media query
	         * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
	         * @param {function} options.match fired when query matched
	         * @param {function} [options.unmatch] fired when a query is no longer matched
	         * @param {function} [options.setup] fired when handler first triggered
	         * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
	         * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
	         */
	        register : function(q, options, shouldDegrade) {
	            var queries         = this.queries,
	                isUnconditional = shouldDegrade && this.browserIsIncapable;

	            if(!queries[q]) {
	                queries[q] = new MediaQuery(q, isUnconditional);
	            }

	            //normalise to object in an array
	            if(isFunction(options)) {
	                options = { match : options };
	            }
	            if(!isArray(options)) {
	                options = [options];
	            }
	            each(options, function(handler) {
	                queries[q].addHandler(handler);
	            });

	            return this;
	        },

	        /**
	         * unregisters a query and all it's handlers, or a specific handler for a query
	         *
	         * @param {string} q the media query to target
	         * @param {object || function} [handler] specific handler to unregister
	         */
	        unregister : function(q, handler) {
	            var query = this.queries[q];

	            if(query) {
	                if(handler) {
	                    query.removeHandler(handler);
	                }
	                else {
	                    query.clear();
	                    delete this.queries[q];
	                }
	            }

	            return this;
	        }
	    };

		return new MediaQueryDispatch();

	}));

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(408);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(409);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(411);

	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };

	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }

	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());

	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];

	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }

	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;

	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}

	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }

	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";

	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");

	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }

	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }

	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;

	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;

	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;

	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };

	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };

	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };

	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };

	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };

	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }

	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;

	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };

	        // Internal: Stores the parser state.
	        var Index, Source;

	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };

	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };

	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };

	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };

	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };

	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }

	    exports["runInContext"] = runInContext;
	    return exports;
	  }

	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;

	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));

	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(412)(module), (function() { return this; }())))

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var flattenChildren = __webpack_require__(340);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around flattenChildren().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function (children) {
	    if (!children) {
	      return children;
	    }
	    return flattenChildren(children);
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function (prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(158);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
	        .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function (element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function (element, className) {
	    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(122)))

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = __webpack_require__(410);

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	module.exports.parser = __webpack_require__(413);


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(408);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var transports = __webpack_require__(415);
	var Emitter = __webpack_require__(393);
	var debug = __webpack_require__(419)('engine.io-client:socket');
	var index = __webpack_require__(389);
	var parser = __webpack_require__(413);
	var parseuri = __webpack_require__(385);
	var parsejson = __webpack_require__(417);
	var parseqs = __webpack_require__(416);

	/**
	 * Module exports.
	 */

	module.exports = Socket;

	/**
	 * Noop function.
	 *
	 * @api private
	 */

	function noop(){}

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket(uri, opts){
	  if (!(this instanceof Socket)) return new Socket(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' == typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure :
	    (global.location && 'https:' == location.protocol);

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (global.location ? location.hostname : 'localhost');
	  this.port = opts.port || (global.location && location.port ?
	       location.port :
	       (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;

	  // other options for Node.js client
	  var freeGlobal = typeof global == 'object' && global;
	  if (freeGlobal.global === freeGlobal) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }
	  }

	  this.open();
	}

	Socket.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Socket.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket.protocol = parser.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket.Socket = Socket;
	Socket.Transport = __webpack_require__(414);
	Socket.transports = __webpack_require__(415);
	Socket.parser = __webpack_require__(413);

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket.prototype.createTransport = function (name) {
	  debug('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser.protocol;

	  // transport name
	  query.transport = name;

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    agent: this.agent,
	    hostname: this.hostname,
	    port: this.port,
	    secure: this.secure,
	    path: this.path,
	    query: query,
	    forceJSONP: this.forceJSONP,
	    jsonp: this.jsonp,
	    forceBase64: this.forceBase64,
	    enablesXDR: this.enablesXDR,
	    timestampRequests: this.timestampRequests,
	    timestampParam: this.timestampParam,
	    policyPort: this.policyPort,
	    socket: this,
	    pfx: this.pfx,
	    key: this.key,
	    passphrase: this.passphrase,
	    cert: this.cert,
	    ca: this.ca,
	    ciphers: this.ciphers,
	    rejectUnauthorized: this.rejectUnauthorized,
	    perMessageDeflate: this.perMessageDeflate,
	    extraHeaders: this.extraHeaders
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function() {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket.prototype.setTransport = function(transport){
	  debug('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function(){
	    self.onDrain();
	  })
	  .on('packet', function(packet){
	    self.onPacket(packet);
	  })
	  .on('error', function(e){
	    self.onError(e);
	  })
	  .on('close', function(){
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket.prototype.probe = function (name) {
	  debug('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 })
	    , failed = false
	    , self = this;

	  Socket.priorWebsocketSuccess = false;

	  function onTransportOpen(){
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' == msg.type && 'probe' == msg.data) {
	        debug('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

	        debug('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' == self.readyState) return;
	          debug('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport() {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  //Handle any error that happens while probing
	  function onerror(err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose(){
	    onerror("transport closed");
	  }

	  //When the socket is closed while we're probing
	  function onclose(){
	    onerror("socket closed");
	  }

	  //When the socket is upgraded while we're probing
	  function onupgrade(to){
	    if (transport && to.name != transport.name) {
	      debug('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  //Remove all listeners on the transport and on self
	  function cleanup(){
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();

	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket.prototype.onOpen = function () {
	  debug('socket open');
	  this.readyState = 'open';
	  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
	    debug('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket.prototype.onPacket = function (packet) {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(parsejson(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if  ('closed' == this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' == self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function(){
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket.prototype.onDrain = function() {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket.prototype.flush = function () {
	  if ('closed' != this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket.prototype.write =
	Socket.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket.prototype.sendPacket = function (type, data, options, fn) {
	  if('function' == typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' == typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' == this.readyState || 'closed' == this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function() {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close() {
	    self.onClose('forced close');
	    debug('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose() {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade() {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket.prototype.onError = function (err) {
	  debug('socket error %j', err);
	  Socket.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket.prototype.onClose = function (reason, desc) {
	  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
	    debug('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i<j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var keys = __webpack_require__(418);
	var hasBinary = __webpack_require__(427);
	var sliceBuffer = __webpack_require__(424);
	var base64encoder = __webpack_require__(428);
	var after = __webpack_require__(425);
	var utf8 = __webpack_require__(429);

	/**
	 * Check if we are running an android browser. That requires us to use
	 * ArrayBuffer with polling transports...
	 *
	 * http://ghinda.net/jpeg-blob-ajax-android/
	 */

	var isAndroid = navigator.userAgent.match(/Android/i);

	/**
	 * Check if we are running in PhantomJS.
	 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
	 * https://github.com/ariya/phantomjs/issues/11395
	 * @type boolean
	 */
	var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

	/**
	 * When true, avoids using Blobs to encode payloads.
	 * @type boolean
	 */
	var dontSendBlobs = isAndroid || isPhantomJS;

	/**
	 * Current protocol version.
	 */

	exports.protocol = 3;

	/**
	 * Packet types.
	 */

	var packets = exports.packets = {
	    open:     0    // non-ws
	  , close:    1    // non-ws
	  , ping:     2
	  , pong:     3
	  , message:  4
	  , upgrade:  5
	  , noop:     6
	};

	var packetslist = keys(packets);

	/**
	 * Premade error packet.
	 */

	var err = { type: 'error', data: 'parser error' };

	/**
	 * Create a blob api even for blob builder when vendor prefixes exist
	 */

	var Blob = __webpack_require__(426);

	/**
	 * Encodes a packet.
	 *
	 *     <packet type id> [ <data> ]
	 *
	 * Example:
	 *
	 *     5hello world
	 *     3
	 *     4
	 *
	 * Binary is encoded in an identical principle
	 *
	 * @api private
	 */

	exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
	  if ('function' == typeof supportsBinary) {
	    callback = supportsBinary;
	    supportsBinary = false;
	  }

	  if ('function' == typeof utf8encode) {
	    callback = utf8encode;
	    utf8encode = null;
	  }

	  var data = (packet.data === undefined)
	    ? undefined
	    : packet.data.buffer || packet.data;

	  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
	    return encodeArrayBuffer(packet, supportsBinary, callback);
	  } else if (Blob && data instanceof global.Blob) {
	    return encodeBlob(packet, supportsBinary, callback);
	  }

	  // might be an object with { base64: true, data: dataAsBase64String }
	  if (data && data.base64) {
	    return encodeBase64Object(packet, callback);
	  }

	  // Sending data as a utf-8 string
	  var encoded = packets[packet.type];

	  // data fragment is optional
	  if (undefined !== packet.data) {
	    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
	  }

	  return callback('' + encoded);

	};

	function encodeBase64Object(packet, callback) {
	  // packet data is an object { base64: true, data: dataAsBase64String }
	  var message = 'b' + exports.packets[packet.type] + packet.data.data;
	  return callback(message);
	}

	/**
	 * Encode packet helpers for binary types
	 */

	function encodeArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var data = packet.data;
	  var contentArray = new Uint8Array(data);
	  var resultBuffer = new Uint8Array(1 + data.byteLength);

	  resultBuffer[0] = packets[packet.type];
	  for (var i = 0; i < contentArray.length; i++) {
	    resultBuffer[i+1] = contentArray[i];
	  }

	  return callback(resultBuffer.buffer);
	}

	function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  var fr = new FileReader();
	  fr.onload = function() {
	    packet.data = fr.result;
	    exports.encodePacket(packet, supportsBinary, true, callback);
	  };
	  return fr.readAsArrayBuffer(packet.data);
	}

	function encodeBlob(packet, supportsBinary, callback) {
	  if (!supportsBinary) {
	    return exports.encodeBase64Packet(packet, callback);
	  }

	  if (dontSendBlobs) {
	    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
	  }

	  var length = new Uint8Array(1);
	  length[0] = packets[packet.type];
	  var blob = new Blob([length.buffer, packet.data]);

	  return callback(blob);
	}

	/**
	 * Encodes a packet with binary data in a base64 string
	 *
	 * @param {Object} packet, has `type` and `data`
	 * @return {String} base64 encoded message
	 */

	exports.encodeBase64Packet = function(packet, callback) {
	  var message = 'b' + exports.packets[packet.type];
	  if (Blob && packet.data instanceof global.Blob) {
	    var fr = new FileReader();
	    fr.onload = function() {
	      var b64 = fr.result.split(',')[1];
	      callback(message + b64);
	    };
	    return fr.readAsDataURL(packet.data);
	  }

	  var b64data;
	  try {
	    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
	  } catch (e) {
	    // iPhone Safari doesn't let you apply with typed arrays
	    var typed = new Uint8Array(packet.data);
	    var basic = new Array(typed.length);
	    for (var i = 0; i < typed.length; i++) {
	      basic[i] = typed[i];
	    }
	    b64data = String.fromCharCode.apply(null, basic);
	  }
	  message += global.btoa(b64data);
	  return callback(message);
	};

	/**
	 * Decodes a packet. Changes format to Blob if requested.
	 *
	 * @return {Object} with `type` and `data` (if any)
	 * @api private
	 */

	exports.decodePacket = function (data, binaryType, utf8decode) {
	  // String data
	  if (typeof data == 'string' || data === undefined) {
	    if (data.charAt(0) == 'b') {
	      return exports.decodeBase64Packet(data.substr(1), binaryType);
	    }

	    if (utf8decode) {
	      try {
	        data = utf8.decode(data);
	      } catch (e) {
	        return err;
	      }
	    }
	    var type = data.charAt(0);

	    if (Number(type) != type || !packetslist[type]) {
	      return err;
	    }

	    if (data.length > 1) {
	      return { type: packetslist[type], data: data.substring(1) };
	    } else {
	      return { type: packetslist[type] };
	    }
	  }

	  var asArray = new Uint8Array(data);
	  var type = asArray[0];
	  var rest = sliceBuffer(data, 1);
	  if (Blob && binaryType === 'blob') {
	    rest = new Blob([rest]);
	  }
	  return { type: packetslist[type], data: rest };
	};

	/**
	 * Decodes a packet encoded in a base64 string
	 *
	 * @param {String} base64 encoded message
	 * @return {Object} with `type` and `data` (if any)
	 */

	exports.decodeBase64Packet = function(msg, binaryType) {
	  var type = packetslist[msg.charAt(0)];
	  if (!global.ArrayBuffer) {
	    return { type: type, data: { base64: true, data: msg.substr(1) } };
	  }

	  var data = base64encoder.decode(msg.substr(1));

	  if (binaryType === 'blob' && Blob) {
	    data = new Blob([data]);
	  }

	  return { type: type, data: data };
	};

	/**
	 * Encodes multiple messages (payload).
	 *
	 *     <length>:data
	 *
	 * Example:
	 *
	 *     11:hello world2:hi
	 *
	 * If any contents are binary, they will be encoded as base64 strings. Base64
	 * encoded strings are marked with a b before the length specifier
	 *
	 * @param {Array} packets
	 * @api private
	 */

	exports.encodePayload = function (packets, supportsBinary, callback) {
	  if (typeof supportsBinary == 'function') {
	    callback = supportsBinary;
	    supportsBinary = null;
	  }

	  var isBinary = hasBinary(packets);

	  if (supportsBinary && isBinary) {
	    if (Blob && !dontSendBlobs) {
	      return exports.encodePayloadAsBlob(packets, callback);
	    }

	    return exports.encodePayloadAsArrayBuffer(packets, callback);
	  }

	  if (!packets.length) {
	    return callback('0:');
	  }

	  function setLengthHeader(message) {
	    return message.length + ':' + message;
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
	      doneCallback(null, setLengthHeader(message));
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(results.join(''));
	  });
	};

	/**
	 * Async array map using after
	 */

	function map(ary, each, done) {
	  var result = new Array(ary.length);
	  var next = after(ary.length, done);

	  var eachWithIndex = function(i, el, cb) {
	    each(el, function(error, msg) {
	      result[i] = msg;
	      cb(error, result);
	    });
	  };

	  for (var i = 0; i < ary.length; i++) {
	    eachWithIndex(i, ary[i], next);
	  }
	}

	/*
	 * Decodes data when a payload is maybe expected. Possible binary contents are
	 * decoded from their base64 representation
	 *
	 * @param {String} data, callback method
	 * @api public
	 */

	exports.decodePayload = function (data, binaryType, callback) {
	  if (typeof data != 'string') {
	    return exports.decodePayloadAsBinary(data, binaryType, callback);
	  }

	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var packet;
	  if (data == '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	  var length = ''
	    , n, msg;

	  for (var i = 0, l = data.length; i < l; i++) {
	    var chr = data.charAt(i);

	    if (':' != chr) {
	      length += chr;
	    } else {
	      if ('' == length || (length != (n = Number(length)))) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      msg = data.substr(i + 1, n);

	      if (length != msg.length) {
	        // parser error - ignoring payload
	        return callback(err, 0, 1);
	      }

	      if (msg.length) {
	        packet = exports.decodePacket(msg, binaryType, true);

	        if (err.type == packet.type && err.data == packet.data) {
	          // parser error in individual packet - ignoring payload
	          return callback(err, 0, 1);
	        }

	        var ret = callback(packet, i + n, l);
	        if (false === ret) return;
	      }

	      // advance cursor
	      i += n;
	      length = '';
	    }
	  }

	  if (length != '') {
	    // parser error - ignoring payload
	    return callback(err, 0, 1);
	  }

	};

	/**
	 * Encodes multiple messages (payload) as binary.
	 *
	 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
	 * 255><data>
	 *
	 * Example:
	 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
	 *
	 * @param {Array} packets
	 * @return {ArrayBuffer} encoded payload
	 * @api private
	 */

	exports.encodePayloadAsArrayBuffer = function(packets, callback) {
	  if (!packets.length) {
	    return callback(new ArrayBuffer(0));
	  }

	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(data) {
	      return doneCallback(null, data);
	    });
	  }

	  map(packets, encodeOne, function(err, encodedPackets) {
	    var totalLength = encodedPackets.reduce(function(acc, p) {
	      var len;
	      if (typeof p === 'string'){
	        len = p.length;
	      } else {
	        len = p.byteLength;
	      }
	      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
	    }, 0);

	    var resultArray = new Uint8Array(totalLength);

	    var bufferIndex = 0;
	    encodedPackets.forEach(function(p) {
	      var isString = typeof p === 'string';
	      var ab = p;
	      if (isString) {
	        var view = new Uint8Array(p.length);
	        for (var i = 0; i < p.length; i++) {
	          view[i] = p.charCodeAt(i);
	        }
	        ab = view.buffer;
	      }

	      if (isString) { // not true binary
	        resultArray[bufferIndex++] = 0;
	      } else { // true binary
	        resultArray[bufferIndex++] = 1;
	      }

	      var lenStr = ab.byteLength.toString();
	      for (var i = 0; i < lenStr.length; i++) {
	        resultArray[bufferIndex++] = parseInt(lenStr[i]);
	      }
	      resultArray[bufferIndex++] = 255;

	      var view = new Uint8Array(ab);
	      for (var i = 0; i < view.length; i++) {
	        resultArray[bufferIndex++] = view[i];
	      }
	    });

	    return callback(resultArray.buffer);
	  });
	};

	/**
	 * Encode as Blob
	 */

	exports.encodePayloadAsBlob = function(packets, callback) {
	  function encodeOne(packet, doneCallback) {
	    exports.encodePacket(packet, true, true, function(encoded) {
	      var binaryIdentifier = new Uint8Array(1);
	      binaryIdentifier[0] = 1;
	      if (typeof encoded === 'string') {
	        var view = new Uint8Array(encoded.length);
	        for (var i = 0; i < encoded.length; i++) {
	          view[i] = encoded.charCodeAt(i);
	        }
	        encoded = view.buffer;
	        binaryIdentifier[0] = 0;
	      }

	      var len = (encoded instanceof ArrayBuffer)
	        ? encoded.byteLength
	        : encoded.size;

	      var lenStr = len.toString();
	      var lengthAry = new Uint8Array(lenStr.length + 1);
	      for (var i = 0; i < lenStr.length; i++) {
	        lengthAry[i] = parseInt(lenStr[i]);
	      }
	      lengthAry[lenStr.length] = 255;

	      if (Blob) {
	        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
	        doneCallback(null, blob);
	      }
	    });
	  }

	  map(packets, encodeOne, function(err, results) {
	    return callback(new Blob(results));
	  });
	};

	/*
	 * Decodes data when a payload is maybe expected. Strings are decoded by
	 * interpreting each byte as a key code for entries marked to start with 0. See
	 * description of encodePayloadAsBinary
	 *
	 * @param {ArrayBuffer} data, callback method
	 * @api public
	 */

	exports.decodePayloadAsBinary = function (data, binaryType, callback) {
	  if (typeof binaryType === 'function') {
	    callback = binaryType;
	    binaryType = null;
	  }

	  var bufferTail = data;
	  var buffers = [];

	  var numberTooLong = false;
	  while (bufferTail.byteLength > 0) {
	    var tailArray = new Uint8Array(bufferTail);
	    var isString = tailArray[0] === 0;
	    var msgLength = '';

	    for (var i = 1; ; i++) {
	      if (tailArray[i] == 255) break;

	      if (msgLength.length > 310) {
	        numberTooLong = true;
	        break;
	      }

	      msgLength += tailArray[i];
	    }

	    if(numberTooLong) return callback(err, 0, 1);

	    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
	    msgLength = parseInt(msgLength);

	    var msg = sliceBuffer(bufferTail, 0, msgLength);
	    if (isString) {
	      try {
	        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
	      } catch (e) {
	        // iPhone Safari doesn't let you apply to typed arrays
	        var typed = new Uint8Array(msg);
	        msg = '';
	        for (var i = 0; i < typed.length; i++) {
	          msg += String.fromCharCode(typed[i]);
	        }
	      }
	    }

	    buffers.push(msg);
	    bufferTail = sliceBuffer(bufferTail, msgLength);
	  }

	  var total = buffers.length;
	  buffers.forEach(function(buffer, i) {
	    callback(exports.decodePacket(buffer, binaryType, true), i, total);
	  });
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var parser = __webpack_require__(413);
	var Emitter = __webpack_require__(393);

	/**
	 * Module exports.
	 */

	module.exports = Transport;

	/**
	 * Transport abstract constructor.
	 *
	 * @param {Object} options.
	 * @api private
	 */

	function Transport (opts) {
	  this.path = opts.path;
	  this.hostname = opts.hostname;
	  this.port = opts.port;
	  this.secure = opts.secure;
	  this.query = opts.query;
	  this.timestampParam = opts.timestampParam;
	  this.timestampRequests = opts.timestampRequests;
	  this.readyState = '';
	  this.agent = opts.agent || false;
	  this.socket = opts.socket;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Transport.prototype);

	/**
	 * Emits an error.
	 *
	 * @param {String} str
	 * @return {Transport} for chaining
	 * @api public
	 */

	Transport.prototype.onError = function (msg, desc) {
	  var err = new Error(msg);
	  err.type = 'TransportError';
	  err.description = desc;
	  this.emit('error', err);
	  return this;
	};

	/**
	 * Opens the transport.
	 *
	 * @api public
	 */

	Transport.prototype.open = function () {
	  if ('closed' == this.readyState || '' == this.readyState) {
	    this.readyState = 'opening';
	    this.doOpen();
	  }

	  return this;
	};

	/**
	 * Closes the transport.
	 *
	 * @api private
	 */

	Transport.prototype.close = function () {
	  if ('opening' == this.readyState || 'open' == this.readyState) {
	    this.doClose();
	    this.onClose();
	  }

	  return this;
	};

	/**
	 * Sends multiple packets.
	 *
	 * @param {Array} packets
	 * @api private
	 */

	Transport.prototype.send = function(packets){
	  if ('open' == this.readyState) {
	    this.write(packets);
	  } else {
	    throw new Error('Transport not open');
	  }
	};

	/**
	 * Called upon open
	 *
	 * @api private
	 */

	Transport.prototype.onOpen = function () {
	  this.readyState = 'open';
	  this.writable = true;
	  this.emit('open');
	};

	/**
	 * Called with data.
	 *
	 * @param {String} data
	 * @api private
	 */

	Transport.prototype.onData = function(data){
	  var packet = parser.decodePacket(data, this.socket.binaryType);
	  this.onPacket(packet);
	};

	/**
	 * Called with a decoded packet.
	 */

	Transport.prototype.onPacket = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon close.
	 *
	 * @api private
	 */

	Transport.prototype.onClose = function () {
	  this.readyState = 'closed';
	  this.emit('close');
	};


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies
	 */

	var XMLHttpRequest = __webpack_require__(420);
	var XHR = __webpack_require__(421);
	var JSONP = __webpack_require__(422);
	var websocket = __webpack_require__(423);

	/**
	 * Export transports.
	 */

	exports.polling = polling;
	exports.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling(opts){
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname != location.hostname || port != opts.port;
	    xs = opts.secure != isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	exports.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	exports.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * JSON parse.
	 *
	 * @see Based on jQuery#parseJSON (MIT) and JSON2
	 * @api private
	 */

	var rvalidchars = /^[\],:{}\s]*$/;
	var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
	var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
	var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
	var rtrimLeft = /^\s+/;
	var rtrimRight = /\s+$/;

	module.exports = function parsejson(data) {
	  if ('string' != typeof data || !data) {
	    return null;
	  }

	  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

	  // Attempt to parse using the native JSON parser first
	  if (global.JSON && JSON.parse) {
	    return JSON.parse(data);
	  }

	  if (rvalidchars.test(data.replace(rvalidescape, '@')
	      .replace(rvalidtokens, ']')
	      .replace(rvalidbraces, ''))) {
	    return (new Function('return ' + data))();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	module.exports = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};


/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(431);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	// browser shim for xmlhttprequest module
	var hasCORS = __webpack_require__(433);

	module.exports = function(opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch(e) { }
	  }
	}


/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module requirements.
	 */

	var XMLHttpRequest = __webpack_require__(420);
	var Polling = __webpack_require__(432);
	var Emitter = __webpack_require__(393);
	var inherit = __webpack_require__(434);
	var debug = __webpack_require__(419)('engine.io-client:polling-xhr');

	/**
	 * Module exports.
	 */

	module.exports = XHR;
	module.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty(){}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR(opts){
	  Polling.call(this, opts);

	  if (global.location) {
	    var isSSL = 'https:' == location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = opts.hostname != global.location.hostname ||
	      port != opts.port;
	    this.xs = opts.secure != isSSL;
	  } else {
	    this.extraHeaders = opts.extraHeaders;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(XHR, Polling);

	/**
	 * XHR supports binary
	 */

	XHR.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR.prototype.request = function(opts){
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR.prototype.doWrite = function(data, fn){
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function(err){
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR.prototype.doPoll = function(){
	  debug('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function(data){
	    self.onData(data);
	  });
	  req.on('error', function(err){
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request(opts){
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined != opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function(){
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest(opts);
	  var self = this;

	  try {
	    debug('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}
	    if (this.supportsBinary) {
	      // This has to be done after open because Firefox is stupid
	      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
	      xhr.responseType = 'arraybuffer';
	    }

	    if ('POST' == this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = true;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function(){
	        self.onLoad();
	      };
	      xhr.onerror = function(){
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function(){
	        if (4 != xhr.readyState) return;
	        if (200 == xhr.status || 1223 == xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function(){
	            self.onError(xhr.status);
	          }, 0);
	        }
	      };
	    }

	    debug('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function() {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (global.document) {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function(){
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function(data){
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function(err){
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function(fromError){
	  if ('undefined' == typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty;
	  } else {
	    this.xhr.onreadystatechange = empty;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch(e) {}
	  }

	  if (global.document) {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function(){
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
	    } catch (e) {}
	    if (contentType === 'application/octet-stream') {
	      data = this.xhr.response;
	    } else {
	      if (!this.supportsBinary) {
	        data = this.xhr.responseText;
	      } else {
	        try {
	          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
	        } catch (e) {
	          var ui8Arr = new Uint8Array(this.xhr.response);
	          var dataArray = [];
	          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
	            dataArray.push(ui8Arr[idx]);
	          }

	          data = String.fromCharCode.apply(null, dataArray);
	        }
	      }
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function(){
	  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function(){
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	if (global.document) {
	  Request.requestsCount = 0;
	  Request.requests = {};
	  if (global.attachEvent) {
	    global.attachEvent('onunload', unloadHandler);
	  } else if (global.addEventListener) {
	    global.addEventListener('beforeunload', unloadHandler, false);
	  }
	}

	function unloadHandler() {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module requirements.
	 */

	var Polling = __webpack_require__(432);
	var inherit = __webpack_require__(434);

	/**
	 * Module exports.
	 */

	module.exports = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Callbacks count.
	 */

	var index = 0;

	/**
	 * Noop.
	 */

	function empty () { }

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    if (!global.___eio) global.___eio = [];
	    callbacks = global.___eio;
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (global.document && global.addEventListener) {
	    global.addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function(e){
	    self.onError('jsonp poll error',e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  }
	  else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
	  
	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch(e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function(){
	      if (self.iframe.readyState == 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(414);
	var parser = __webpack_require__(413);
	var parseqs = __webpack_require__(416);
	var inherit = __webpack_require__(434);
	var yeast = __webpack_require__(435);
	var debug = __webpack_require__(419)('engine.io-client:websocket');
	var BrowserWebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocket = BrowserWebSocket;
	if (!WebSocket && typeof window === 'undefined') {
	  try {
	    WebSocket = __webpack_require__(430);
	  } catch (e) { }
	}

	/**
	 * Module exports.
	 */

	module.exports = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function(){
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var self = this;
	  var uri = this.uri();
	  var protocols = void(0);
	  var opts = {
	    agent: this.agent,
	    perMessageDeflate: this.perMessageDeflate
	  };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }

	  this.ws = BrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'buffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function(){
	  var self = this;

	  this.ws.onopen = function(){
	    self.onOpen();
	  };
	  this.ws.onclose = function(){
	    self.onClose();
	  };
	  this.ws.onmessage = function(ev){
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function(e){
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Override `onData` to use a timer on iOS.
	 * See: https://gist.github.com/mloughran/2052006
	 *
	 * @api private
	 */

	if ('undefined' != typeof navigator
	  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
	  WS.prototype.onData = function(data){
	    var self = this;
	    setTimeout(function(){
	      Transport.prototype.onData.call(self, data);
	    }, 0);
	  };
	}

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function(packet) {
	      parser.encodePacket(packet, self.supportsBinary, function(data) {
	        if (!BrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' == typeof data ? global.Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        //Sometimes the websocket has already been closed but the browser didn't
	        //have a chance of informing us about it yet, in that case send will
	        //throw an error
	        try {
	          if (BrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e){
	          debug('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done(){
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function(){
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function(){
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function(){
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' == schema && this.port != 443)
	    || ('ws' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function(){
	  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	module.exports = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = after

	function after(count, callback, err_cb) {
	    var bail = false
	    err_cb = err_cb || noop
	    proxy.count = count

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true
	            callback(err)
	            // future error callbacks will go to error handler
	            callback = err_cb
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result)
	        }
	    }
	}

	function noop() {}


/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var BlobBuilder = global.BlobBuilder
	  || global.WebKitBlobBuilder
	  || global.MSBlobBuilder
	  || global.MozBlobBuilder;

	/**
	 * Check if Blob constructor is supported
	 */

	var blobSupported = (function() {
	  try {
	    var a = new Blob(['hi']);
	    return a.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if Blob constructor supports ArrayBufferViews
	 * Fails in Safari 6, so we need to map to ArrayBuffers there.
	 */

	var blobSupportsArrayBufferView = blobSupported && (function() {
	  try {
	    var b = new Blob([new Uint8Array([1,2])]);
	    return b.size === 2;
	  } catch(e) {
	    return false;
	  }
	})();

	/**
	 * Check if BlobBuilder is supported
	 */

	var blobBuilderSupported = BlobBuilder
	  && BlobBuilder.prototype.append
	  && BlobBuilder.prototype.getBlob;

	/**
	 * Helper function that maps ArrayBufferViews to ArrayBuffers
	 * Used by BlobBuilder constructor and old browsers that didn't
	 * support it in the Blob constructor.
	 */

	function mapArrayBufferViews(ary) {
	  for (var i = 0; i < ary.length; i++) {
	    var chunk = ary[i];
	    if (chunk.buffer instanceof ArrayBuffer) {
	      var buf = chunk.buffer;

	      // if this is a subarray, make a copy so we only
	      // include the subarray region from the underlying buffer
	      if (chunk.byteLength !== buf.byteLength) {
	        var copy = new Uint8Array(chunk.byteLength);
	        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
	        buf = copy.buffer;
	      }

	      ary[i] = buf;
	    }
	  }
	}

	function BlobBuilderConstructor(ary, options) {
	  options = options || {};

	  var bb = new BlobBuilder();
	  mapArrayBufferViews(ary);

	  for (var i = 0; i < ary.length; i++) {
	    bb.append(ary[i]);
	  }

	  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
	};

	function BlobConstructor(ary, options) {
	  mapArrayBufferViews(ary);
	  return new Blob(ary, options || {});
	};

	module.exports = (function() {
	  if (blobSupported) {
	    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
	  } else if (blobBuilderSupported) {
	    return BlobBuilderConstructor;
	  } else {
	    return undefined;
	  }
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/*
	 * Module requirements.
	 */

	var isArray = __webpack_require__(402);

	/**
	 * Module exports.
	 */

	module.exports = hasBinary;

	/**
	 * Checks for binary data.
	 *
	 * Right now only Buffer and ArrayBuffer are supported..
	 *
	 * @param {Object} anything
	 * @api public
	 */

	function hasBinary(data) {

	  function _hasBinary(obj) {
	    if (!obj) return false;

	    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
	         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
	         (global.Blob && obj instanceof Blob) ||
	         (global.File && obj instanceof File)
	        ) {
	      return true;
	    }

	    if (isArray(obj)) {
	      for (var i = 0; i < obj.length; i++) {
	          if (_hasBinary(obj[i])) {
	              return true;
	          }
	      }
	    } else if (obj && 'object' == typeof obj) {
	      if (obj.toJSON) {
	        obj = obj.toJSON();
	      }

	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  return _hasBinary(data);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */
	(function(chars){
	  "use strict";

	  exports.encode = function(arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer),
	    i, len = bytes.length, base64 = "";

	    for (i = 0; i < len; i+=3) {
	      base64 += chars[bytes[i] >> 2];
	      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	      base64 += chars[bytes[i + 2] & 63];
	    }

	    if ((len % 3) === 2) {
	      base64 = base64.substring(0, base64.length - 1) + "=";
	    } else if (len % 3 === 1) {
	      base64 = base64.substring(0, base64.length - 2) + "==";
	    }

	    return base64;
	  };

	  exports.decode =  function(base64) {
	    var bufferLength = base64.length * 0.75,
	    len = base64.length, i, p = 0,
	    encoded1, encoded2, encoded3, encoded4;

	    if (base64[base64.length - 1] === "=") {
	      bufferLength--;
	      if (base64[base64.length - 2] === "=") {
	        bufferLength--;
	      }
	    }

	    var arraybuffer = new ArrayBuffer(bufferLength),
	    bytes = new Uint8Array(arraybuffer);

	    for (i = 0; i < len; i+=4) {
	      encoded1 = chars.indexOf(base64[i]);
	      encoded2 = chars.indexOf(base64[i+1]);
	      encoded3 = chars.indexOf(base64[i+2]);
	      encoded4 = chars.indexOf(base64[i+3]);

	      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }

	    return arraybuffer;
	  };
	})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/utf8js v2.0.0 by @mathias */
	;(function(root) {

		// Detect free variables `exports`
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}

		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/

		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}

		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}

		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}

		/*--------------------------------------------------------------------------*/

		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}

			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}

			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}

		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;

			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}

			if (byteIndex == byteCount) {
				return false;
			}

			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;

			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}

			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				var byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}

			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}

			throw Error('Invalid UTF-8 detected');
		}

		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}

		/*--------------------------------------------------------------------------*/

		var utf8 = {
			'version': '2.0.0',
			'encode': utf8encode,
			'decode': utf8decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return utf8;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = utf8;
			} else { // in Narwhal or RingoJS v0.7.0-
				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				for (var key in utf8) {
					hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.utf8 = utf8;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(412)(module), (function() { return this; }())))

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(408);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Transport = __webpack_require__(414);
	var parseqs = __webpack_require__(416);
	var parser = __webpack_require__(413);
	var inherit = __webpack_require__(434);
	var yeast = __webpack_require__(435);
	var debug = __webpack_require__(419)('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	module.exports = Polling;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function() {
	  var XMLHttpRequest = __webpack_require__(420);
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling(opts){
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(Polling, Transport);

	/**
	 * Transport name.
	 */

	Polling.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling.prototype.doOpen = function(){
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling.prototype.pause = function(onPause){
	  var pending = 0;
	  var self = this;

	  this.readyState = 'pausing';

	  function pause(){
	    debug('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function(){
	        debug('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function(){
	        debug('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling.prototype.poll = function(){
	  debug('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling.prototype.onData = function(data){
	  var self = this;
	  debug('polling got data %s', data);
	  var callback = function(packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' == self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' == packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' != this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' == this.readyState) {
	      this.poll();
	    } else {
	      debug('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling.prototype.doClose = function(){
	  var self = this;

	  function close(){
	    debug('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' == this.readyState) {
	    debug('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling.prototype.write = function(packets){
	  var self = this;
	  this.writable = false;
	  var callbackfn = function() {
	    self.writable = true;
	    self.emit('drain');
	  };

	  var self = this;
	  parser.encodePayload(packets, this.supportsBinary, function(data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling.prototype.uri = function(){
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' == schema && this.port != 443) ||
	     ('http' == schema && this.port != 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};


/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  module.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  module.exports = false;
	}


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	
	module.exports = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i = 0
	  , prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length + map[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length; i++) map[alphabet[i]] = i;

	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode;
	yeast.decode = decode;
	module.exports = yeast;


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(8);

	var _react2 = _interopRequireDefault(_react);

	var _Translate = __webpack_require__(68);

	var Translate = _interopRequireWildcard(_Translate);

	var _TsvSettingsStore = __webpack_require__(69);

	var _TsvSettingsStore2 = _interopRequireDefault(_TsvSettingsStore);

	var _reactRouter = __webpack_require__(9);

	var _elemental = __webpack_require__(121);

	var _E = _interopRequireWildcard(_elemental);

	var _TsvUtils = __webpack_require__(67);

	var _VendCartItem = __webpack_require__(93);

	var _VendCartItem2 = _interopRequireDefault(_VendCartItem);

	var _TsvStore = __webpack_require__(74);

	var _TsvStore2 = _interopRequireDefault(_TsvStore);

	var _TsvActions = __webpack_require__(75);

	var _TsvActions2 = _interopRequireDefault(_TsvActions);

	var _BigLogger = __webpack_require__(1);

	var _BigLogger2 = _interopRequireDefault(_BigLogger);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	//import TsvService from '../../lib/TsvService'


	var Big = new _BigLogger2.default('CustomerCreditVending');

	var CashVending = function (_Component) {
		_inherits(CashVending, _Component);

		function CashVending(props, context) {
			_classCallCheck(this, CashVending);

			//TsvSettingsStore.setSession('currentView', 'CashVending');
			//TsvSettingsStore.setCache('currentLocation', '/CashVending');

			var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(CashVending).call(this, props, context));
			// MUST call super() before any this.*


			_TsvSettingsStore2.default.setConfig('bDisplayCgryNavigation', false);
			(0, _TsvUtils.updateCredit)();
			_TsvActions2.default.apiCall('enablePaymentDevice', "PAYMENT_TYPE_CASH");

			_this.state = {
				insertedAmount: _TsvSettingsStore2.default.getSession('creditBalance'),
				summary: _TsvSettingsStore2.default.getCache('shoppingCart.summary'),
				hintMsg: Translate.translate('CashVending', 'HintMessageInsertCash'),
				// only in cash.js:
				//salesTaxAmount: TsvSettingsStore.getCache('shoppingCart.summary.salesTaxAmount'),
				showCancelBtnCash: true,
				cart: _TsvSettingsStore2.default.getCache('shoppingCart.detail')
			};

			// only in cash.js:
			//item: TsvSettingsStore.getCache('shoppingCart.detail')[0]
			(0, _TsvUtils.resetPaymentTimer)();

			// KENT note: this session var I believe is not used in Shopping Cart regime, and checkBalance only returns a boolean
			_TsvSettingsStore2.default.setSession('bVendedOldCredit', _this.checkBalance.bind(_this));

			if (_TsvSettingsStore2.default.getSession('bVendingInProcess')) {

				(0, _TsvUtils.killTimers)('paymentTimer');

				_this.state.showSpinner = true;
				_this.state.hintMsg = Translate.translate('CashVending', 'HintMessageVending');
				_this.state.showCancelBtnCash = false;
			} else {
				(0, _TsvUtils.startPaymentTimer)();
			}

			_this._onRootstoreChange = _this._onRootstoreChange.bind(_this);
			_this._onTsvChange = _this._onTsvChange.bind(_this);
			_this.storefrontTimeout = null;

			return _this;
		}

		_createClass(CashVending, [{
			key: 'cancel',
			value: function cancel() {
				// only in cash.js:
				//TsvSettingsStore.setSession('insertedAmount', 0);
				_TsvActions2.default.apiCall('disablePaymentDevice');
				(0, _TsvUtils.killTimers)('paymentTimer');
				(0, _TsvUtils.emptyCart)();
				// only in cash.js:
				//browserHistory.push("/View1");
				(0, _TsvUtils.gotoDefaultIdlePage)();
			}
		}, {
			key: 'checkBalance',
			value: function checkBalance(calculatedBalance) {
				var _this2 = this;

				var total = _TsvSettingsStore2.default.getCache('shoppingCart.summary.TotalPrice'),
				    cart_detail = _TsvSettingsStore2.default.getCache('shoppingCart.detail') || [],
				    balance = calculatedBalance || _TsvSettingsStore2.default.getSession('creditBalance');

				Big.log('checkBalance, 3 things:');
				Big.log([total, cart_detail, balance]);

				// cash.js logic:
				//if ((this.insertedAmount * 100) >= (total * 100) && TsvSettingsStore.getCache('shoppingCart.detail', []).length > 0){
				if (balance >= total && cart_detail.length > 0) {

					Big.log('customer has inserted enough money!');

					var creditDue = balance - total;
					if (creditDue) {
						// 1. clear the credit in Paylink
						// 2. push the credit to the customer
						// (logically those should reverse, we should make sure the credit is pushed before we clear....)
						// FIXME later
						_TsvActions2.default.apiCall('resetCreditBalance', function () {
							Big.log(' >>>>>>> customer should receive ' + creditDue + ' in credits to their account!');
						});
					} else {
						Big.log(' >>>>>>> no credit due.');
					}

					_TsvActions2.default.apiCall('disablePaymentDevice', function () {
						Big.log('... payment device disabled');
						if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
							Big.log('... vending was not in process, so vend away...!!!!!');
							// only in cash.js:
							_TsvSettingsStore2.default.setSession('bVendingInProcess', true);
							_TsvActions2.default.apiCall('startVend');
							Big.log('... start vend has been called');
							_this2.setState({
								hintMsg: Translate.translate('CashVending', 'HintMessageVending'),
								showCancelBtnCash: false,
								showSpinner: true,
								vendingItem: null
							});
						} else {
							Big.log('... vending WAS IN process, error maybe?');
						}
					});
					if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
						Big.warn('checkBalance() returning true');
						return true;
					}
					Big.warn('checkBalance() returning false [1]');
					return false;
				}
				Big.warn('checkBalance() returning false [2]');
				Big.log([cart_detail, balance]);
				return false;
			}

			// Add change listeners to stores

		}, {
			key: 'componentDidMount',
			value: function componentDidMount() {
				(0, _TsvUtils.startGeneralIdleTimer)(this.props.location.pathname);
				_TsvStore2.default.addChangeListener(this._onTsvChange);
				_TsvSettingsStore2.default.addChangeListener(this._onRootstoreChange);
				// let's check the balance at module load:
				this.checkBalance();
				_TsvActions2.default.apiCall('fetchShoppingCart2', function (err, data) {
					if (err) Big.throw(err);
					_TsvSettingsStore2.default.setCache('shoppingCart', data);
				});
			}

			// Remove change listers from stores

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				_TsvStore2.default.removeChangeListener(this._onTsvChange);
				_TsvSettingsStore2.default.removeChangeListener(this._onRootstoreChange);
			}
		}, {
			key: '_onRootstoreChange',
			value: function _onRootstoreChange() {
				var data = _TsvSettingsStore2.default.getCache('shoppingCart');
				/*
	   	if (this.state.loadedCartOnce && (!data.detail || !data.detail.length)) {
	   	  	//gotoDefaultIdlePage();
	   		browserHistory.push('/Storefront');
	   
	   	} else {
	   	*/
				this.setState({
					cart: data.detail,
					summary: data.summary,
					loadedCartOnce: true
				});
				//}
			}
		}, {
			key: '_onTsvChange',
			//vendingItem: data.detail && data.detail.length ? data.detail[0] : null
			value: function _onTsvChange(event) {
				if (event && event.method) {
					if (!event.data.length && event.method.toString() !== 'payFullWithCustomerCredit') {
						Big.error('method "' + event.method + '", but no args or data???');
						Big.log(event);
						return;
					}
					switch (event.method) {
						case 'payFullWithCustomerCredit':
							var state = {
								insertedAmount: this.state.summary.TotalPrice
							};
							this.setState(state);

							Big.log('payFullWithCustomerCredit');
							Big.log(state);

							(0, _TsvUtils.resetPaymentTimer)();
							_TsvSettingsStore2.default.setSession('creditBalance', state.insertedAmount);
							this.checkBalance(state.insertedAmount);
							break;

						case 'creditBalanceChanged':
							var ins = event.data[0];
							var balance = event.data[1];

							if (this.state.summary && this.state.summary.TotalPrice) {
								Big.warn('hmmmm maybe we need to fix the creditBalance calc? mine:[' + balance / 100.00 + '], other:[' + (this.state.summary.TotalPrice - balance / 100.00) + ']' + "\n\n ... but maybe it gets taken care of local method 'checkBalance'");
							}
							// only in cash.js:
							//TsvSettingsStore.setSession('creditBalance', this.state.summary.TotalPrice - balance/100.00);

							var state = {
								insertedAmount: balance / 100.00
							};

							if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
								state.hintMsg = Translate.translate('CashVending', 'HintMessageVending');
								state.showSpinner = true;
								state.showCancelBtnCash = false;
							}

							this.setState(state);

							(0, _TsvUtils.resetPaymentTimer)();
							_TsvSettingsStore2.default.setSession('creditBalance', state.insertedAmount);
							this.checkBalance(state.insertedAmount);
							break;

						case 'cardTransactionRespose':
							if (!_TsvSettingsStore2.default.getSession('bVendingInProcess')) {
								(0, _TsvUtils.cardTransaction)(event.data[0]);
								_reactRouter.browserHistory.push("/CardVending");
							}
							break;

						case 'vendResponse':
							(0, _TsvUtils.vendResponse)(event.data[0]);
							(0, _TsvUtils.killTimers)('paymentTimer');
							break;

						case 'notifyVendingItem':
							//Big.log('vendingItem');
							//Big.log(event.data[0]);
							this.setState({
								vendingItem: event.data[0]
							});
							break;

						case 'notifyVmsEvent':
							Big.warn('notifyVmsEvent received, probably should start pushing these to the server!');
							Big.log(event.data);
							break;
					}
				}
			}
		}, {
			key: 'render',
			value: function render() {
				if (this.storefrontTimeout) {
					clearTimeout(this.storefrontTimeout);
				}
				if (this.state.vendingComplete) {
					_reactRouter.browserHistory.push('/ThankYouMsg');
					return _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'h1',
							null,
							'Vending complete!'
						)
					);
				}
				if (!this.state.cart || !this.state.cart.length) {
					this.storefrontTimeout = setTimeout(function () {
						_reactRouter.browserHistory.push('/Storefront');
					}, 5000);
					return _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'h1',
							null,
							'Error: no cart items found to purchase, sorry!'
						),
						_react2.default.createElement(_E.Button, { component: _react2.default.createElement(
								_reactRouter.Link,
								{ to: '/Storefront' },
								'Storefront'
							) })
					);
				}
				return _react2.default.createElement(
					_E.Row,
					null,
					_react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h2',
							null,
							'Use your Customer Credit to complete your purchase'
						),
						_react2.default.createElement(
							_E.Col,
							null,
							this.state.cart.map(function (prd, $index) {
								return _react2.default.createElement(_VendCartItem2.default, {
									key: $index,
									data: prd
								});
							})
						)
					),
					this.hintMsg ? _react2.default.createElement(
						'p',
						{ id: 'hint' },
						this.hintMsg
					) : null,
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/6', sm: '1/6', md: '1/6', lg: '1/6' },
						' '
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
						_react2.default.createElement(
							'p',
							{ style: { fontSize: '2em', textAlign: 'center' } },
							Translate.translate('CashVending', 'TotalAmountLabel'),
							' Total: ',
							_react2.default.createElement(
								'strong',
								null,
								(0, _TsvUtils.currencyFilter)(this.state.summary.TotalPrice)
							)
						)
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/3', sm: '1/3', md: '1/3', lg: '1/3' },
						_react2.default.createElement(
							'p',
							{ style: { fontSize: '2em', textAlign: 'center' } },
							Translate.translate('CashVending', 'InsertedAmountLabel'),
							' ',
							_react2.default.createElement(
								'strong',
								null,
								'$',
								this.state.insertedAmount ? (0, _TsvUtils.currencyFilter)(this.state.insertedAmount) : '0.00'
							)
						)
					),
					_react2.default.createElement(
						_E.Col,
						{ xs: '1/6', sm: '1/6', md: '1/6', lg: '1/6' },
						' '
					),
					this.state.showCancelBtnCash ? _react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							_E.Row,
							null,
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								' '
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								_react2.default.createElement(
									_E.Button,
									{ type: 'primary', size: 'lg', onClick: function onClick() {
											_reactRouter.browserHistory.push('/Storefront');
										} },
									Translate.translate('ShoppingCart', 'Shop_More')
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								_react2.default.createElement(
									_E.Button,
									{ type: 'danger', size: 'lg', onClick: this.cancel.bind(this) },
									_react2.default.createElement(_E.Glyph, { icon: 'circle-slash' }),
									'Cancel Transaction'
								)
							),
							_react2.default.createElement(
								_E.Col,
								{ xs: '1/4', sm: '1/4', md: '1/4', lg: '1/4' },
								' '
							)
						)
					) : null,
					this.renderVendingItem()
				);
			}
		}, {
			key: 'renderVendingItem',
			value: function renderVendingItem() {
				if (this.state.vendingItem) {
					return _react2.default.createElement(
						_E.Col,
						null,
						_react2.default.createElement(
							'h1',
							{ style: { textAlign: 'center' } },
							'Vending item:',
							_react2.default.createElement('br', null),
							_react2.default.createElement(
								'strong',
								null,
								this.state.vendingItem.productName
							)
						),
						_react2.default.createElement(
							'div',
							{ style: { textAlign: 'center' } },
							_react2.default.createElement(_E.Spinner, { size: 'lg', type: 'primary' }),
							this.state.vendingItem.imagePath ? _react2.default.createElement('img', { src: this.state.vendingItem.imagePath, style: { maxWidth: '35%', display: 'block', margin: '1em auto' } }) : null
						)
					);
				}
				return null;
			}
		}, {
			key: 'renderSpinner',
			value: function renderSpinner() {
				return _react2.default.createElement(_E.Spinner, { size: 'md', type: 'inverted' });
			}
		}]);

		return CashVending;
	}(_react.Component);

	exports.default = CashVending;

/***/ }
/******/ ]);